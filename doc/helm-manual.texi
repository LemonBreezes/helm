\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename helm-manual.info
@settitle M-x helm-documentation
@documentencoding UTF-8
@documentlanguage en
@set txicodequoteundirected
@set txicodequotebacktick
@set MAINTAINERSITE @uref{https://github.com/thierryvolpiatto webpage}
@set MAINTAINER Thierry Volpiatto
@set MAINTAINEREMAIL @email{thierry.volpiatto@gmail.com}
@set MAINTAINERCONTACT @uref{mailto:thierry.volpiatto@gmail.com,contact the maintainer}
@c %**end of header

@dircategory Emacs Add-ons
@direntry
* M-x helm-documentation: (helm-manual). M-x helm-documentation.
@end direntry

@finalout
@titlepage
@title M-x helm-documentation
@subtitle Release 3.6.2
@author The Helm Developers
@end titlepage

@contents

@ifnottex
@node Top
@top M-x helm-documentation
@end ifnottex

@menu
* Helm Generic Help::
* Helm Buffer::
* Helm Find Files::
* Helm ‘generic’ read file name completion::
* Helm Generic files::
* Helm fd::
* Helm Grep::
* Helm GID::
* Helm AG::
* Helm git-grep::
* Helm PDFgrep Map::
* Helm Etags Map::
* Helm UCS::
* Helm bookmark name::
* Helm Eshell on file::
* Helm Ido virtual buffers::
* Helm Moccur::
* Helm Top::
* Helm Elisp package::
* Helm M-x::
* Helm Imenu::
* Helm colors::
* Helm Semantic::
* Helm kmacro::
* Helm kill ring::

@detailmenu
--- The Detailed Node Listing ---

Helm Generic Help

* Basics::
* Helm sources::
* Modify keybindings in Helm::
* Matching in Helm::
* Helm mode::
* Helm help::
* Customize Helm::
* Display Helm in windows and frames::
* Helm’s basic operations and default key bindings::
* The actions menu::
* Action transformers::
* Shortcuts for n-th first actions::
* Shortcuts for executing the default action on the n-th candidate::
* Mouse control in Helm::
* Marked candidates::
* Follow candidates::
* Frequently Used Commands::
* Special yes, no or yes for all answers: Special yes no or yes for all answers. 
* Moving in @code{helm-buffer}::
* Resume previous session from current Helm session::
* Global commands::
* Debugging Helm::
* Writing your own Helm sources::
* Helm Map::

Helm sources

* Configure sources::

Matching in Helm

* Completion-styles::

Helm mode

* What gets or does not get @samp{helmized} when @code{helm-mode} is enabled?::
* Helm functions vs helmized Emacs functions::
* Completion behavior with Helm and completion-at-point::

Global commands

* Resume Helm session from outside Helm::

Helm Buffer

* Pattern matching in helm-buffers::
* Tips::
* Commands::

Helm Find Files

* Overview::
* Operate on files::
* Working on Remote files with TRAMP::
* Misc. Remarks: Misc Remarks. 
* Commands: Commands (1). 

Operate on files

* Create a file or a directory::
* Open files in separate windows::
* Open files::
* Browse images directories with @code{helm-follow-mode} and navigate up/down::
* Copy or Rename files::
* Touch files::
* Delete files::
* Checksum file::
* Grep files::
* Execute Eshell commands on files::
* Attach files to a mail buffer (message-mode)::

Misc. Remarks

* Find file at point::
* Insert filename at point or complete filename at point::
* Edit marked files in a dired buffer::
* Bookmark the @code{helm-find-files} session::
* Ignored or boring files::
* Helm-find-files is using a cache::

Helm ‘generic’ read file name completion

* Tips: Tips (1). 
* Commands: Commands (2). 

Tips

* Navigation::
* Persistent actions::
* Delete characters backward::
* Create new directories and files::
* Exiting minibuffer with empty string::

Helm Generic files

* Tips: Tips (2). 
* Commands: Commands (3). 

Tips

* Locate::
* Browse project::
* Find command::

Helm fd

* Tips: Tips (3). 
* Commands: Commands (4). 

Helm Grep

* Tips: Tips (4). 

Tips

* Meaning of the prefix argument::
* You can use wild cards when selecting files (e.g. @samp{*.el}): You can use wild cards when selecting files (eg @samp{*el}). 
* Grep hidden files::
* You can grep in different directories by marking files or using wild cards::
* You can save the result in a @code{helm-grep-mode} buffer::
* Helm-grep supports multi-matching::
* See full path of selected candidate::
* Open file in other window::
* Performance over TRAMP::

Helm GID

* Tips: Tips (5). 

Helm AG

* Tips: Tips (6). 

Helm git-grep

* Commands: Commands (5). 

Helm PDFgrep Map

* Commands: Commands (6). 

Helm Etags Map

* Commands: Commands (7). 

Helm UCS

* Tips: Tips (7). 
* Commands: Commands (8). 

Helm bookmark name

* Commands: Commands (9). 

Helm Eshell on file

* Tips: Tips (8). 
* Commands: Commands (10). 

Tips

* Pass extra arguments after filename::
* Specify marked files as arguments::
* Run eshell commands asynchronously::

Helm Ido virtual buffers

* Commands: Commands (11). 

Helm Moccur

* Tips: Tips (9). 
* Commands: Commands (12). 

Tips

* Searching in many buffers::
* Matching::
* Automatically match symbol at point::
* Yank word at point in minibuffer::
* Preselection::
* Jump to the corresponding line in the searched buffer::
* Switch to buffer in other window::
* Save the results::
* Refresh the resumed session::
* Refresh a saved buffer::
* Edit a saved buffer::
* Search in region::
* Switch to next or previous source::

Helm Top

* Commands: Commands (13). 

Helm Elisp package

* Tips: Tips (10). 
* Commands: Commands (14). 

Tips

* Compile all your packages asynchronously::
* Upgrade Elisp packages::
* Meaning of flags prefixing packages::

Helm M-x

* Tips: Tips (11). 

Tips

* You can get help on any command with persistent action (C-j)::
* Prefix arguments::
* Completion styles in @kbd{helm-M-x}::
* Duplicate entries in helm-M-x history::

Helm Imenu

* Commands: Commands (15). 

Helm colors

* Commands: Commands (16). 

Helm Semantic

* Commands: Commands (17). 

Helm kmacro

* Tips: Tips (12). 
* Commands: Commands (18). 

Helm kill ring

* Tips: Tips (13). 
* Commands: Commands (19). 

@end detailmenu
@end menu

@node Helm Generic Help
@chapter Helm Generic Help

@menu
* Basics::
* Helm sources::
* Modify keybindings in Helm::
* Matching in Helm::
* Helm mode::
* Helm help::
* Customize Helm::
* Display Helm in windows and frames::
* Helm’s basic operations and default key bindings::
* The actions menu::
* Action transformers::
* Shortcuts for n-th first actions::
* Shortcuts for executing the default action on the n-th candidate::
* Mouse control in Helm::
* Marked candidates::
* Follow candidates::
* Frequently Used Commands::
* Special yes, no or yes for all answers: Special yes no or yes for all answers. 
* Moving in @code{helm-buffer}::
* Resume previous session from current Helm session::
* Global commands::
* Debugging Helm::
* Writing your own Helm sources::
* Helm Map::
@end menu

@node Basics
@section Basics

Helm narrows down the list of candidates as you type a filter
pattern.  See @ref{Matching in Helm}.

Helm accepts multiple space-separated patterns, each pattern can
be negated with @samp{!}.

Helm also supports fuzzy matching in some places when specified, you
will find several variables to enable fuzzy matching in diverse @ref{Helm sources, , sources}.

Helm generally uses familiar Emacs keys to navigate the list.
Here follow some of the less obvious bindings:

@itemize
@item
@kbd{@key{RET}} selects the
candidate from the list, executes the default action upon exiting
the Helm session.

@item
@kbd{C-j} executes the
default action but without exiting the Helm session.  Not all
sources support this.

@item
@kbd{@key{TAB}} displays a list of actions
available on current candidate or all marked candidates.  The
default binding <tab> is ordinarily used for completion, but that
would be redundant since Helm completes upon every character
entered in the prompt.
@end itemize

@strong{Note}: In addition to the default actions list, additional actions
appear depending on the type of the selected candidate(s).  They
are called filtered actions.

@strong{Additional Readings}:

@table @asis
@item Fuzzy Matching
@uref{https://github.com/emacs-helm/helm/wiki/Fuzzy-matching}
@item Helm Completion vs Emacs Completion
@uref{https://github.com/emacs-helm/helm/wiki#helm-completion-vs-emacs-completion}
@end table

@node Helm sources
@section Helm sources

Helm uses what’s called sources to provide different kinds of
completions.  Each Helm session can handle one or more source.  A
source is an alist object which is build from various classes, see
@ref{Writing your own Helm sources, , here}.

@strong{Additional Readings}:

@table @asis
@item Creating a Helm source
@uref{https://github.com/emacs-helm/helm/wiki/Developing#creating-a-source}
@end table

@menu
* Configure sources::
@end menu

@node Configure sources
@subsection Configure sources

You will find in Helm sources already built and bound to a
variable called generally @code{helm-source-<something>}.  In this case
it is an alist and you can change the attributes (keys) values
using @code{helm-set-attr} function in your configuration.  Of course
you have to ensure before calling @code{helm-set-attr} that the file
containing source is loaded, e.g. with @code{with-eval-after-load}.  Of
course you can also completely redefine the source but this is
generally not elegant as it duplicate for its most part code
already defined in Helm.

You will find also sources that are not built and even not bound
to any variables because they are rebuilded at each start of a
Helm session.  In this case you can add a defmethod called
@code{helm-setup-user-source} to your config:

@lisp
(cl-defmethod helm-setup-user-source ((source helm-moccur-class))
  (setf (slot-value source ’follow) -1))
@end lisp

@strong{Additional Readings}:

@table @asis
@item Helm FAQ: Why is a customizable  helm source nil 
@uref{https://github.com/emacs-helm/helm/wiki/FAQ#why-is-a-customizable-helm-source-nil}
@item Complex Examples Of Configuration
@uref{https://github.com/thierryvolpiatto/emacs-tv-config/blob/master/init-helm.el#L340}
@end table

@node Modify keybindings in Helm
@section Modify keybindings in Helm

Helm main keymap is @code{helm-map}, all keys bound in this map apply
to all Helm sources.  However, most sources have their own keymap,
with each binding overriding its counterpart in @code{helm-map}, you
can see all bindings in effect in the @ref{Commands}
section (available only if the source has its own keymap and
documentation of course).

@node Matching in Helm
@section Matching in Helm

All that you write in minibuffer is interpreted as a regexp or
multiple regexps if separated by a space.  This is true for most
sources unless the developer of the source has disabled it or
have choosen to use fuzzy matching.  Even if a source has fuzzy
matching enabled, Helm will switch to multi match as soon as it
detects a space in the pattern.  It may also switch to multi match
as well if pattern starts with a @samp{^} beginning of line sign.  In
those cases each pattern separated with space should be a regexp
and not a fuzzy pattern.  When using multi match patterns, each
pattern starting with @samp{!} is interpreted as a negation i.e.
match everything but this.

@menu
* Completion-styles::
@end menu

@node Completion-styles
@subsection Completion-styles

Helm generally fetches its candidates with the @code{:candidates}
function up to @code{helm-candidate-number-limit} and then applies
match functions to these candidates according to @code{helm-pattern}.
But Helm allows matching candidates directly from the @code{:candidates}
function using its own @code{completion-styles}.
Helm provides ’helm completion style but also ’helm-flex
completion style for Emacs<27 that don’t have ’flex completion
style, otherwise (emacs-27) ’flex completion style is used to
provide fuzzy aka flex completion.
By default, like in Emacs vanilla, all completion commands (e.g.,
@code{completion-at-point}) using @code{completion-in-region} or
@code{completing-read} use @code{completion-styles}.
Some Helm native commands like @code{helm-M-x} do use
@code{completion-styles}.  Any Helm sources can use @code{completion-styles}
by using @code{:match-dynamic} slot and building their @code{:candidates}
function with @code{helm-dynamic-completion}.

Example:

@lisp
(helm :sources (helm-build-sync-source "test"
                 :candidates (helm-dynamic-completion
                              ’(foo bar baz foab)
                              ’symbolp)
                 :match-dynamic t)
      :buffer "*helm test*")

@end lisp

By default Helm sets up @code{completion-styles} and always adds ’helm
to it.  However the flex completion styles are not added.  This is
up to the user if she wants to have such completion to enable
this.
As specified above use ’flex for emacs-27 and ’helm-flex for
emacs-26. Anyway, ’helm-flex is not provided in
@code{completion-styles-alist} if ’flex is present.

Finally Helm provides two user variables to control
@code{completion-styles} usage: @code{helm-completion-style} and
@code{helm-completion-syles-alist}.  Both variables are customizable.
The former allows retrieving previous Helm behavior if needed, by
setting it to @code{helm} or @code{helm-fuzzy}, default being @code{emacs} which
allows dynamic completion and usage of @code{completion-styles}.  The
second allows setting @code{helm-completion-style} per mode and also
specifying @code{completion-styles} per mode (see its docstring).  Note
that these two variables take effect only in helm-mode i.e. in
all that uses @code{completion-read} or @code{completion-in-region}, IOW all
helmized commands.  File completion in @code{read-file-name} family
doesn’t obey completion-styles and has its own file completion
implementation. Native Helm commands using @code{completion-styles}
doesn’t obey @code{helm-completion-style} and
@code{helm-completion-syles-alist} (e.g., @code{helm-M-x}).

Also for a better control of styles in native Helm sources (not
helmized by helm-mode) using @code{:match-dynamic},
@code{helm-dynamic-completion} provides a STYLES argument that allows
specifying explicitely styles for this source.

@strong{Note}: Some old completion styles are not working fine with Helm
and are disabled by default in
@code{helm-blacklist-completion-styles}.  They are anyway not useful in
Helm because ’helm style supersedes these styles.

@node Helm mode
@section Helm mode

@code{helm-mode} toggles Helm completion in native Emacs functions, so
when you turn @code{helm-mode} on, commands like @code{switch-to-buffer}
will use Helm completion instead of the usual Emacs completion
buffer.

@menu
* What gets or does not get @samp{helmized} when @code{helm-mode} is enabled?::
* Helm functions vs helmized Emacs functions::
* Completion behavior with Helm and completion-at-point::
@end menu

@node What gets or does not get @samp{helmized} when @code{helm-mode} is enabled?
@subsection What gets or does not get @samp{helmized} when @code{helm-mode} is enabled?

Helm provides generic completion on all Emacs functions using
@code{completing-read}, @code{completion-in-region} and their derivatives,
e.g. @code{read-file-name}.  Helm exposes a user variable to control
which function to use for a specific Emacs command:
@code{helm-completing-read-handlers-alist}.  If the function for a
specific command is nil, it turns off Helm completion.  See the
variable documentation for more infos.

@node Helm functions vs helmized Emacs functions
@subsection Helm functions vs helmized Emacs functions

While there are Helm functions that perform the same completion
as other helmized Emacs functions, e.g. @code{switch-to-buffer} and
@code{helm-buffers-list}, the native Helm functions like
@code{helm-buffers-list} can receive new features that allow marking
candidates, have several actions, etc.  Whereas the helmized Emacs
functions only have Helm completion, Emacs can provide no more
than one action for this function.  This is the intended behavior.

Generally you are better off using the native Helm command than
the helmized Emacs equivalent.

@node Completion behavior with Helm and completion-at-point
@subsection Completion behavior with Helm and completion-at-point

Helm is NOT completing dynamically.  That means that when you are
completing some text at point, completion is done against this
text and subsequent characters you add AFTER this text.  This
allows you to use matching methods provided by Helm, that is multi
matching or fuzzy matching (see @ref{Matching in Helm, , Matching in
Helm}).

Completion is not done dynamically (against @code{helm-pattern})
because backend functions (i.e. @code{competion-at-point-functions})
are not aware of Helm matching methods.

By behaving like this, the benefit is that you can fully use Helm
matching methods but you can’t start a full completion against a
prefix different than the initial text you have at point.  Helm
warns you against this by colorizing the initial input and sends
a user-error message when trying to delete backward text beyond
this limit at first hit on DEL@.  A second hit on DEL within a
short delay (1s) quits Helm and delete-backward char in
current-buffer.

@node Helm help
@section Helm help

@kbd{C-x c h h}: Show all Helm documentations concatenated
in one org file.

From a Helm session, just hit @kbd{C-h m} to have
the documentation for the current source followed by the global
Helm documentation.

While in the help buffer, most of the Emacs regular key bindings
are available; the most important ones are shown in minibuffer.
However, due to implementation restrictions, no regular Emacs
keymap is used (it runs in a loop when reading the help buffer).
Only simple bindings are available and they are defined in
@code{helm-help-hkmap}, which is a simple alist of (key . function).
You can define or redefine bindings in help with
@code{helm-help-define-key} or by adding/removing entries directly in
@code{helm-help-hkmap}.
See @code{helm-help-hkmap} for restrictions on bindings and functions.

The documentation of default bindings are:

@multitable {aaaaaaaaa} {aaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaa}
@headitem Key
@tab Alternative keys
@tab Command
@item C-v
@tab Space next
@tab Scroll up
@item M-v
@tab b prior
@tab Scroll down
@item C-s
@tab 
@tab Isearch forward
@item C-r
@tab 
@tab Isearch backward
@item C-a
@tab 
@tab Beginning of line
@item C-e
@tab 
@tab End of line
@item C-f
@tab right
@tab Forward char
@item C-b
@tab left
@tab Backward char
@item C-n
@tab down
@tab Next line
@item C-p
@tab up
@tab Previous line
@item M-a
@tab 
@tab Backward sentence
@item M-e
@tab 
@tab Forward sentence
@item M-f
@tab 
@tab Forward word
@item M-b
@tab 
@tab Backward word
@item M->
@tab 
@tab End of buffer
@item M-<
@tab 
@tab Beginning of buffer
@item C-<SPACE>
@tab 
@tab Toggle mark
@item C-M-SPACE
@tab 
@tab Mark sexp
@item RET
@tab 
@tab Follow org link
@item C-%
@tab 
@tab Push org mark
@item C-&
@tab 
@tab Goto org mark-ring
@item TAB
@tab 
@tab Org cycle
@item M-<TAB>
@tab 
@tab Toggle visibility
@item M-w
@tab 
@tab Copy region
@item q
@tab 
@tab Quit
@end multitable

@node Customize Helm
@section Customize Helm

Helm provides a lot of user variables for extensive customization.
From any Helm session, type @kbd{C-h c}
to jump to the current source @code{custom} group.  Helm also has a
special group for faces you can access via @kbd{M-x customize-group @key{RET} helm-faces}.

@strong{Note}: Some sources may not have their group set and default to
the @code{helm} group.

@node Display Helm in windows and frames
@section Display Helm in windows and frames

You can display the Helm completion buffer in many different
window configurations, see the custom interface to discover the
different windows configurations available (See @ref{Customize Helm} to jump to custom interface).
When using Emacs in a graphic display (i.e. not in a terminal) you can as
well display your Helm buffers in separated frames globally for
all Helm commands or separately for specific Helm commands.
See @code{helm-display-function} and @code{helm-commands-using-frame}.

There is a variable to allow reusing frame instead of deleting
and creating a new one at each session, see @code{helm-display-buffer-reuse-frame}.
Normally you don’t have to use this, it have been made to workaround
slow frame popup in Emacs-26, to workaround this slowness in Emacs-26 use instead

@lisp
(when (= emacs-major-version 26)
  (setq x-wait-for-event-timeout nil))
@end lisp

@strong{Additional Readings}:

@itemize
@item
@uref{https://github.com/emacs-helm/helm/wiki/frame}
@end itemize

@strong{Warning}:
There is a package called posframe and also one called helm-posframe,
you DO NOT need these packages to display helm buffers in frames.

@node Helm’s basic operations and default key bindings
@section Helm’s basic operations and default key bindings

@multitable {aaaaaaaaaaaa} {aaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Key
@tab Alternative Keys
@tab Command
@item C-p
@tab Up
@tab Previous line
@item C-n
@tab Down
@tab Next line
@item M-v
@tab prior
@tab Previous page
@item C-v
@tab next
@tab Next page
@item Enter@footnote{Behavior may change depending context in some source e.g. @code{helm-find-files}.}
@tab 
@tab Execute first (default) action / Select [1]
@item M-<
@tab 
@tab First line
@item M->
@tab 
@tab Last line
@item C-M-S-v
@tab M-prior, C-M-y
@tab Previous page (other-window)
@item C-M-v
@tab M-next
@tab Next page (other-window)
@item Tab
@tab C-i
@tab Show action list
@item M-o
@tab left
@tab Previous source
@item C-o
@tab right
@tab Next source
@item C-k@footnote{Delete from point to end or all depending on the value of
@code{helm-delete-minibuffer-contents-from-point}.}
@tab 
@tab Delete pattern (with prefix arg delete from point to end or all [2])
@item C-j
@tab 
@tab Persistent action (Execute and keep Helm session)
@end multitable

@strong{Note}: Any of these bindings are from @code{helm-map} and may be
overriten by the map specific to the current source in use (each
source can have its own keymap).

@node The actions menu
@section The actions menu

You can display the action menu in the same window
as helm candidates (default) or in a side window according to
@code{helm-show-action-window-other-window} value.

When the action menu popup, the helm prompt is used to narrow
down this menu, no more candidates.

When @code{helm-allow-mouse} is non nil, you can use as well
mouse-3 (right click) in the candidate zone to select actions
with the mouse once your candidate is selected.

@node Action transformers
@section Action transformers

You may be surprized to see your actions list changing depending
on the context.  This happen when a source has an action
transformer function which checks the current selected candidate
and adds specific actions for this candidate.

@node Shortcuts for n-th first actions
@section Shortcuts for n-th first actions

@kbd{<f1>}@dots{}@kbd{<f12>}: Execute n-th action where n is 1 to 12.

@node Shortcuts for executing the default action on the n-th candidate
@section Shortcuts for executing the default action on the n-th candidate

Helm does not display line numbers by default, with Emacs-26+ you
can enable it permanently in all helm buffers with:

@lisp
(add-hook ’helm-after-initialize-hook ’helm-init-relative-display-line-numbers)
@end lisp

You can also toggle line numbers with
@kbd{C-c l} in current Helm
buffer.

Of course when enabling @code{global-display-line-numbers-mode} Helm
buffers will have line numbers as well. (Don’t forget to
customize @code{display-line-numbers-type} to relative).

In Emacs versions < to 26 you will have to use linum-relative@footnote{@uref{https://github.com/coldnew/linum-relative}}
package and @code{helm-linum-relative-mode}.

Then when line numbers are enabled with one of the methods above
the following keys are available@footnote{Note that the key bindings are always available even if line
numbers are not displayed.  They are just useless in this case.}:

@kbd{C-x <n>}: Execute default action on the n-th candidate before
currently selected candidate.

@kbd{C-c <n>}: Execute default action on the n-th candidate after
current selected candidate.

@samp{n} is limited to 1-9.  For larger jumps use other navigation
keys.

@node Mouse control in Helm
@section Mouse control in Helm

A basic support for the mouse is provided when the user sets
@code{helm-allow-mouse} to non-nil.

@itemize
@item
mouse-1 selects the candidate.
@item
mouse-2 executes the default action on selected candidate.
@item
mouse-3 pops up the action menu.
@end itemize

@strong{Note}: When mouse control is enabled in Helm, it also lets you
click around and lose the minibuffer focus: you’ll have to click
on the Helm buffer or the minibuffer to retrieve control of your
Helm session.

@node Marked candidates
@section Marked candidates

You can mark candidates to execute an action on all of them
instead of the current selected candidate only.  (See bindings
below.) Most Helm actions operate on marked candidates unless
candidate-marking is explicitely forbidden for a specific source.

@itemize
@item
To mark/unmark a candidate, use
@kbd{C-@@}.  (See bindings below.) With a
numeric prefix arg mark ARG candidates forward, if ARG is
negative mark ARG candidates backward.

@item
To mark all visible unmarked candidates at once in current
source use @kbd{M-a}.  With a prefix argument, mark all
candidates in all sources.

@item
To unmark all visible marked candidates at once use
@kbd{M-U}.

@item
To mark/unmark all candidates at once use
@kbd{M-m}.  With a prefix argument, mark/unmark
all candidates in all sources.
@end itemize

@strong{Note}: When multiple candidates are selected across different
sources, only the candidates of the current source will be used
when executing most actions (as different sources can have
different actions).  Some actions support multi-source marking
however.

@node Follow candidates
@section Follow candidates

When @code{helm-follow-mode} is on (@kbd{C-c C-f}
to toggle it), moving up and down Helm session or updating the
list of candidates will automatically execute the
persistent-action as specified for the current source.

If @code{helm-follow-mode-persistent} is non-nil, the state of the
mode will be restored for the following Helm sessions.

If you just want to follow candidates occasionally without
enabling @code{helm-follow-mode}, you can use
@kbd{C-<down>} or
@kbd{C-<up>} instead.  Conversely, when
@code{helm-follow-mode} is enabled, those commands go to previous/next
line without executing the persistent action.

@node Frequently Used Commands
@section Frequently Used Commands

@multitable {aaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Keys
@tab Description
@item C-t
@tab Toggle vertical/horizontal split on first hit and swap Helm window on second hit.
@item C-c %
@tab Exchange minibuffer and header-line.
@item C-x C-f
@tab Drop into ‘helm-find-files’.
@item C-c C-k
@tab Kill display value of candidate and quit (with prefix arg, kill the real value).
@item C-c C-y
@tab Yank current selection into pattern.
@item C-c TAB
@tab Copy selected candidate at point in current buffer.
@item C-c C-f
@tab Toggle automatic execution of persistent action.
@item C-<down>
@tab Run persistent action then select next line.
@item C-<up>
@tab Run persistent action then select previous line.
@item C-c C-u
@tab Recalculate and redisplay candidates.
@item C-!
@tab Toggle candidate updates.
@end multitable

@node Special yes no or yes for all answers
@section Special yes, no or yes for all answers

You may be prompted in the minibuffer to answer by [y,n,!,q] in
some places for confirmation.

@itemize
@item
y  mean yes
@item
no mean no
@item
!  mean yes for all
@item
q  mean quit or abort current operation.
@end itemize

When using ! you will not be prompted for the same thing in
current operation any more, e.g. file deletion, file copy etc@dots{}

@node Moving in @code{helm-buffer}
@section Moving in @code{helm-buffer}

You can move in @code{helm-buffer} with the usual commands used in
Emacs: (@kbd{C-n},
@kbd{C-p}, etc.  See above basic
commands.  When @code{helm-buffer} contains more than one source,
change source with @kbd{C-o} and
@kbd{M-o}.

@strong{Note}: When reaching the end of a source,
@kbd{C-n} will @strong{not} go to the next source
when variable @code{helm-move-to-line-cycle-in-source} is non-nil, so
you will have to use @kbd{C-o} and
@kbd{M-o}.

@node Resume previous session from current Helm session
@section Resume previous session from current Helm session

You can use @kbd{C-c n} (@code{helm-run-cycle-resume}) to cycle in
resumables sources.  @kbd{C-c n} is a special key set with
@code{helm-define-key-with-subkeys} which, after pressing it, allows
you to keep cycling with further @kbd{n}.

@strong{Tip}: You can bound the same key in @code{global-map} to
     @code{helm-cycle-resume} with @code{helm-define-key-with-subkeys} to
     let you transparently cycle sessions, Helm fired up or not.
     You can also bind the cycling commands to single key
     presses (e.g., @kbd{S-<f1>}) this time with a simple
     @code{define-key}.  (Note that @kbd{S-<f1>} is not available in
     terminals.)

@strong{Note}: @code{helm-define-key-with-subkeys} is available only once Helm
is loaded.

You can also use
@kbd{C-x b} to resume
the previous session, or
@kbd{C-x C-b} to have
completion on all resumable buffers.

@node Global commands
@section Global commands

@menu
* Resume Helm session from outside Helm::
@end menu

@node Resume Helm session from outside Helm
@subsection Resume Helm session from outside Helm

@kbd{C-x c b} revives the last Helm session.
Binding a key to this command will greatly improve Helm
interactivity, e.g. when quitting Helm accidentally.

You can call @kbd{C-x c b} with a prefix argument
to choose (with completion!) which session you’d like to resume.
You can also cycle in these sources with @code{helm-cycle-resume} (see
above).

@node Debugging Helm
@section Debugging Helm

Helm exposes the special variable @code{helm-debug}: setting it to
non-nil will enable Helm logging in a special outline-mode
buffer.  Helm resets the variable to nil at the end of each
session.

For convenience, @kbd{C-h C-d}
allows you to turn on debugging for this session only.  To avoid
accumulating log entries while you are typing patterns, you can
use @kbd{C-!} to turn off
updating.  When you are ready turn it on again to resume logging.

Once you exit your Helm session you can access the debug buffer
with @code{helm-debug-open-last-log}.  It is possible to save logs to
dated files when @code{helm-debug-root-directory} is set to a valid
directory.

@strong{Note}: Be aware that Helm log buffers grow really fast, so use
@code{helm-debug} only when needed.

@node Writing your own Helm sources
@section Writing your own Helm sources

Writing simple sources for your own usage is easy.  When calling
the @code{helm} function, the sources are added the @code{:sources} slot
which can be a symbol or a list of sources.  Sources can be built
with different EIEIO classes depending on what you want to do.  To
simplify this, several @code{helm-build-*} macros are provided.  Below
there are simple examples to start with.

@lisp
;; Candidates are stored in a list.
(helm :sources (helm-build-sync-source "test"
                 ;; A function can be used as well
                 ;; to provide candidates.
                 :candidates ’("foo" "bar" "baz"))
      :buffer "*helm test*")

;; Candidates are stored in a buffer.
;; Generally faster but doesn’t allow a dynamic updating
;; of the candidates list i.e the list is fixed on start.
(helm :sources (helm-build-in-buffer-source "test"
                 :data ’("foo" "bar" "baz"))
      :buffer "*helm test*")
@end lisp

@strong{Additional Readings}:

@table @asis
@item For source code and complex examples
@uref{https://github.com/emacs-helm/helm/wiki/Developing}
@end table

@node Helm Map
@section Helm Map

@multitable {aaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem @strong{Key}
@tab @strong{Binding}
@tab @strong{Comments}
@item C-@@
@tab helm-toggle-visible-mark
@tab 
@item C-c
@tab Prefix Command
@tab 
@item C-g
@tab helm-keyboard-quit
@tab 
@item C-h
@tab Prefix Command
@tab 
@item TAB
@tab helm-select-action
@tab 
@item C-j
@tab helm-execute-persistent-action
@tab 
@item C-k
@tab helm-delete-minibuffer-contents
@tab 
@item C-l
@tab helm-recenter-top-bottom-other-window
@tab 
@item RET
@tab helm-maybe-exit-minibuffer
@tab 
@item C-n
@tab helm-next-line
@tab 
@item C-o
@tab helm-next-source
@tab 
@item C-p
@tab helm-previous-line
@tab 
@item C-t
@tab helm-toggle-resplit-and-swap-windows
@tab 
@item C-v
@tab helm-next-page
@tab 
@item C-w
@tab ??
@tab 
@item C-x
@tab Prefix Command
@tab 
@item ESC
@tab Prefix Command
@tab 
@item C-SPC
@tab helm-toggle-visible-mark-forward
@tab 
@item C-!
@tab helm-toggle-suspend-update
@tab 
@item C-@{
@tab helm-enlarge-window
@tab 
@item C-@}
@tab helm-narrow-window
@tab 
@item C-M-<down>
@tab helm-scroll-other-window
@tab 
@item C-M-<up>
@tab helm-scroll-other-window-down
@tab 
@item C-<down>
@tab helm-follow-action-forward
@tab 
@item C-<up>
@tab helm-follow-action-backward
@tab 
@item M-<next>
@tab helm-scroll-other-window
@tab 
@item M-<prior>
@tab helm-scroll-other-window-down
@tab 
@item <XF86Back>
@tab previous-history-element
@tab 
@item <XF86Forward>
@tab next-history-element
@tab 
@item <down>
@tab helm-next-line
@tab 
@item <f1>
@tab ??
@tab 
@item <f2>
@tab ??
@tab 
@item <f3>
@tab ??
@tab 
@item <f4>
@tab ??
@tab 
@item <f5>
@tab ??
@tab 
@item <f6>
@tab ??
@tab 
@item <f7>
@tab ??
@tab 
@item <f8>
@tab ??
@tab 
@item <f9>
@tab ??
@tab 
@item <f10>
@tab ??
@tab 
@item <f11>
@tab ??
@tab 
@item <f12>
@tab ??
@tab 
@item <f13>
@tab ??
@tab 
@item <help>
@tab Prefix Command
@tab 
@item <left>
@tab helm-previous-source
@tab 
@item <next>
@tab helm-next-page
@tab 
@item <prior>
@tab helm-previous-page
@tab 
@item <right>
@tab helm-next-source
@tab 
@item <tab>
@tab helm-execute-persistent-action
@tab 
@item <up>
@tab helm-previous-line
@tab 
@item 
@tab 
@tab 
@item <help> m
@tab helm-help
@tab 
@item 
@tab 
@tab 
@item C-h C-d
@tab helm-enable-or-switch-to-debug
@tab 
@item C-h c
@tab helm-customize-group
@tab 
@item C-h m
@tab helm-help
@tab 
@item 
@tab 
@tab 
@item C-c C-f
@tab helm-follow-mode
@tab 
@item C-c TAB
@tab helm-copy-to-buffer
@tab 
@item C-c C-k
@tab helm-kill-selection-and-quit
@tab 
@item C-c C-u
@tab helm-refresh
@tab 
@item C-c C-y
@tab helm-yank-selection
@tab 
@item C-c %
@tab helm-exchange-minibuffer-and-header-line
@tab 
@item C-c -
@tab helm-swap-windows
@tab 
@item C-c 1
@tab helm-execute-selection-action-at-nth-+1
@tab 
@item C-c 2
@tab helm-execute-selection-action-at-nth-+2
@tab 
@item C-c 3
@tab helm-execute-selection-action-at-nth-+3
@tab 
@item C-c 4
@tab helm-execute-selection-action-at-nth-+4
@tab 
@item C-c 5
@tab helm-execute-selection-action-at-nth-+5
@tab 
@item C-c 6
@tab helm-execute-selection-action-at-nth-+6
@tab 
@item C-c 7
@tab helm-execute-selection-action-at-nth-+7
@tab 
@item C-c 8
@tab helm-execute-selection-action-at-nth-+8
@tab 
@item C-c 9
@tab helm-execute-selection-action-at-nth-+9
@tab 
@item C-c >
@tab helm-toggle-truncate-line
@tab 
@item C-c ?
@tab helm-help
@tab 
@item C-c _
@tab helm-toggle-full-frame
@tab 
@item C-c l
@tab helm-display-line-numbers-mode
@tab 
@item C-c n
@tab ??
@tab 
@item 
@tab 
@tab 
@item C-x C-b
@tab helm-resume-list-buffers-after-quit
@tab 
@item C-x C-f
@tab helm-quit-and-find-file
@tab 
@item C-x 1
@tab helm-execute-selection-action-at-nth-+1
@tab 
@item C-x 2
@tab helm-execute-selection-action-at-nth-+2
@tab 
@item C-x 3
@tab helm-execute-selection-action-at-nth-+3
@tab 
@item C-x 4
@tab helm-execute-selection-action-at-nth-+4
@tab 
@item C-x 5
@tab helm-execute-selection-action-at-nth-+5
@tab 
@item C-x 6
@tab helm-execute-selection-action-at-nth-+6
@tab 
@item C-x 7
@tab helm-execute-selection-action-at-nth-+7
@tab 
@item C-x 8
@tab helm-execute-selection-action-at-nth-+8
@tab 
@item C-x 9
@tab helm-execute-selection-action-at-nth-+9
@tab 
@item C-x b
@tab helm-resume-previous-session-after-quit
@tab 
@item 
@tab 
@tab 
@item C-M-a
@tab helm-show-all-candidates-in-source
@tab 
@item C-M-e
@tab helm-display-all-sources
@tab 
@item C-M-l
@tab helm-reposition-window-other-window
@tab 
@item C-M-v
@tab helm-scroll-other-window
@tab 
@item C-M-y
@tab helm-scroll-other-window-down
@tab 
@item M-SPC
@tab helm-toggle-visible-mark-backward
@tab 
@item M-(
@tab helm-prev-visible-mark
@tab 
@item M-)
@tab helm-next-visible-mark
@tab 
@item M-<
@tab helm-beginning-of-buffer
@tab 
@item M->
@tab helm-end-of-buffer
@tab 
@item M-U
@tab helm-unmark-all
@tab 
@item M-a
@tab helm-mark-all
@tab 
@item M-g
@tab Prefix Command
@tab 
@item M-m
@tab helm-toggle-all-marks
@tab 
@item M-n
@tab next-history-element
@tab 
@item M-o
@tab helm-previous-source
@tab 
@item M-p
@tab previous-history-element
@tab 
@item M-v
@tab helm-previous-page
@tab 
@item C-M-S-v
@tab helm-scroll-other-window-down
@tab 
@item 
@tab 
@tab 
@item M-g ESC
@tab Prefix Command
@tab 
@item 
@tab 
@tab 
@item M-<
@tab minibuffer-beginning-of-buffer
@tab (this binding is currently shadowed)
@item M-g
@tab Prefix Command
@tab 
@item M-r
@tab previous-matching-history-element
@tab 
@item M-s
@tab next-matching-history-element
@tab (this binding is currently shadowed)
@item 
@tab 
@tab 
@item M-g ESC
@tab Prefix Command
@tab 
@item 
@tab 
@tab 
@item M-g M-c
@tab helm-comint-input-ring
@tab 
@item 
@tab 
@tab 
@item M-g M-h
@tab helm-minibuffer-history
@tab 
@end multitable

@node Helm Buffer
@chapter Helm Buffer

@menu
* Pattern matching in helm-buffers::
* Tips::
* Commands::
@end menu

@node Pattern matching in helm-buffers
@section Pattern matching in helm-buffers

You can filter the buffer list based on one or more of the following
components:

@enumerate
@item
buffer's @code{mode-name}
@item
its content
@item
its directory
@item
its name
@end enumerate

A buffer match pattern is a space-separated list of one or more
directives.  Each directive looks like

@example
<pattern-type><negate-may-be><pattern-value>
@end example


@samp{<pattern-type>} determines how the @samp{<pattern-value>} is
interpreted. @samp{<pattern-type>} can be one of the following:

@table @asis
@item @samp{*}
Partially match @samp{<pattern-value>} against buffer's @code{mode-name}
@item @samp{@@}
Partially match @samp{<pattern-value>} against buffer's contents
@item @samp{/}
Partially match @samp{<pattern-value>} against buffer's directory
@item @samp{^}
Fuzz-matching.  The description of what the pattern does is
not clear.
@item @samp{@U{200b}}
an empty string.  Compare @samp{<pattern-value>}
against buffer's name.
@end table

@samp{<negate-may-be>} determines the truth value of the match.  It can be
one of the following:

@table @asis
@item @samp{@U{200b}}
an empty string.  @samp{<pattern-value>} must
partially match the corresponding attribute

@item @samp{!}
Negate the sense of above match.
@end table

@anchor{Examples}
@subheading Examples

Down below you see some common patterns, and how they are interpreted:

@itemize
@item
Match against buffer's @code{mode-name}

@table @asis
@item @samp{*lisp}
List only buffers whose @code{mode-name} name matches @samp{lisp}.

@item @samp{*!lisp}
List only buffers whose @code{mode-name} name does @emph{not} match
@samp{lisp}.

@item @samp{*!lisp,!sh,!fun}
List only buffers whose mode name does @emph{not}
match any of @samp{lisp}, @samp{sh} or @samp{fun}.
@end table

@item
Match against buffer's content

@table @asis
@item @samp{@@foo}
List only those  buffers that contain @samp{foo}

@item @samp{@@!foo}
List only those buffers that do @emph{not} contain @samp{foo}.

@item @samp{@@foo @@bar}
List only those buffers that contain both @samp{foo} @emph{and}
@samp{bar}.

@item @samp{@@foo @@!bar}
List only those buffers that contain @samp{foo} but @emph{not}
@samp{bar}.
@end table

@item
Match against buffer's directory

@table @asis
@item @samp{/src} 
List only buffers whose directory matches @samp{src}.
@end table

@item
Match against buffer's name in a fuzzy way

@item
Match against a combination of above criterion.

@table @asis
@item @samp{*lisp ^helm @@moc}
List only buffers that are in @samp{lisp} mode, whose
name starts start with @samp{helm} and contains @samp{moc}.

@item @samp{*lisp ^helm moc}
List only buffers that are in @samp{lisp} mode, whose
name starts start with @samp{helm} and whose name contains @samp{moc}

@item @samp{*!lisp !helm}
List only buffers that are NOT in @samp{lisp} mode and
whose name does NOT match @samp{helm}.

@item @samp{/helm/ w3}
List only buffers whose directory matches @samp{helm} and
whose name matches @samp{w3}.
@end table
@end itemize

@node Tips
@section Tips

@anchor{Creating buffers}
@subheading Creating buffers

When creating a new buffer, use @kbd{C-u} to choose a mode from a
list.  This list is customizable, see @code{helm-buffers-favorite-modes}.

@anchor{Killing buffers}
@subheading Killing buffers

You can kill buffers either one by one or all the marked buffers at once.

One kill-buffer command leaves Helm while the other is persistent.  Run the
persistent kill-buffer command either with the regular
@code{helm-execute-persistent-action} called with a prefix argument (@kbd{C-u C-j})
or with its specific command @code{helm-buffer-run-kill-persistent}.  See the
bindings below.

@anchor{Switching to buffers}
@subheading Switching to buffers

To switch to a buffer, press RET, to switch to a buffer in another window, select this buffer
and press @kbd{C-c o}, when called with a prefix arg
the buffer will be displayed vertically in other window.
If you mark more than one buffer, the marked buffers will be displayed in different windows.

@anchor{Saving buffers}
@subheading Saving buffers

If buffer is associated to a file and is modified, it is by default colorized in orange,
see @ref{Meaning of colors and prefixes for buffers}.
You can save these buffers with @kbd{C-x C-s}.
If you want to save all these buffers, you can mark them with @kbd{C-M-@key{SPC}}
and save them with @kbd{C-x C-s}.  You can also do this in one step with
@kbd{C-x s}.  Note that you will not be asked for confirmation.

@anchor{Meaning of colors and prefixes for buffers}
@subheading Meaning of colors and prefixes for buffers

Remote buffers are prefixed with ’@@’.

@table @asis
@item Red        
Buffer’s file was modified on disk by an external process.
@item Indianred2 
Buffer exists but its file has been deleted.
@item Orange     
Buffer is modified and not saved to disk.
@item Italic     
A non-file buffer.
@item Yellow     
Tramp archive buffer.
@end table

@node Commands
@section Commands

@multitable {aaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Keys
@tab Description
@item M-g s
@tab Grep Buffer(s) works as zgrep too (‘C-u’ to grep all buffers but non-file buffers).
@item C-s
@tab Multi-Occur buffer or marked buffers (‘C-u’ to toggle force-searching current-buffer).
@item C-c o
@tab Switch to other window.
@item C-c C-o
@tab Switch to other frame.
@item C-x C-d
@tab Browse project from buffer.
@item C-M-%
@tab Query-replace-regexp in marked buffers.
@item M-%
@tab Query-replace in marked buffers.
@item C-c =
@tab Ediff current buffer with candidate.  With two marked buffers, ediff those buffers.
@item M-=
@tab Ediff-merge current buffer with candidate.  With two marked buffers, ediff-merge those buffers.
@item C-=
@tab Toggle Diff-buffer with saved file without leaving Helm.
@item M-G
@tab Revert buffer without leaving Helm.
@item C-x C-s
@tab Save buffer without leaving Helm.
@item C-x s
@tab Save all unsaved buffers.
@item M-D
@tab Delete marked buffers and leave Helm.
@item C-c d
@tab Delete buffer without leaving Helm.
@item M-R
@tab Rename buffer.
@item M-m
@tab Toggle all marks.
@item M-a
@tab Mark all.
@item C-]
@tab Toggle details.
@item C-c a
@tab Show hidden buffers.
@item C-M-SPC
@tab Mark all buffers of the same type (color) as current buffer.
@end multitable

@node Helm Find Files
@chapter Helm Find Files

@menu
* Overview::
* Operate on files::
* Working on Remote files with TRAMP::
* Misc. Remarks: Misc Remarks. 
* Commands: Commands (1). 
@end menu

@node Overview
@section Overview

@anchor{Quick pattern expansion}
@subheading Quick pattern expansion

@itemize
@item
Enter @samp{~/} at end of pattern to quickly reach home directory

@item
Enter @samp{/} at end of pattern to quickly reach the file system root

@item
Enter @samp{./} at end of pattern to quickly reach @code{default-directory}

The value of @code{default-directory} is the one at the beginning of the
session.  If you already are in the @code{default-directory} this will
move the cursor to the top.

@item
Enter @samp{../} at end of pattern will reach upper directory, moving cursor to the top

This is different from using @kbd{C-l} in that it moves
the cursor to the top instead of remaining on the previous subdir name.

@item
Enter @samp{..name/} at end of pattern to start a recursive search

It searches directories matching @samp{name} under the current directory, see the
``Recursive completion on subdirectories'' section below for more details.

@item
Any environment variable (e.g. @samp{$HOME}) at end of pattern gets expanded

@item
Any valid filename yanked after pattern gets expanded

@item
Special case: URL at point

The quick expansions do not take effect at the end of a URL, you
must kill the pattern first (@kbd{C-k}).
@end itemize

Creating  a file or directory:

@itemize
@item
To create a new file, enter a filename not ending with @samp{/}

Note that when you enter a new name, this one is prefixed with [?]
if you are in a writable directory.  If you are in a directory where
you have no write permission the new file name is not prefixed and
is colored in red.  There is not such distinction when using Tramp,
new filename just appears on top of buffer.

@item
To create a new directory, append a @samp{/} to the new name and press
@kbd{@key{RET}}

@item
You can create a new directory and a new file at the same time

Simply write the path in the prompt and press @kbd{@key{RET}}, e.g.
@samp{~/new/newnew/newnewnew/my_newfile.txt}.
@end itemize

@anchor{Helm-find-files supports fuzzy matching}
@subheading Helm-find-files supports fuzzy matching

Helm-find-files supports fuzzy matching. Narrowing by fuzzy matching
kicks in only when there are atleast 3 characters in the pattern.
What this means is this: If you have typed a pattern and do @emph{not} see
any filtering happening when you expect it to happen, do @emph{not} jump
the gun and conclude that fuzzy matching is broken.  It is possible
that your pattern is shorter than 3 characters, and you may have to
type more characters to see the filter at work.

@anchor{Toggle auto-completion}
@subheading Toggle auto-completion

It is useful when trying to create a new file or directory and you don’t want
Helm to complete what you are writing.

@strong{Note}: On a terminal, the default binding @kbd{C-<backspace>} may not work.
In this case use @kbd{C-c <backspace>}.

@anchor{Use the wildcard to select multiple files}
@subheading Use the wildcard to select multiple files

Use of wildcard is supported to run an action over a set of files.

Example: You can copy all the files with @samp{.el} extension by using @samp{*.el} and
then run copy action.

Similarly, @samp{**.el} (note the two stars) will recursively select all @samp{.el}
files under the current directory.

The @samp{**} feature is active by default in the option @code{helm-file-globstar}.  It
is different from the Bash @samp{shopt globstar} feature in that to list files with
a named extension recursively you would write @samp{**.el} whereas in Bash it would
be @samp{**/*.el}.  Directory selection with @samp{**/} like Bash @samp{shopt globstar}
option is not supported yet.

Helm supports different styles of wildcards:

@itemize
@item
‘sh’ style, the ones supported by ‘file-expand-wildcards’.
e.g. @samp{*.el}, @samp{*.[ch]} which match respectively all @samp{.el}
files or all @samp{.c} and @samp{.h} files.

@item
‘bash’ style (partially) In addition to what allowed in ‘sh’
style you can specify file extensions that have more than one
character like this: @samp{*.@{sh,py@}} which match @samp{.sh} and
@samp{.py} files.
@end itemize

Of course in both styles you can specify one or two @samp{*}.

@anchor{Navigation summary}
@subheading Navigation summary

For a better experience you can enable auto completion by setting
@code{helm-ff-auto-update-initial-value} to non-nil in your init file.  It is not
enabled by default to not confuse new users.

@itemize
@item
Navigate with arrow keys

You can use <right> and <left> arrows to go down or up one level, to disable
this customize @code{helm-ff-lynx-style-map}.
Note that using @code{setq} will NOT work.

@item
Use @kbd{C-j} (persistent action) on a directory to go down one level

On a symlinked directory a prefix argument expands to its true name.

@item
Use @kbd{C-l} or @kbd{DEL} on a directory to go up one level

@kbd{DEL} behavior

@kbd{DEL} by default deletes char backward.

But when @code{helm-ff-DEL-up-one-level-maybe} is non nil @kbd{DEL} behaves
differently depending on the contents of helm-pattern.  It goes up one
level if the pattern is a directory ending with @samp{/} or disables HFF
auto update and delete char backward if the pattern is a filename or
refers to a non existing path.  Going up one level can be disabled
if necessary by deleting @samp{/} at the end of the pattern using
@kbd{C-b} and @kbd{C-k}.

Note that when deleting char backward, Helm takes care of
disabling update giving you the opportunity to edit your pattern for
e.g. renaming a file or creating a new file or directory.
When @code{helm-ff-auto-update-initial-value} is non nil you may want to
disable it temporarily, see @ref{Toggle auto-completion} for this.

@item
Use @kbd{C-r} to walk back the resulting tree of all the @kbd{C-l} or DEL you did

The tree is reinitialized each time you browse a new tree with
@kbd{C-j} or by entering some pattern in the prompt.

@item
@kbd{@key{RET}} behavior

It behaves differently depending on @code{helm-selection} (current candidate in helm-buffer):

@table @asis
@item candidate basename is @samp{.}
Open it in dired.
@item candidate is a directory   
Expand it.
@item candidate is a file        
Open it.
@end table

If you have marked candidates and you press RET on a directory,
Helm will navigate to this directory.  If you want to exit with
RET with default action with these marked candidates, press RET a
second time while you are on the root of this directory e.g.
@samp{/home/you/dir/.} or press RET on any file which is not a
directory.  You can also exit with default action at any moment
with @kbd{f1}.

Note that when copying, renaming, etc. from @code{helm-find-files} the
destination file is selected with @code{helm-read-file-name}.

@item
@kbd{@key{TAB}} behavior

Normally @kbd{@key{TAB}} is bound to @code{helm-select-action} in helm-map which
display the action menu.

You can change this behavior by setting in @code{helm-find-files-map}
a new command for @kbd{@key{TAB}}:

@lisp
(define-key helm-find-files-map (kbd "C-i") ’helm-ff-TAB)
@end lisp

It will then behave slighly differently depending of
@code{helm-selection}:

@table @asis
@item candidate basename is @samp{.} 
open the action menu.
@item candidate is a directory    
expand it (behave as C-j).
@item candidate is a file         
open action menu.
@end table

Called with a prefix arg open menu unconditionally.

@item
@kbd{C-j} behaviour

@kbd{C-j} on a filename expands to that filename in the Helm
buffer. Second hit displays the buffer filename. Third hit kills the
buffer filename.

@kbd{C-u C-j} displays the buffer directly.

If you have mounted your filesystem with mountavfs, you can expand
archives in the @samp{~/.avfs} directory with @kbd{C-j}. Expand
archives as directories in a avfs directory
@end itemize

@anchor{Filter out files or directories}
@subheading Filter out files or directories

You can show files or directories only with respectively
@kbd{S-<f4>} and @kbd{S-<f5>}.
These are toggle commands i.e. filter/show_all.
Changing directory disable filtering.

@anchor{Sort directory contents}
@subheading Sort directory contents

When listing a directory without narrowing its contents, i.e. when pattern ends with @samp{/},
you can sort alphabetically, by newest or by size by using respectively
@kbd{S-<f1>}, @kbd{S-<f2>} or @kbd{S-<f3>}.

@strong{Note}:
When starting back narrowing i.e. entering something in minibuffer after @samp{/} sorting is done
again with fuzzy sorting and no more with sorting methods previously selected.

@node Operate on files
@section Operate on files

@menu
* Create a file or a directory::
* Open files in separate windows::
* Open files::
* Browse images directories with @code{helm-follow-mode} and navigate up/down::
* Copy or Rename files::
* Touch files::
* Delete files::
* Checksum file::
* Grep files::
* Execute Eshell commands on files::
* Attach files to a mail buffer (message-mode)::
@end menu

@node Create a file or a directory
@subsection Create a file or a directory

@node Open files in separate windows
@subsection Open files in separate windows

When marking multiple files (@ref{Marked candidates}) or using wildcard
(@ref{Use the wildcard to select multiple files}), helm allow opening all
this files in separate windows using an horizontal layout or a
vertical layout if you used a prefix arg, when no more windows can be
displayed in frame, next files are opened in background without being
displayed.  When using @kbd{C-c o} the current
buffer is kept and files are displayed next to it with same behavior as above.
When using two prefix args, files are opened in background without beeing displayed.

@node Open files
@subsection Open files

@enumerate
@item
@anchor{Open files externally}Open files externally


@itemize
@item
Open file with external program (@kbd{C-c C-x},@kbd{C-u} to choose).

Helm is looking what is used by default to open file
externally (mailcap files) but have its own variable
@code{helm-external-programs-associations} to store external
applications.  If you call the action or its binding without
prefix arg Helm will see if there is an application suitable in
@code{helm-external-programs-associations}, otherwise it will look in
mailcap files.  If you want to specify which external application
to use (and its options) use a prefix arg.

Note: What you configure for Helm in @code{helm-external-programs-associations}
will take precedence on mailcap files.

@item
Preview file with external program (@kbd{C-c C-v}).

Same as above but doesn’t quit Helm session, it is apersistent action.

@item
Open file externally with default tool (@kbd{C-c X}).

This uses xdg-open which sucks most of the time, but perhaps it
works fine on Windows.  This is why it is kept in Helm.
@end itemize
@end enumerate

@node Browse images directories with @code{helm-follow-mode} and navigate up/down
@subsection Browse images directories with @code{helm-follow-mode} and navigate up/down

Before Emacs-27 Helm was using image-dired that works with
external ImageMagick tools.  From Emacs-27 Helm use native
display of images with image-mode by default for Emacs-27 (see @code{helm-ff-display-image-native}),
this allows automatic resize when changing window size, zooming with @kbd{M-+} and @kbd{M--}
and rotate images as before.

You can also use @code{helm-follow-action-forward} and @code{helm-follow-action-backward} with
@kbd{C-<down>} and @kbd{C-<up>} respectively.
Note that these commands have different behavior when @code{helm-follow-mode}
is enabled (go to next/previous line only).

Use @kbd{C-u C-j} to display an image or kill its buffer.

@strong{Tip}: Use @kbd{C-t} and @kbd{C-@{} to display Helm window vertically
and to enlarge it while viewing images.
Note this may not work with exotic Helm windows settings such as the ones in Spacemacs.

@node Copy or Rename files
@subsection Copy or Rename files

Note that when recursively copying files, you may have files with same name
dispatched across different subdirectories, so when copying them in the same
directory they will get overwritten.  To avoid this Helm has a special action
called @samp{backup files} that has the same behavior as the command line ``cp -f
--backup=numbered'': it allows you to copy many files with the same name from
different subdirectories into one directory.  Files with same name are renamed
as follows: @samp{foo.txt.~1~}.  Like with the --force option of cp, it is possible
to backup files in current directory.

This command is available only when @code{dired-async-mode} is active.

See @ref{Use the wildcard to select multiple files}

@enumerate
@item
@anchor{Query replace regexp on filenames}Query replace regexp on filenames


Replace different parts of a file basename with something else.

When calling this action you will be prompted twice as with
@code{query-replace}, first for the matching expression of the text to
replace and second for the replacement text.  Several facilities,
however, are provided to make the two prompts more powerfull.

@enumerate
@item
@anchor{Syntax of the first prompt}Syntax of the first prompt


In addition to simple regexps, these shortcuts are available:

@table @asis
@item Basename without extension
@samp{%.}
@item Only extension            
@samp{.%}
@item Substring                 
@samp{%:<from>:<to>}
@item Whole basename            
@samp{%}
@end table

@item
@anchor{Syntax of the second prompt}Syntax of the second prompt


In addition to a simple string to use as replacement, here is what you can use:

@itemize
@item
A placeholder refering to what you have selected in the first prompt: @samp{\@@}.

After this placeholder you can use a search-and-replace syntax à-la sed:

@example
"\@@/<regexp>/<replacement>/
@end example


You can select a substring from the string represented by the placeholder:

@example
=\@@:<from>:<to>=
@end example

@item
A special character representing a number which is incremented: @samp{\#}.

@item
Shortcuts for @code{upcase}, @code{downcase} and @code{capitalize}
are available as=%u=, @samp{%d} and @samp{%c} respectively.
@end itemize

@item
@anchor{Examples (1)}Examples


@enumerate
@item
@anchor{Recursively rename all files with @samp{JPG} extension to @samp{jpg}}Recursively rename all files with @samp{.JPG} extension to @samp{.jpg}


Use the @code{helm-file-globstar} feature described in @ref{Use the wildcard to select multiple files, , recursive globbing}
by entering @samp{**.JPG} at the end of the Helm-find-files pattern, then hit
@kbd{M-@@} and enter @samp{JPG} on first prompt, then @samp{jpg} on second prompt and hit @kbd{@key{RET}}.

Alternatively you can enter @samp{.%} at the first prompt, then @samp{jpg} and hit
@kbd{@key{RET}}.  Note that when using this instead of using @samp{JPG} at the first prompt,
all extensions will be renamed to @samp{jpg} even if the extension of one of the
files is, say, @samp{png}.  If you want to keep the original extension you can use
@samp{%d} at the second prompt (downcase).

@item
@anchor{Batch-rename files from number 001 to 00x}Batch-rename files from number 001 to 00x


Use @samp{\#} inside the second prompt.

Example 1: To rename the files

@example
foo.jpg
bar.jpg
baz.jpg
@end example

to

@example
foo-001.jpg
foo-002.jpg
foo-003.jpg
@end example

use @samp{%.} as matching regexp and @samp{foo-\#} as replacement string.

Example 2: To rename the files

@example
foo.jpg
bar.jpg
baz.jpg
@end example

to

@example
foo-001.jpg
bar-002.jpg
baz-003.jpg
@end example

use as matching regexp @samp{%.} and as replacement string @samp{\@@-\#}.

@item
@anchor{Replace a substring}Replace a substring


Use @samp{%:<from>:<to>}.

Example: To rename files

@example
foo.jpg
bar.jpg
baz.jpg
@end example

to

@example
fOo.jpg
bAr.jpg
bAz.jpg
@end example

use as matching regexp @samp{%:1:2} and as replacement string @samp{%u} (upcase).

Note that you @strong{cannot} use @samp{%.} and @samp{.%} along with substring replacement.

@item
@anchor{Modify the string from the placeholder (\@@)}Modify the string from the placeholder (\@@)


@itemize
@item
By substring, i.e. only using the substring of the placeholder: @samp{\@@:<from>:<to>}.
The length of placeholder is used for <to> when unspecified.

Example 1: @samp{\@@:0:2} replaces from the beginning to the second char of the placeholder.

Example 2: \@@:2: replaces from the second char of the placeholder to the end.

@item
By search-and-replace: @samp{\@@/<regexp>/<replacement>/}.

Incremental replacement is also handled in <replacement>.

Example 3: @samp{\@@/foo/bar/} replaces @samp{foo} by @samp{bar} in the placeholder.

Example 4: @samp{\@@/foo/-\#/} replaces @samp{foo} in the placeholder by 001, 002, etc.
@end itemize

@item
@anchor{Clash in replacements (avoid overwriting files)}Clash in replacements (avoid overwriting files)


When performing any of these replacement operations you may end up with same
names as replacement.  In such cases Helm numbers the file that would otherwise
overwritten.  For instance, should you remove the @samp{-m<n>} part from the files
@samp{emacs-m1.txt}, @samp{emacs-m2.txt} and @samp{emacs-m3.txt} you would end up with
three files named @samp{emacs.txt}, the second renaming overwriting first file, and
the third renaming overwriting second file and so on.  Instead Helm will
automatically rename the second and third files as @samp{emacs(1).txt} and
@samp{emacs(2).txt} respectively.

@item
@anchor{Query-replace on filenames vs serial-rename action}Query-replace on filenames vs. serial-rename action


Unlike the @ref{Serial renaming, , serial rename} actions, the files renamed with
the query-replace action stay in their initial directory and are not moved to
the current directory.  As such, using @samp{\#} to serial-rename files only makes
sense for files inside the same directory.  It even keeps renaming files
with an incremental number in the next directories.
@end enumerate
@end enumerate

@item
@anchor{Serial renaming}Serial renaming


You can use the serial-rename actions to rename, copy or symlink marked files to
a specific directory or in the current directory with all the files numbered
incrementally.

@table @asis
@item Serial-rename by renaming
Rename all marked files with incremental numbering to a specific directory.

@item Serial-rename by copying
Copy all marked files with incremental numbering to a specific directory.

@item Serial-rename by symlinking
Symlink all marked files with incremental numbering to a specific directory.
@end table

@item
@anchor{Defining default target directory for copying renaming etc}Defining default target directory for copying, renaming, etc


You can customize @code{helm-dwim-target} to behave differently depending on the
windows open in the current frame.  Default is to provide completion on all
directories associated to each window.

@item
@anchor{Copying/Renaming from or to remote directories}Copying/Renaming from or to remote directories


Never use ssh tramp method to copy/rename large files, use
instead its scp method if you want to avoid out of memory
problems and crash Emacs or the whole system.  Moreover when using
scp method, you will hit a bug when copying more than 3 files at
the time.@footnote{@uref{https://github.com/emacs-helm/helm/issues/1945, bug#1945}.}
The best way actually is using Rsync to copy files from or to
remote, see @ref{Use Rsync to copy files}.
Also if you often work on remote you may consider using SSHFS
instead of relying on tramp.

@item
@anchor{Copying and renaming asynchronously}Copying and renaming asynchronously


If you have the async library installed (if you got Helm from MELPA you do), you
can use it for copying/renaming files by enabling @code{dired-async-mode}.

Note that even when async is enabled, running a copy/rename action with a prefix
argument will execute action synchronously. Moreover it will follow the first
file of the marked files in its destination directory.

When @code{dired-async-mode} is enabled, an additional action named ``Backup files''
will be available. (Such command is not natively available in Emacs).
See @ref{Use the wildcard to select multiple files} for details.

@item
@anchor{Use Rsync to copy files}Use Rsync to copy files


If Rsync is available, you can use it to copy/sync files or directories
with some restrictions though:

@itemize
@item
Copying from/to tramp sudo method may not work (permissions).

@item
Copying from remote to remote is not supported (rsync restriction)
however you can mount a remote with sshfs and copy to it (best), otherwise you have to modify
the command line with a prefix arg.@footnote{@uref{https://unix.stackexchange.com/questions/183504/how-to-rsync-files-between-two-remotes, how-to-rsync-files-between-two-remotes}
for the command line to use.}
@end itemize

This command is mostly useful when copying large files as it is
fast, asynchronous and provide a progress bar in mode-line.  Each
rsync process have its own progress bar, so you can run several
rsync jobs, they are independents.  If rsync fails you can
consult the @samp{*helm-rsync<n>*} buffer to see rsync errors.  An
help-echo (move mouse over progress bar) is provided to see which
file is in transfer.  Note that when copying directories, no
trailing slashes are added to directory names, which mean that
directory is created on destination if it doesn’t already exists,
see rsync documentation for more infos on rsync behavior.  To
synchronize a directory, mark all in the directory and rsync all
marked to the destination directory or rsync the directory itself
to its parent, e.g. @samp{remote:/home/you/music} @samp{> =/home/you}.

The options are configurable through @code{helm-rsync-switches}, but
you can modify them on the fly when needed by using a prefix arg,
in this case you will be prompted for modifications.

@strong{Note}: When selecting a remote file, if you use the tramp syntax
for specifying a port, i.e. host#2222, helm will add
automatically @samp{-e ’ssh -p 2222’} to the rsync command line
unless you have specified yourself the @samp{-e} option by editing
rsync command line with a prefix arg (see above).
@end enumerate

@node Touch files
@subsection Touch files

In the completion buffer, you can choose the default which is the current-time, it is
the first candidate or the timestamp of one of the selected files.
If you need to use something else, use @kbd{M-n} and edit
the date in minibuffer.
It is also a way to quickly create a new file without opening a buffer, saving it
and killing it.
To touch more than one new file, separate you filenames with a comma (@samp{,}).
If one wants to create (touch) a new file with comma inside the name use a prefix arg,
this will prevent splitting the name and create multiple files.

@node Delete files
@subsection Delete files

You can delete files without quitting helm with
@kbd{C-c d} or delete files and quit helm with @kbd{M-D}.

In the second method you can choose to
make this command asynchronous by customizing
@code{helm-ff-delete-files-function}.

@strong{Warning}: When deleting files asynchronously you will NOT be
WARNED if directories are not empty, that’s mean non empty directories will
be deleted in background without asking.

A good compromise is to trash your files
when using asynchronous method (see @ref{Trashing files}).

When choosing synchronous delete, you can allow recursive
deletion of directories with @code{helm-ff-allow-recursive-deletes}.
Note that when trashing (synchronous) you are not asked for recursive deletion.

Note that @code{helm-ff-allow-recursive-deletes} have no effect when
deleting asynchronously.

First method (persistent delete) is always synchronous.

Note that when a prefix arg is given, trashing behavior is inversed.
See @ref{Trashing files}.

@enumerate
@item
@anchor{Trashing files}Trashing files


If you want to trash your files instead of deleting them you can
set @code{delete-by-moving-to-trash} to non nil, like this your files
will be moved to trash instead of beeing deleted.

You can reverse at any time the behavior of @code{delete-by-moving-to-trash} by using
a prefix arg with any of the delete files command.

On GNULinux distributions, when navigating to a Trash directory you
can restore any file in ..Trash/files directory with the ’Restore
from trash’ action you will find in action menu (needs the
trash-cli package installed for remote files, see @ref{Trashing remote files with tramp, , Here}).
You can as well delete files from Trash directories with the ’delete files from trash’
action.
If you want to know where a file will be restored, hit @kbd{M-i}, you will find a trash info.

@strong{Tip}: Navigate to your Trash/files directories with @code{helm-find-files} and set a bookmark
there with @kbd{C-x r m} for fast access to Trash.

@strong{Note}: Restoring files from trash is working only on system using
the freedesktop trash specifications.@footnote{@uref{http://freedesktop.org/wiki/Specifications/trash-spec}}

@strong{Warning}:

If you have an @samp{ENV} var @samp{XDG_DATA_HOME} in your .profile or .bash_profile
and this var is set to something like @samp{$HOME/.local/share} (like preconized)
@code{move-file-to-trash} may try to create @samp{$HOME/.local/share/Trash} (literally)
and its subdirs in the directory where you are actually trying to trash files.
because @code{move-file-to-trash} is interpreting @samp{XDG_DATA_HOME} literally instead
of evaling its value (with @code{substitute-in-file-name}).

@enumerate
@item
@anchor{Trashing remote files with tramp}Trashing remote files with tramp


Trashing remote files (or local files with sudo method) is disabled by default
because tramp is requiring the ’trash’ command to be installed, if you want to
trash your remote files, customize @code{helm-trash-remote-files}.
The package on most GNU/Linux based distributions is @samp{trash-cli}@footnote{@uref{https://github.com/andreafrancia/trash-cli}}.

@strong{Note}:
When deleting your files with sudo method, your trashed files will not be listed
with trash-list until you log in as root.
@end enumerate
@end enumerate

@node Checksum file
@subsection Checksum file

Checksum is calculated with the md5sum, sha1sum, sha224sum,
sha256sum, sha384sum and sha512sum when available, otherwise the
Emacs function @code{secure-hash} is used but it is slow and may crash
Emacs and even the whole system as it eats all memory.  So if
your system doesn’t have the md5 and sha command line tools be
careful when checking sum of larges files e.g. isos.

@node Grep files
@subsection Grep files

When using an action that involves an external backend (e.g. grep), using @samp{**}
is not recommended (even thought it works fine) because it will be slower to
select all the files.  You are better off leaving the backend to do it, it will
be faster.  However, if you know you have not many files it is reasonable to use
this, also using not recursive wildcard (e.g. @samp{*.el}) is perfectly fine for
this.

See @ref{Use the wildcard to select multiple files} for details.

@enumerate
@item
@anchor{Grep files from @code{helm-find-files}}Grep files from @code{helm-find-files}


You can grep individual files from @code{helm-find-files} by using
@kbd{C-s}.  This same command can also
recursively grep files from the current directory when called with a prefix
argument.  In this case you will be prompted for the file extensions to use
(grep backend) or the types of files to use (ack-grep backend).  See the
@code{helm-grep-default-command} documentation to set this up.  For compressed files
or archives, use zgrep with @kbd{M-g z}.

Otherwise you can use recursive commands like @kbd{M-g a} or @kbd{M-g g}
that are much faster than using @kbd{C-s} with a prefix argument.
See @code{helm-grep-ag-command} and @code{helm-grep-git-grep-command} to set this up.

You can also use @samp{id-utils=’ GID with @{@{@{kbd(M-g i)@}@}@}
 by creating an ID index file with the =mkid} shell command.

All those grep commands use the symbol at point as the default pattern.
Note that default is different from input (nothing is added to the prompt until
you hit @kbd{M-n}).

@enumerate
@item
@anchor{Grepping on remote files}Grepping on remote files


On remote files grep is not well supported by TRAMP unless you suspend updates before
entering the pattern and re-enable it once your pattern is ready.
To toggle suspend-update, use @kbd{C-!}.
@end enumerate

@item
@anchor{Recursive search from Helm-find-files}Recursive search from Helm-find-files


@enumerate
@item
@anchor{You can use helm-browse-project (see binding below)}You can use helm-browse-project (see binding below)


@table @asis
@item @kbd{M-x helm-browse-project}
If the current directory is under version control with either git or hg and
helm-ls-git@footnote{@uref{https://github.com/emacs-helm/helm-ls-git}} and/or helm-ls-hg@footnote{@uref{https://github.com/emacs-helm/helm-ls-hg}} are installed, it lists all the files under
version control.  Otherwise it falls back to Helm-find-files.

@item @kbd{C-u M-x helm-browse-project}
List all the files under this directory and other subdirectories
(recursion) and this list of files will be cached.

@item @kbd{C-u C-u M-x helm-browse-project}
Same but the cache is refreshed.
@end table

@item
@anchor{You can start a recursive search with @samp{locate} @samp{find} or @samp{Fd}}You can start a recursive search with @samp{locate}, @samp{find} or @samp{Fd}


See ``Note'' in the @ref{Recursive completion on subdirectories, , section on subdirectories}.

Using @samp{locate}, you can enable the local database with a prefix argument. If the
local database doesn’t already exists, you will be prompted for its creation.
If it exists and you want to refresh it, give it two prefix args.

When using locate the Helm buffer remains empty until you type something.
Regardless Helm uses the basename of the pattern entered in the helm-find-files
session by default.  Hitting @kbd{M-n} should just kick in the
locate search with this pattern.  If you want Helm to automatically do this, add
@code{helm-source-locate} to @code{helm-sources-using-default-as-input}.

@strong{Note}: On Windows use Everything with its command line @code{es} as a replacement of locate.@footnote{@uref{https://github.com/emacs-helm/helm/wiki/Locate#windows, Locate on Windows}}

@item
@anchor{Recursive completion on subdirectories}Recursive completion on subdirectories


Starting from the directory you are currently browsing, it is possible to have
completion of all directories underneath.  Say you are at @samp{/home/you/foo/} and
you want to go to @samp{/home/you/foo/bar/baz/somewhere/else}, simply type
@samp{/home/you/foo/..else} and hit @kbd{C-j} or enter
the final @samp{/}.  Helm will then list all possible directories under @samp{foo}
matching @samp{else}.

@strong{Note}: Completion on subdirectories uses @samp{locate} as backend, you can configure
the command with @code{helm-locate-recursive-dirs-command}.  Because this completion
uses an index, the directory tree displayed may be out-of-date and not reflect
the latest change until you update the index (using @samp{updatedb} for @samp{locate}).

If for some reason you cannot use an index, the @samp{find} command from
@samp{findutils} can be used instead.  It will be slower though.  You need to pass
the basedir as first argument of @samp{find} and the subdir as the value for
’-(i)regex’ or ’-(i)name’ with the two format specs that are mandatory in
@code{helm-locate-recursive-dirs-command}.

Examples:

@example
find %s -type d -name ’*%s*’
find %s -type d -regex .*%s.*$
@end example


@samp{Fd}@footnote{@uref{https://github.com/sharkdp/fd}} command is now also
supported which is regexp based and very fast.  Here is the command
line to use:

@example
fd --hidden --type d .*%s.*$ %s
@end example


You can use also a glob based search, in this case use the --glob option:

@example
fd --hidden --type d --glob ’*%s*’ %s
@end example
@end enumerate
@end enumerate

@node Execute Eshell commands on files
@subsection Execute Eshell commands on files

Setting up aliases in Eshell allows you to set up powerful customized commands.

Your aliases for using eshell command on file should allow
specifying one or more files, use e.g. @samp{alias foo $1} or
@samp{alias foo $*}, if you want your command to be asynchronous add
at end @samp{&}, e.g. @samp{alias foo $* &}.

Adding Eshell aliases to your @code{eshell-aliases-file} or using the
@samp{alias} command from Eshell allows you to create personalized
commands not available in @code{helm-find-files} actions and use them
from @kbd{M-!}.

Example: You want a command to uncompress some @samp{*.tar.gz} files from @code{helm-find-files}:

@enumerate
@item
Create an Eshell alias named, say, @samp{untargz} with the command
@end enumerate
@samp{alias untargz tar zxvf $*}.

@enumerate
@item
Now from @code{helm-find-files} select the @samp{*.tar.gz} file (you can also
@end enumerate
mark files if needed) and hit @kbd{M-!}.

@strong{Note}: When using marked files with this, the meaning of the prefix argument is
quite subtle.  Say you have @samp{foo}, @samp{bar} and @samp{baz} marked; when you run
the alias command ‘example’ on these files with no prefix argument it will run
‘example’ sequentially on each file:

@example
$ example foo
$ example bar
$ example baz
@end example


With a prefix argument however it will apply ‘example’ on all files at once:

@example
$ example foo bar baz
@end example


Of course the alias command should support this.

If you add %s to the command line %s will be replaced with the candidate, this mean you can
add extra argument to your command e.g. command -extra-arg %s or command %s -extra-arg.
If you want to pass many files inside %s, don’t forget to use a prefix arg.

You can also use special placeholders in extra-args,
see the specific info page once you hit @kbd{M-!}.

@node Attach files to a mail buffer (message-mode)
@subsection Attach files to a mail buffer (message-mode)

If you are in a @code{message-mode} or @code{mail-mode} buffer, that action will appear
in action menu, otherwise it is available at any time with @kbd{C-c C-a}.
It behaves as follows:

@itemize
@item
If you are in a (mail or message) buffer, files are attached there.

@item
If you are not in a mail buffer but one or more mail buffers exist, you are
prompted to attach files to one of these mail buffers.

@item
If you are not in a mail buffer and no mail buffer exists,
a new mail buffer is created with the attached files in it.
@end itemize

@node Working on Remote files with TRAMP
@section Working on Remote files with TRAMP

@anchor{Tramp archive support (emacs-27+ only)}
@subheading Tramp archive support (emacs-27+ only)

If your emacs have library tramp-archive.el, you can browse the
content of archives with emacs and BTW helm-find-files. However this beeing
experimental and not very fast, helm doesn’t provide an automatic
expansion and detection of archives, you will have to add the final @samp{/}
manually and may have to force update (@kbd{C-c C-u})
or remove and add again the final @samp{/} until tramp finish decompressing archive.

@anchor{Using TRAMP with @code{helm-find-files} to read remote directories}
@subheading Using TRAMP with @code{helm-find-files} to read remote directories

@code{helm-find-files} works fine with TRAMP despite some limitations.

@itemize
@item
Grepping files is not very well supported when used incrementally.
See @ref{Grepping on remote files}.

@item
Locate does not work on remote directories.
@end itemize

@itemize
@item
@anchor{A TRAMP syntax crash course}A TRAMP syntax crash course


Please refer to TRAMP’s documentation for more details.

@itemize
@item
Connect to host 192.168.0.4 as user @samp{foo}:

@example
/scp:192.168.0.4@@foo:
@end example

@item
Connect to host 192.168.0.4 as user @samp{foo} on port 2222:

@example
/scp:192.168.0.4@@foo#2222:
@end example

@item
Connect to host 192.168.0.4 as root using multihops syntax:

@example
/ssh:192.168.0.4@@foo|sudo:192.168.0.4:
@end example
@end itemize

@strong{Note}: You can also use @code{tramp-default-proxies-alist} when connecting often to
the same hosts.

As a rule of thumb, prefer the scp method unless using multihops (which only
works with the ssh method), especially when copying large files.

You need to hit @kbd{C-j} once on top of a directory on the first connection
to complete the pattern in the minibuffer.

@item
@anchor{Display color for directories symlinks etc@dots{} with tramp}Display color for directories, symlinks etc@dots{} with tramp


Starting at helm version 2.9.7 it is somewhat possible to
colorize fnames by listing files without loosing performances with
external commands (ls and awk) if your system is compatible.
For this you can use @code{helm-list-dir-external} as value
for @code{helm-list-directory-function}.

See @code{helm-list-directory-function} documentation for more infos.

@item
@anchor{Completing host}Completing host


As soon as you enter the first @samp{:} after method e.g @samp{/scp:} you will
have some completion about previously used hosts or from your @samp{~/.ssh/config}
file, hitting @kbd{C-j} or @kbd{right} on a candidate will insert this host in minibuffer
without addind the ending @samp{:}, second hit insert the last @samp{:}.
As soon the last @samp{:} is entered TRAMP will kick in and you should see the list
of candidates soon after.

When connection fails, be sure to delete your TRAMP connection with
 @kbd{M-x helm-delete-tramp-connection} before retrying.

@item
@anchor{Editing local files as root}Editing local files as root


Use the sudo method:

@example
/sudo:host:
@end example


or

@example
simply /sudo::.
@end example
@end itemize

@node Misc Remarks
@section Misc. Remarks

@menu
* Find file at point::
* Insert filename at point or complete filename at point::
* Edit marked files in a dired buffer::
* Bookmark the @code{helm-find-files} session::
* Ignored or boring files::
* Helm-find-files is using a cache::
@end menu

@node Find file at point
@subsection Find file at point

Helm uses @code{ffap} partially or completely to find file at point depending on the
value of @code{helm-ff-guess-ffap-filenames}: if non-nil, support is complete
(annoying), if nil, support is partial.

Note that when the variable
@code{helm-ff-allow-non-existing-file-at-point} is non nil Helm will
insert the filename at point even if file with this name doesn’t
exists.  If non existing file at point ends with numbers prefixed
with @samp{:} the @samp{:} and numbers are stripped.

@enumerate
@item
@anchor{Find file at line number}Find file at line number


When text at point is in the form of

@example
~/elisp/helm/helm.el:1234
@end example


Helm finds this file at the indicated line number, here 1234.

@item
@anchor{Find URL at point}Find URL at point


When a URL is found at point, Helm expands to that URL only.
Pressing @kbd{@key{RET}} opens that URL using @code{browse-url-browser-function}.

@item
@anchor{Find e-mail address at point}Find e-mail address at point


When an e-mail address is found at point, Helm expands to this e-mail address
prefixed with @samp{mailto:}.  Pressing @kbd{@key{RET}} opens a message buffer with that
e-mail address.
@end enumerate

@node Insert filename at point or complete filename at point
@subsection Insert filename at point or complete filename at point

On insertion (not on completion, i.e. there is nothing at point):

@table @asis
@item @kbd{C-c i}
insert absolute file name.
@item @kbd{C-u C-c i}
insert abbreviated file name.
@item @kbd{C-u C-u C-c i}
insert relative file name.
@item @kbd{C-u C-u C-u C-c i}
insert basename.
@end table

On completion:

@table @asis
@item Target starts with @samp{~/}
insert abbreviate file name.
@item target starts with @samp{/} or @samp{[a-z]:/}
insert full path.
@item Otherwise
insert relative file name.
@end table

@node Edit marked files in a dired buffer
@subsection Edit marked files in a dired buffer

You can open a dired buffer containing only marked files with @kbd{C-x C-q}.
With a prefix argument you can open this same dired buffer in wdired mode for
editing.  Note that wildcards are supported as well, so you can use e.g.
@samp{*.txt} to select all @samp{.txt} files in the current directory or @samp{**.txt} to
select all files recursively from the current directory.
See @ref{Use the wildcard to select multiple files} section above.

@node Bookmark the @code{helm-find-files} session
@subsection Bookmark the @code{helm-find-files} session

You can bookmark the @code{helm-find-files} session with @kbd{C-x r m}.
You can later retrieve these bookmarks by calling @code{helm-filtered-bookmarks}
or, from the current @code{helm-find-files} session, by hitting @kbd{C-x r b}.

@node Ignored or boring files
@subsection Ignored or boring files

Helm-find-files can ignore files matching
@code{helm-boring-file-regexp-list} or files that are git ignored, you
can set this with @code{helm-ff-skip-boring-files} or
@code{helm-ff-skip-git-ignored-files}.

@strong{Note}: This will slow down helm, be warned.

@node Helm-find-files is using a cache
@subsection Helm-find-files is using a cache

Helm is caching each directory files list in a hash table for
faster search, when a directory is modified it is removed from cache
so that further visit in this directory refresh cache.
You may have in some rare cases to refresh directory manually with @kbd{C-c C-u}
for example when helm-find-files session is running and a file is modified/deleted
in current visited directory by an external command from outside Emacs.

@node Commands (1)
@section Commands

@multitable {aaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Keys
@tab Description
@item C-x C-f
@tab Run ‘locate’ (‘C-u’ to specify locate database, ‘M-n’ to insert basename of candidate).
@item C-x C-d
@tab Browse project (‘C-u’ to recurse, ‘C-u C-u’ to recurse and refresh database).
@item C-c /
@tab Run ‘find’ shell command from this directory.
@item C-s
@tab Run Grep (‘C-u’ to recurse).
@item M-g p
@tab Run Pdfgrep on marked files.
@item M-g z
@tab Run zgrep (‘C-u’ to recurse).
@item M-g a
@tab Run AG grep on current directory.
@item M-g g
@tab Run git-grep on current directory.
@item M-g i
@tab Run gid (id-utils).
@item M-.
@tab Run Etags (‘C-u’ to use thing-at-point, ‘C-u C-u’ to reload cache).
@item M-R
@tab Rename Files (‘C-u’ to follow).
@item M-@@
@tab Query replace on marked files.
@item M-C
@tab Copy Files (‘C-u’ to follow).
@item M-V
@tab Rsync Files (‘C-u’ to edit command).
@item M-B
@tab Byte Compile Files (‘C-u’ to load).
@item M-L
@tab Load Files.
@item M-S
@tab Symlink Files.
@item M-H
@tab Hardlink files.
@item M-Y
@tab Relative symlink Files.
@item M-D
@tab Delete Files.
@item M-T
@tab Touch files.
@item M-K
@tab Kill buffer candidate without leaving Helm.
@item C-c d
@tab Delete file without leaving Helm.
@item M-e
@tab Switch to prefered shell.
@item M-!
@tab Eshell command on file (‘C-u’ to apply on marked files, otherwise treat them sequentially).
@item C-c =
@tab Ediff file.
@item M-=
@tab Ediff merge file.
@item C-c i
@tab Complete file name at point.
@item C-c o
@tab Switch to other window.
@item C-c C-o
@tab Switch to other frame.
@item C-c C-x
@tab Open file with external program (‘C-u’ to choose).
@item C-c C-v
@tab Preview file with external program.
@item C-c X
@tab Open file externally with default tool.
@item M-l
@tab Rotate image left.
@item M-r
@tab Rotate image right.
@item M-+
@tab Zoom in image.
@item M--
@tab Zoom out image.
@item C-l
@tab Go to parent directory.
@item M-p
@tab Switch to the visited-directory history.
@item C-c h
@tab Switch to file name history.
@item M-i
@tab Show file properties in a tooltip.
@item M-a
@tab Mark all visible candidates.
@item C-c DEL
@tab Toggle auto-expansion of directories.
@item M-U
@tab Unmark all candidates, visible and invisible ones.
@item C-c C-a
@tab Attach files to message buffer.
@item C-c p
@tab Print file, (‘C-u’ to refresh printer list).
@item C-@{
@tab Enlarge Helm window.
@item C-@}
@tab Narrow Helm window.
@item C-]
@tab Toggle basename/fullpath.
@item C-c r
@tab Find file as root.
@item C-x C-v
@tab Find alternate file.
@item C-c @@
@tab Insert org link.
@item C-x r m
@tab Set bookmark to current directory.
@item C-x r b
@tab Jump to bookmark list.
@item S-<f1>
@tab Sort alphabetically
@item S-<f2>
@tab Sort by newest
@item S-<f3>
@tab Sort by size
@item S-<f4>
@tab Show only directories
@item S-<f5>
@tab Show only files
@end multitable

@node Helm ‘generic’ read file name completion
@chapter Helm ‘generic’ read file name completion

This is ‘generic’ read file name completion that have been @samp{helmized}
because you have enabled @ref{Helm mode, , helm-mode}.
Don’t confuse this with @code{helm-find-files} which is a native helm command,
see @ref{Helm functions vs helmized Emacs functions}.

@menu
* Tips: Tips (1). 
* Commands: Commands (2). 
@end menu

@node Tips (1)
@section Tips

@menu
* Navigation::
* Persistent actions::
* Delete characters backward::
* Create new directories and files::
* Exiting minibuffer with empty string::
@end menu

@node Navigation
@subsection Navigation

@enumerate
@item
@anchor{Enter @samp{~/} at end of pattern to quickly reach home directory}Enter @samp{~/} at end of pattern to quickly reach home directory

@item
@anchor{Enter @samp{/} at end of pattern to quickly reach the file system root}Enter @samp{/} at end of pattern to quickly reach the file system root

@item
@anchor{Enter @samp{/} at end of pattern to quickly reach @code{default-directory}}Enter @samp{./} at end of pattern to quickly reach @code{default-directory}


(As per its value at the beginning of the session.)

If you already are in the @code{default-directory} this will move the cursor to the top.

@item
@anchor{Enter @samp{/} at end of pattern will reach upper directory moving cursor on top}Enter @samp{../} at end of pattern will reach upper directory, moving cursor on top


This is different from using @kbd{M-x helm-find-files-up-one-level} in that it moves
the cursor to the top instead of remaining on the previous subdir name.

@item
@anchor{You can complete with partial basename}You can complete with partial basename


It starts from the third character of the pattern.

For instance @samp{fob} or @samp{fbr} will complete @samp{foobar} but @samp{fb} needs a
third character in order to complete it.
@end enumerate

@node Persistent actions
@subsection Persistent actions

By default @code{helm-read-file-name} uses the persistent actions of @code{helm-find-files}.

@enumerate
@item
@anchor{Use @kbd{C-u C-j} to display an image}Use @kbd{C-u C-j} to display an image

@item
@anchor{@kbd{C-j} on a filename will expand to this filename in Helm-buffer}@kbd{C-j} on a filename will expand to this filename in Helm-buffer


Second hit displays the buffer filename.
Third hit kills the buffer filename.

@strong{Note}: @kbd{C-u C-j} displays the buffer directly.

@item
@anchor{Browse images directories with @code{helm-follow-mode} and navigate up/down (1)}Browse images directories with @code{helm-follow-mode} and navigate up/down

@end enumerate

@node Delete characters backward
@subsection Delete characters backward

When you want to delete characters backward, e.g. to create a new file or directory,
auto-update may come in the way when it keeps updating to an existent directory.
In that case, type @kbd{C-<backspace>} and then ‘<backspace>’.
This should not be needed when copying/renaming files because autoupdate is disabled
by default in that case.

@strong{Note}: On a terminal, the default binding @kbd{C-<backspace>} may not work.
In this case use @kbd{C-c <backspace>}.

@node Create new directories and files
@subsection Create new directories and files

@enumerate
@item
@anchor{You can create a new directory and a new file at the same time}You can create a new directory and a new file at the same time


Simply write the path in prompt and press @kbd{@key{RET}}, e.g.
@samp{~/new/newnew/newnewnew/my_newfile.txt}.

@item
@anchor{To create a new directory append a @samp{/} at to the new name and press @kbd{@key{RET}}}To create a new directory, append a @samp{/} at to the new name and press @kbd{@key{RET}}

@item
@anchor{To create a new file enter a filename not ending with @samp{/}}To create a new file, enter a filename not ending with @samp{/}


File and directory creation works only with some commands (e.g. @code{find-file})
and it will not work with others where it is not intended to return a file or
a directory (e.g @code{list-directory}).
@end enumerate

@node Exiting minibuffer with empty string
@subsection Exiting minibuffer with empty string

You can exit minibuffer with empty string with
Uses keymap @code{helm-read-file--map}, which is not currently defined.
@kbd{M-x helm-cr-empty-string}.
It is useful when some commands are prompting continuously until you enter an empty prompt.

@node Commands (2)
@section Commands

@multitable {aaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Keys
@tab Description
@item C-l
@tab Go to parent directory.
@item C-c DEL
@tab Toggle auto-expansion of directories.
@item C-]
@tab Toggle basename.
@item C-c h
@tab File name history.
@item C/M-RET
@tab Return empty string unless ‘must-match’ is non-nil.
@item C-o
@tab Go to next source.
@item M-o
@tab Go to previous source.
@end multitable

@node Helm Generic files
@chapter Helm Generic files

@menu
* Tips: Tips (2). 
* Commands: Commands (3). 
@end menu

@node Tips (2)
@section Tips

@menu
* Locate::
* Browse project::
* Find command::
@end menu

@node Locate
@subsection Locate

You can append to the search pattern any of the locate command line options,
e.g. @samp{-b}, @samp{-e}, @samp{-n <number>}, etc.  See the locate(1) man page for more details.

Some other sources (at the moment @samp{recentf} and @samp{file in current directory})
support the @samp{-b} flag for compatibility with locate when they are used with it.

When you enable fuzzy matching on locate with @code{helm-locate-fuzzy-match}, the
search will be performed on basename only for efficiency (so don’t add @samp{-b} at
prompt).  As soon as you separate the patterns with spaces, fuzzy matching will
be disabled and search will be done on the full filename.  Note that in
multi-match, fuzzy is completely disabled, which means that each pattern is a
match regexp (i.e. @samp{helm} will match @samp{helm} but @samp{hlm} will @strong{not} match
@samp{helm}).

@strong{Note}: On Windows use Everything with its command line @code{es} as a replacement of locate.@footnote{@uref{https://github.com/emacs-helm/helm/wiki/Locate#windows, Locate on Windows}}

@node Browse project
@subsection Browse project

When the current directory is not under version control, don’t forget to refresh
the cache when files have been added/removed in the directory.

@node Find command
@subsection Find command

Recursively search files using the @samp{find} shell command.

Candidates are all filenames that match all given globbing patterns.  This
respects the options @code{helm-case-fold-search} and
@code{helm-findutils-search-full-path}.

You can pass arbitrary @samp{find} options directly after a @samp{*} separator.
For example, this would find all files matching @samp{book} that are larger
than 1 megabyte:

@example
book * -size +1M
@end example

@node Commands (3)
@section Commands

@multitable {aaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Keys
@tab Description
@item C-]
@tab Toggle basename.
@item C-s
@tab Run grep (‘C-u’ to recurse).
@item M-g z
@tab Run zgrep.
@item M-g p
@tab Run PDFgrep on marked files.
@item M-C
@tab Copy file(s)
@item M-R
@tab Rename file(s).
@item M-S
@tab Symlink file(s).
@item M-H
@tab Hardlink file(s).
@item M-D
@tab Delete file(s).
@item M-B
@tab Byte compile Elisp file(s) (‘C-u’ to load).
@item M-L
@tab Load Elisp file(s).
@item C-=
@tab Ediff file.
@item C-c =
@tab Ediff-merge file.
@item C-c o
@tab Switch to other window.
@item M-i
@tab Show file properties.
@item C-c C-x
@tab Open file with external program (‘C-u’ to choose).
@item C-c X
@tab Open file externally with default tool.
@item C-c @@
@tab Insert org link.
@end multitable

@node Helm fd
@chapter Helm fd

@menu
* Tips: Tips (3). 
* Commands: Commands (4). 
@end menu

@node Tips (3)
@section Tips

The Fd@footnote{@uref{https://github.com/sharkdp/fd}} command line tool is very fast to search files
recursively.  You may have to wait several seconds at first usage when
your hard drive cache is @samp{cold}, then once the cache is initialized
searchs are very fast.  You can pass any Fd options@footnote{@uref{https://github.com/sharkdp/fd#command-line-options}} before
pattern, e.g. @samp{-e py foo}.

The Fd command line can be customized with @code{helm-fd-switches} user
variable.  Always use @samp{--color always} as option otherwise you will
have no colors. To customize colors see Fd colorized@footnote{@uref{https://github.com/sharkdp/fd#colorized-output}}.

@strong{Note}:
Starting from fd version 8.2.1, you have to provide the env var
LS_COLORS to Emacs to have a colorized output, the easiest way is
to add to your @samp{~/.profile} file @samp{eval $(dircolors)}.
Another way is using @samp{setenv} in your init file.
This is not needed when running Emacs from a terminal either with @samp{emacs -nw}
or @samp{emacs} because emacs inherit the env vars of this terminal.@footnote{@uref{https://github.com/sharkdp/fd/issues/725}}

Search is (pcre) regexp based@footnote{@uref{https://docs.rs/regex/1.0.0/regex/#syntax}}, and multi patterns are not supported.

@node Commands (4)
@section Commands

Uses keymap @code{helm-fd-map}, which is not currently defined.

@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Keys
@tab Description
@item M-x helm-ff-run-grep
@tab Run grep (‘C-u’ to recurse).
@item M-x helm-ff-run-zgrep
@tab Run zgrep.
@item M-x helm-ff-run-pdfgrep
@tab Run PDFgrep on marked files.
@item M-x helm-ff-run-copy-file
@tab Copy file(s)
@item M-x helm-ff-run-rename-file
@tab Rename file(s).
@item M-x helm-ff-run-symlink-file
@tab Symlink file(s).
@item M-x helm-ff-run-hardlink-file
@tab Hardlink file(s).
@item M-x helm-ff-run-delete-file
@tab Delete file(s).
@item M-x helm-ff-run-byte-compile-file
@tab Byte compile Elisp file(s) (‘C-u’ to load).
@item M-x helm-ff-run-load-file
@tab Load Elisp file(s).
@item M-x helm-ff-run-ediff-file
@tab Ediff file.
@item M-x helm-ff-run-ediff-merge-file
@tab Ediff-merge file.
@item M-x helm-ff-run-switch-other-window
@tab Switch to other window.
@item M-x helm-ff-properties-persistent
@tab Show file properties.
@item M-x helm-ff-run-open-file-externally
@tab Open file with external program (‘C-u’ to choose).
@item M-x helm-ff-run-open-file-with-default-tool
@tab Open file externally with default tool.
@item M-x helm-ff-run-insert-org-link
@tab Insert org link.
@item M-x helm-fd-previous-directory
@tab Move to previous directory.
@item M-x helm-fd-next-directory
@tab Move to next directory.
@end multitable

@node Helm Grep
@chapter Helm Grep

@menu
* Tips: Tips (4). 
@end menu

@node Tips (4)
@section Tips

With Helm supporting Git-grep and AG/RG, you are better off using
one of them for recursive searches, keeping grep or ack-grep to
grep individual or marked files.  See @ref{Helm AG}.

@menu
* Meaning of the prefix argument::
* You can use wild cards when selecting files (e.g. @samp{*.el}): You can use wild cards when selecting files (eg @samp{*el}). 
* Grep hidden files::
* You can grep in different directories by marking files or using wild cards::
* You can save the result in a @code{helm-grep-mode} buffer::
* Helm-grep supports multi-matching::
* See full path of selected candidate::
* Open file in other window::
* Performance over TRAMP::
@end menu

@node Meaning of the prefix argument
@subsection Meaning of the prefix argument

@enumerate
@item
@anchor{With grep or ack-grep}With grep or ack-grep


Grep recursively, in this case you are
prompted for types (ack-grep) or for wild cards (grep).

@item
@anchor{With AG or RG}With AG or RG


the prefix arg allows you to specify a type of file to search in.
@end enumerate

@node You can use wild cards when selecting files (eg @samp{*el})
@subsection You can use wild cards when selecting files (e.g. @samp{*.el})

Note that a way to grep specific files recursively is to use
e.g. @samp{**.el} to select files, the variable @code{helm-file-globstar}
controls this (it is non nil by default), however it is much
slower than using grep recusively (see helm-find-files
documentation about this feature).

@node Grep hidden files
@subsection Grep hidden files

You may want to customize your command line for grepping hidden
files, for AG/RG use @samp{--hidden}, see man page
of your backend for more infos.

@node You can grep in different directories by marking files or using wild cards
@subsection You can grep in different directories by marking files or using wild cards

@node You can save the result in a @code{helm-grep-mode} buffer
@subsection You can save the result in a @code{helm-grep-mode} buffer

See @ref{Commands, , commands} below.

Once in that buffer you can use @samp{emacs-wgrep}@footnote{@uref{https://github.com/mhayashi1120/Emacs-wgrep}} to edit your
changes, for Helm the package name is @samp{wgrep-helm}, it is hightly
recommended.

@node Helm-grep supports multi-matching
@subsection Helm-grep supports multi-matching

(Starting from version 1.9.4.)

Simply add a space between each pattern as for most Helm commands.

@strong{Note}: Depending the regexp you use it may match as well the
filename, this because we pipe the first grep command which send
the filename in output.

@node See full path of selected candidate
@subsection See full path of selected candidate

Add (helm-popup-tip-mode 1) in your init file or enable it
interactively with @kbd{M-x helm-popup-tip-mode} however it is
generally enough to just put your mouse cursor over candidate.

@node Open file in other window
@subsection Open file in other window

The command @kbd{C-c o} allow you to open file
in other window horizontally or vertically if a prefix arg is supplied.

@node Performance over TRAMP
@subsection Performance over TRAMP

Grepping works but it is badly supported as TRAMP doesn’t support multiple
processes running in a short delay (less than 5s) among other things.

Helm uses a special hook to suspend the process automatically while you are
typing.  Even if Helm handles this automatically by delaying each process by 5s,
you are adviced to this manually by hitting @kbd{C-!} (suspend process) before
typing, and hit again @kbd{C-!} when the regexp is ready to send to the remote
process.  For simple regexps, there should be no need for this.

Another solution is to not use TRAMP at all and mount your remote file system via
SSHFS@.

@node Helm GID
@chapter Helm GID

Still supported, but mostly deprecated, using AG/RG or Git-grep
is much more efficient, also @samp{id-utils} seems no more maintained.

@menu
* Tips: Tips (5). 
@end menu

@node Tips (5)
@section Tips

Helm-GID reads the database created with the @samp{mkid} command from id-utils.
The name of the database file can be customized with @code{helm-gid-db-file-name}, it
is usually @samp{ID}.

Helm-GID use the symbol at point as default-input.  This command is also
accessible from @code{helm-find-files} which allow you to navigate to another
directory to consult its database.

@strong{Note}: Helm-GID supports multi-matches but only the last pattern entered will be
highlighted since there is no @code{--color}-like option in GID itself.

@node Helm AG
@chapter Helm AG

@menu
* Tips: Tips (6). 
@end menu

@node Tips (6)
@section Tips

Helm-AG is different from grep or ack-grep in that it works on a
directory recursively and not on a list of files.  It is called
helm-AG but it support several backend, namely AG, RG and PT@.
Nowaday the best backend is Ripgrep aka RG, it is the fastest and
is actively maintained, see @code{helm-grep-ag-command} and
@code{helm-grep-ag-pipe-cmd-switches} to configure it.

You can ignore files and directories with a @samp{.agignore} file, local to a
directory or global when placed in the home directory. (See the AG man page for
more details.)  That file follows the same syntax as @code{helm-grep-ignored-files}
and @code{helm-grep-ignored-directories}.

As always you can access Helm AG from @code{helm-find-files}.

Starting with version 0.30, AG accepts one or more TYPE arguments on its command
line.  Helm provides completion on these TYPE arguments when available with your
AG version.  Use a prefix argument when starting a Helm-AG session to enable this
completion.  See RG and AG man pages on how to add new types.

@strong{Note}: You can mark several types to match in the AG query.  The first AG
versions providing this feature allowed only one type, so in this case only the
last mark will be used.

@node Helm git-grep
@chapter Helm git-grep

Helm-git-grep searches the current directory, i.e. the default directory or the
directory in Helm-find-files.  If this current directory is a subdirectory of a
project and you want to also match parent directories (i.e the whole project),
use a prefix argument.

@menu
* Commands: Commands (5). 
@end menu

@node Commands (5)
@section Commands

@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Keys
@tab Description
@item M-<down>
@tab Next File.
@item M-<up>
@tab Previous File.
@item M-x helm-yank-text-at-point
@tab Yank text at point in minibuffer.
@item C-c o
@tab Jump to other window.
@item C-c C-o
@tab Jump to other frame.
@item <left>
@tab Run default action (same as ‘RET’).
@item C-x C-s
@tab Save to a ‘helm-grep-mode’ enabled buffer.
@end multitable

@node Helm PDFgrep Map
@chapter Helm PDFgrep Map

@menu
* Commands: Commands (6). 
@end menu

@node Commands (6)
@section Commands

@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Keys
@tab Description
@item M-<down>
@tab Next file.
@item M-<up>
@tab Previous file.
@item M-x helm-yank-text-at-point
@tab Yank text at point in minibuffer.
@end multitable

@node Helm Etags Map
@chapter Helm Etags Map

@menu
* Commands: Commands (7). 
@end menu

@node Commands (7)
@section Commands

@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Keys
@tab Description
@item M-<down>
@tab Next file.
@item M-<up>
@tab Previous file.
@item M-x helm-yank-text-at-point
@tab Yank text at point in minibuffer.
@end multitable

@node Helm UCS
@chapter Helm UCS

@menu
* Tips: Tips (7). 
* Commands: Commands (8). 
@end menu

@node Tips (7)
@section Tips

Use commands below to insert unicode characters in current buffer without
leaving Helm.

@node Commands (8)
@section Commands

Uses keymap @code{helm-ucs-map}, which is not currently defined.

@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Keys
@tab Description
@item M-x helm-ucs-persistent-insert
@tab Insert character.
@item M-x helm-ucs-persistent-forward
@tab Forward character.
@item M-x helm-ucs-persistent-backward
@tab Backward character.
@item M-x helm-ucs-persistent-delete
@tab Delete character backward.
@item M-x helm-ucs-persistent-insert-space
@tab Insert space.
@end multitable

@node Helm bookmark name
@chapter Helm bookmark name

@menu
* Commands: Commands (9). 
@end menu

@node Commands (9)
@section Commands

Uses keymap @code{helm-bookmark-map}, which is not currently defined.

@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Keys
@tab Description
@item M-x helm-bookmark-run-jump-other-window
@tab Jump other window.
@item M-x helm-bookmark-run-delete
@tab Delete bookmark.
@item M-x helm-bookmark-run-edit
@tab Edit bookmark.
@item M-x helm-bookmark-toggle-filename
@tab Toggle bookmark location visibility.
@end multitable

@node Helm Eshell on file
@chapter Helm Eshell on file

@menu
* Tips: Tips (8). 
* Commands: Commands (10). 
@end menu

@node Tips (8)
@section Tips

@menu
* Pass extra arguments after filename::
* Specify marked files as arguments::
* Run eshell commands asynchronously::
@end menu

@node Pass extra arguments after filename
@subsection Pass extra arguments after filename

Normally the command or alias will be called with file as argument.  For instance

@example
<command> candidate_file
@end example


But you can also pass an argument or more after @samp{candidate_file} like this:

@example
<command> %s [extra_args]
@end example


@samp{candidate_file} will be added at @samp{%s} and the command will look at this:

@example
<command> candidate_file [extra_args]
@end example

@enumerate
@item
@anchor{Use placeholders in extra arguments}Use placeholders in extra arguments


placeholder for file without extension: \@@
placeholder for incremental number:     \#

@samp{candidate_file} will be added at @samp{%s} and \@@ but without extension.

@example
<command %s \@@>
@end example


@samp{candidate_file} will be added at @samp{%s} and \# will be replaced by an incremental number.

@example
<command> %s \#
@end example


Here examples:

Say you want to use the @samp{convert} command to convert all your .png files in a directory to .jpg.

This will convert all your files to jpg keeping the same basename.

@example
convert %s \@@.jpg
@end example


This will convert all your files to foo-001.jpg, foo-002.jpg etc@dots{}

@example
convert %s foo-\#.jpg
@end example


You can of course combine both placeholders if needed.

@example
convert %s \@@-\#.jpg
@end example
@end enumerate

@node Specify marked files as arguments
@subsection Specify marked files as arguments

Example:

@example
<command> file1 file2...
@end example


Call @code{helm-find-files-eshell-command-on-file} with one prefix argument.  Otherwise
you can pass one prefix argument from the command selection buffer.

@strong{Note}: This does not work on remote files.

With two prefix-args the output is printed to the @code{current-buffer}.

With no prefix argument or a prefix argument value of ’(16) (@kbd{C-u C-u})
the command is called once for each file like this:

@example
<command> file1
<command> file2
...
@end example

@node Run eshell commands asynchronously
@subsection Run eshell commands asynchronously

You can run your commands asynchronously by adding @samp{&} at end
of any commands, e.g. @samp{foo %s &}.  You can also directly setup
your alias in the eshell alias file with e.g. @samp{alias foo $1 &}.

@strong{Note}: If you use @samp{&} in a command with marked files and your
command accept many files as argument don’t forget to pass the
prefix arg to ensure you run only one command on all marked async.

@node Commands (10)
@section Commands

Uses keymap @code{helm-esh-on-file-map}, which is not currently defined.

@node Helm Ido virtual buffers
@chapter Helm Ido virtual buffers

@menu
* Commands: Commands (11). 
@end menu

@node Commands (11)
@section Commands

Uses keymap @code{helm-buffers-ido-virtual-map}, which is not currently defined.

@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaa}
@headitem Keys
@tab Description
@item M-x helm-ff-run-switch-other-window
@tab Switch to other window.
@item M-x helm-ff-run-switch-other-frame
@tab Switch to other frame.
@item M-x helm-ff-run-grep
@tab Grep file.
@item M-x helm-ff-run-zgrep
@tab Zgrep file.
@item M-x helm-ff-run-delete-file
@tab Delete file.
@item M-x helm-ff-run-open-file-externally
@tab Open file externally.
@end multitable

@node Helm Moccur
@chapter Helm Moccur

@menu
* Tips: Tips (9). 
* Commands: Commands (12). 
@end menu

@node Tips (9)
@section Tips

@menu
* Searching in many buffers::
* Matching::
* Automatically match symbol at point::
* Yank word at point in minibuffer::
* Preselection::
* Jump to the corresponding line in the searched buffer::
* Switch to buffer in other window::
* Save the results::
* Refresh the resumed session::
* Refresh a saved buffer::
* Edit a saved buffer::
* Search in region::
* Switch to next or previous source::
@end menu

@node Searching in many buffers
@subsection Searching in many buffers

Start from @code{helm-buffers-list} or @code{helm-mini}, mark some buffers and hit
Uses keymap ‘helm-buffer-map\[helm-buffers-run-occur].
A prefix arg will change the behavior of `helm-occur-always-search-in-current'
i.e. add current buffer or not to the list of buffers to search in.

@node Matching
@subsection Matching

Multiple regexp matching is allowed, simply enter a space to separate the regexps.

Matching empty lines is supported with the regexp @samp{^$}, you then get the
results displayed as the buffer-name and the line number only.  You can
save and edit these results, i.e. add text to the empty line.

@node Automatically match symbol at point
@subsection Automatically match symbol at point

Helm can automatically match the symbol at point while keeping
the minibuffer empty, ready to be written to when
`helm-source-occur' and `helm-source-moccur' are member of
`helm-sources-using-default-as-input'.

@node Yank word at point in minibuffer
@subsection Yank word at point in minibuffer

Use @kbd{C-w} as many times as needed, undo with @kbd{C-}.  Note that
@kbd{C-w} and @{@{@{kbd(C-)@}@}@} are not standard keybindings, but bindings
provided with special helm feature
`helm-define-key-with-subkeys'.

@node Preselection
@subsection Preselection

When helm-occur search symbol at point the current line is
preselected in the source related to current-buffer.  When
`helm-occur-keep-closest-position' is non nil helm-occur will
select the line which is the closest from the current line in
current-buffer after updating.

@node Jump to the corresponding line in the searched buffer
@subsection Jump to the corresponding line in the searched buffer

You can do this with `\<helm-map’, which is not currently defined.
@kbd{M-x helm-execute-persistent-action’} (persistent-action), to do it repeatedly
you can use @kbd{C-<down>} and @kbd{C-<up>} or enable @code{helm-follow-mode} with @kbd{C-c C-f}.
Follow mode is enabled by default in helm-occur.

@node Switch to buffer in other window
@subsection Switch to buffer in other window

The command
Uses keymap @code{helm-moccur-map}, which is not currently defined.
@kbd{M-x helm-moccur-run-goto-line-ow} allow you to switch to buffer
in other window horizontally or vertically if a prefix arg is supplied.

@node Save the results
@subsection Save the results

Similarly to Helm-grep, you can save the results with @kbd{C-x C-s}.
Once in the saved buffer, you can edit it, see @ref{Edit a saved buffer, , below}.

Of course if you don’t save the results, you can resume the Helm session with
@code{helm-resume}.

@node Refresh the resumed session
@subsection Refresh the resumed session

When the buffer(s) where you ran helm-(m)occur get(s) modified, the Helm buffer
will flash red as a warning.  You can refresh the buffer by running @kbd{C-c C-u}.
This can be done automatically by customizing @code{helm-moccur-auto-update-on-resume}.

@node Refresh a saved buffer
@subsection Refresh a saved buffer

Type @kbd{g} to update the buffer.

@node Edit a saved buffer
@subsection Edit a saved buffer

First, install @samp{wgrep}@footnote{@uref{https://github.com/mhayashi1120/Emacs-wgrep}} and then:

@enumerate
@item
@kbd{C-c C-p} (@code{wgrep-change-to-wgrep-mode}) to edit the buffer(s).
@item
@kbd{C-x C-s} to save your changes.
@end enumerate

@strong{Tip}: Use the excellent @samp{iedit}@footnote{@uref{https://github.com/victorhge/iedit}

} to modify all
occurences at once in the buffer.

@node Search in region
@subsection Search in region

When searching in current-buffer with @code{helm-occur}, if a region
is found helm will search in this region only.  If you marked
this region with @code{mark-defun} the symbol that was at point before
marking defun will be used when @code{helm-source-occur} is member of
@code{helm-sources-using-default-as-input}.

@node Switch to next or previous source
@subsection Switch to next or previous source

See [BROKEN LINK: Moving in ‘helm-buffer’].

@node Commands (12)
@section Commands

@multitable {aaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Keys
@tab Description
@item C-c o
@tab Go to line in other window.
@item C-c C-o
@tab Go to line in new frame.
@item C-x C-s
@tab Save results in new buffer.
@end multitable

@node Helm Top
@chapter Helm Top

@menu
* Commands: Commands (13). 
@end menu

@node Commands (13)
@section Commands

Uses keymap @code{helm-top-map}, which is not currently defined.

@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Keys
@tab Description
@item M-x helm-top-run-sort-by-com
@tab Sort by commands.
@item M-x helm-top-run-sort-by-cpu
@tab Sort by CPU usage.
@item M-x helm-top-run-sort-by-user
@tab Sort alphabetically by user.
@item M-x helm-top-run-sort-by-mem
@tab Sort by memory.
@end multitable

@node Helm Elisp package
@chapter Helm Elisp package

@menu
* Tips: Tips (10). 
* Commands: Commands (14). 
@end menu

@node Tips (10)
@section Tips

@menu
* Compile all your packages asynchronously::
* Upgrade Elisp packages::
* Meaning of flags prefixing packages::
@end menu

@node Compile all your packages asynchronously
@subsection Compile all your packages asynchronously

If you use async (if you have installed Helm from MELPA you do), only @samp{helm},
@samp{helm-core}, and @samp{magit} are compiled asynchronously.  If you want all your
packages compiled asynchronously, add this to your init file:

(setq async-bytecomp-allowed-packages ’(all))

@node Upgrade Elisp packages
@subsection Upgrade Elisp packages

On initialization (when Emacs is fetching packages on remote), if Helm finds
packages to upgrade, it will start in the upgradable packages view showing the packages
available for upgrade.

On subsequent runs, you will have to refresh the list with @kbd{C-c C-u}.  If Helm
finds upgrades you can switch to upgrade view (see below) to see what packages
are available for upgrade or simply hit @kbd{C-c U} to upgrade them all.

To see upgradable packages hit @kbd{M-U}.

Then you can install all upgradable packages with the @samp{upgrade all} action
(@kbd{C-c C-u}), or upgrade only specific packages by marking them and running the
@samp{upgrade} action (visible only when there are upgradable packages).  Of course
you can upgrade a single package by just running the @samp{upgrade} action without
marking it (@kbd{C-c u} or @kbd{@key{RET}}) .

@strong{Warning:} You are strongly advised to @strong{restart} Emacs after @strong{upgrading} packages.

@node Meaning of flags prefixing packages
@subsection Meaning of flags prefixing packages

(Emacs ≥25)

@itemize
@item
The flag @samp{S} that prefixes package names means that the packages belong to @code{package-selected-packages}.

@item
The flag @samp{U} that prefix package names mean that this package is no more needed.
@end itemize

@node Commands (14)
@section Commands

Uses keymap @code{helm-el-package-map}, which is not currently defined.

@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Keys
@tab Description
@item M-x helm-el-package-show-all
@tab Show all packages.
@item M-x helm-el-package-show-installed
@tab Show installed packages only.
@item M-x helm-el-package-show-uninstalled
@tab Show non-installed packages only.
@item M-x helm-el-package-show-upgrade
@tab Show upgradable packages only.
@item M-x helm-el-package-show-built-in
@tab Show built-in packages only.
@item M-x helm-el-run-package-install
@tab Install package(s).
@item M-x helm-el-run-package-reinstall
@tab Reinstall package(s).
@item M-x helm-el-run-package-uninstall
@tab Uninstall package(s).
@item M-x helm-el-run-package-upgrade
@tab Upgrade package(s).
@item M-x helm-el-run-package-upgrade-all
@tab Upgrade all packages.
@item M-x helm-el-run-visit-homepage
@tab Visit package homepage.
@end multitable

@node Helm M-x
@chapter Helm M-x

@menu
* Tips: Tips (11). 
@end menu

@node Tips (11)
@section Tips

@menu
* You can get help on any command with persistent action (C-j)::
* Prefix arguments::
* Completion styles in @kbd{helm-M-x}::
* Duplicate entries in helm-M-x history::
@end menu

@node You can get help on any command with persistent action (C-j)
@subsection You can get help on any command with persistent action (C-j)

@node Prefix arguments
@subsection Prefix arguments

You can pass prefix arguments @strong{after} starting @code{helm-M-x}.  A mode-line
counter will display the number of given prefix arguments.

If you pass prefix arguments before running @code{helm-M-x}, it will be displayed in the prompt.
The first @kbd{C-u} after @code{helm-M-x} clears those prefix arguments.

@strong{Note}: When you specify prefix arguments once @code{helm-M-x} is
started, the prefix argument apply on the next command, so if you
hit RET, it will apply on the selected command, but if you type a
new character at prompt to narrow down further candidates, the
prefix arg will apply to @code{self-insert-command} (e.g. if you type
@kbd{C-u e} @samp{eeee} will be inserted in prompt) so select the
command you want to execute before specifying prefix arg.

@node Completion styles in @kbd{helm-M-x}
@subsection Completion styles in @kbd{helm-M-x}

By default @kbd{helm-M-x} use ’helm completion style, if you want to enable fuzzy matching aka flex,
see @ref{Completion-styles}.

@node Duplicate entries in helm-M-x history
@subsection Duplicate entries in helm-M-x history

helm-M-x history obey to history variables, if you have
duplicates in your helm-M-x history set @code{history-delete-duplicates} to non nil.

@node Helm Imenu
@chapter Helm Imenu

@menu
* Commands: Commands (15). 
@end menu

@node Commands (15)
@section Commands

Uses keymap @code{helm-imenu-map}, which is not currently defined.

@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaa}
@headitem Keys
@tab Description
@item M-x helm-imenu-next-section
@tab Go to next section.
@item M-x helm-imenu-previous-section
@tab Go to previous section.
@end multitable

@node Helm colors
@chapter Helm colors

@menu
* Commands: Commands (16). 
@end menu

@node Commands (16)
@section Commands

Uses keymap @code{helm-color-map}, which is not currently defined.

@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Keys
@tab Description
@item M-x helm-color-run-insert-name
@tab Insert the entry name.
@item M-x helm-color-run-kill-name
@tab Kill the entry name.
@item M-x helm-color-run-insert-rgb
@tab Insert entry in RGB format.
@item M-x helm-color-run-kill-rgb
@tab Kill entry in RGB format.
@end multitable

@node Helm Semantic
@chapter Helm Semantic

@menu
* Commands: Commands (17). 
@end menu

@node Commands (17)
@section Commands

Uses keymap @code{helm-semantic-map}, which is not currently defined.

@node Helm kmacro
@chapter Helm kmacro

@menu
* Tips: Tips (12). 
* Commands: Commands (18). 
@end menu

@node Tips (12)
@section Tips

@itemize
@item
Start recording a kmacro with @kbd{f3}.
@item
End the kmacro recording with @kbd{f4}.
@item
Run @code{helm-execute-kmacro} to list all your kmacros.
@end itemize

Use persistent action to run your kmacro as many times as needed.
You can browse the kmacros with @code{helm-next-line} and @code{helm-previous-line}.

@strong{Note}: You can’t record keys running Helm commands except @code{helm-M-x}, under the
condition that you don’t choose a command using Helm completion.

@node Commands (18)
@section Commands

Uses keymap @code{helm-kmacro-map}, which is not currently defined.

@node Helm kill ring
@chapter Helm kill ring

@menu
* Tips: Tips (13). 
* Commands: Commands (19). 
@end menu

@node Tips (13)
@section Tips

Every Helm session lets you save a candidate to the kill-ring / clipboard /
primary-selection with @kbd{C-c C-k}.

To save space, Helm-kill-ring truncates the candidates longer than
@code{helm-kill-ring-max-offset}.
‘
Uses keymap @code{helm-kill-ring-map}, which is not currently defined.
@kbd{M-x helm-kill-ring-kill-selection}’ then saves the whole
text and not the truncated value.  The view of truncated candidates can be
toggled; see the command list below.

As opposed to @code{yank}, numeric prefix arguments are ignored with
@code{helm-show-kill-ring}: there is no need for them since selection happens within
Helm.  Moreover Helm has @ref{Shortcuts for executing the default action on the n-th candidate}.

It is recommended to globally bind @kbd{M-y} to @code{helm-show-kill-ring}.  Once in the
Helm-kill-ring session you can navigate to next/previous line with @kbd{M-y} and
@kbd{M-u} for convenience.  Of course @kbd{M-x helm-next-line} and @kbd{M-x helm-previous-line} are still available.

It is possible to delete candidates from the kill ring with ‘
Uses keymap @code{helm-kill-ring-map}, which is not currently defined.
@kbd{M-x helm-kill-ring-delete}’
but also persistently with ‘
Uses keymap @code{helm-kill-ring-map}, which is not currently defined.
@kbd{M-x helm-kill-ring-run-persistent-delete}’.

You can concatenate marked candidates and yank them in the current
buffer, thus creating a new entry in the kill ring.  Candidates are
concatenated with @code{helm-kill-ring-separator} as default but you can
change interactively the separator while yanking by using two prefix
args.  When you have something else than @samp{\n} as default value for
@code{helm-kill-ring-separator} and you want to use @samp{\n} from prompt, use
@kbd{C-q C-j} to enter a newline in prompt.

To not push a new entry in the kill ring, use @kbd{C-c @key{TAB}} instead of RET
(note that you can’t change separator with this).

When inserting candidates with the default action (@kbd{@key{RET}}), @code{point} is placed at
the end of the candidate and @code{mark} at the beginning.  You can revert this behavior
by using a prefix argument, i.e. @kbd{C-u @key{RET}}, like the regular @code{yank} command does.

@node Commands (19)
@section Commands

Uses keymap @code{helm-kill-ring-map}, which is not currently defined.

@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Keys
@tab Description
@item M-x helm-next-line
@tab Next line.
@item M-x helm-previous-line
@tab Previous line.
@item M-x helm-kill-ring-delete
@tab Delete entry.
@item M-x helm-kill-ring-toggle-truncated
@tab Toggle truncated view of candidate.
@item M-x helm-kill-ring-kill-selection
@tab Kill non-truncated of selection.
@end multitable

@bye