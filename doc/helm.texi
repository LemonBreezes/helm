\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename helm.info
@settitle The Helm Manual
@documentencoding UTF-8
@documentlanguage en
@set txicodequoteundirected
@set txicodequotebacktick
@set MAINTAINERSITE @uref{https://github.com/thierryvolpiatto webpage}
@set MAINTAINER Thierry Volpiatto
@set MAINTAINEREMAIL @email{thierry.volpiatto@gmail.com}
@set MAINTAINERCONTACT @uref{mailto:thierry.volpiatto@gmail.com,contact the maintainer}
@c %**end of header

@dircategory Emacs Add-ons
@direntry
* Helm Manual: (helm).  Helm Manual.
@end direntry

@finalout
@titlepage
@title The Helm Manual
@subtitle Release 3.6.2
@author The Helm Developers
@end titlepage

@contents

@ifnottex
@node Top
@top The Helm Manual
@end ifnottex

@menu
* Package helm::
* Main Index::                   An index of Helm's concepts and features.
* Key Index::                    Key bindings and where they are described.
* Command and Function Index::   Command names and some internal functions.
* Variable Index::               Variables mentioned in the manual.

@detailmenu
--- The Detailed Node Listing ---

Package: helm

* Library helm::
* Library helm-adaptive::
* Library helm-bookmark::
* Library helm-buffers::
* Library helm-color::
* Library helm-comint::
* Library helm-command::
* Library helm-config::
* Library helm-dabbrev::
* Library helm-easymenu::
* Library helm-elisp::
* Library helm-elisp-package::
* Library helm-epa::
* Library helm-eshell::
* Library helm-eval::
* Library helm-external::
* Library helm-fd::
* Library helm-files::
* Library helm-find::
* Library helm-font::
* Library helm-for-files::
* Library helm-global-bindings::
* Library helm-grep::
* Library helm-help::
* Library helm-id-utils::
* Library helm-imenu::
* Library helm-info::
* Library helm-lib::
* Library helm-locate::
* Library helm-man::
* Library helm-misc::
* Library helm-mode::
* Library helm-multi-match::
* Library helm-net::
* Library helm-occur::
* Library helm-regexp::
* Library helm-ring::
* Library helm-semantic::
* Library helm-shell::
* Library helm-source::
* Library helm-sys::
* Library helm-tags::
* Library helm-types::
* Library helm-utils::
* Library helm-x-files::

Library: helm

* Modes in library @code{helm}::
* Commands in keymap @code{helm-map}::
* Commands in library @code{helm} (excludes keymaps)::
* Options in library @samp{helm}::
* Hooks in library @samp{helm}::

Library: helm-adaptive

* Modes in library @code{helm-adaptive}::
* Commands in library @code{helm-adaptive} (excludes keymaps)::
* Options in library @samp{helm-adaptive}::
* Hooks in library @samp{helm-adaptive}::

Library: helm-bookmark

* Commands in keymap @code{helm-bookmark-find-files-map}::
* Commands in keymap @code{helm-bookmark-map}::
* Commands in library @code{helm-bookmark} (excludes keymaps)::
* Options in library @samp{helm-bookmark}::

Library: helm-buffers

* Commands in keymap @code{helm-buffer-map}::
* Commands in keymap @code{helm-buffer-not-found-map}::
* Commands in library @code{helm-buffers} (excludes keymaps)::
* Options in library @samp{helm-buffers}::

Library: helm-color

* Commands in keymap @code{helm-color-map}::
* Commands in library @code{helm-color} (excludes keymaps)::

Library: helm-comint

* Commands in keymap @code{helm-comint-prompts-keymap}::
* Commands in library @code{helm-comint} (excludes keymaps)::
* Options in library @samp{helm-comint}::

Library: helm-command

* Commands in keymap @code{helm-M-x-map}::
* Commands in library @code{helm-command} (excludes keymaps)::
* Options in library @samp{helm-command}::
* Hooks in library @samp{helm-command}::

Library: helm-dabbrev

* Commands in library @code{helm-dabbrev} (excludes keymaps)::
* Options in library @samp{helm-dabbrev}::

Library: helm-elisp

* Commands in library @code{helm-elisp} (excludes keymaps)::
* Options in library @samp{helm-elisp}::

Library: helm-elisp-package

* Commands in keymap @code{helm-el-package-map}::
* Commands in library @code{helm-elisp-package} (excludes keymaps)::
* Options in library @samp{helm-elisp-package}::

Library: helm-epa

* Modes in library @code{helm-epa}::
* Commands in library @code{helm-epa} (excludes keymaps)::
* Options in library @samp{helm-epa}::
* Hooks in library @samp{helm-epa}::

Library: helm-eshell

* Commands in keymap @code{helm-eshell-prompts-keymap}::
* Commands in library @code{helm-eshell} (excludes keymaps)::
* Options in library @samp{helm-eshell}::
* Hooks in library @samp{helm-eshell}::

Library: helm-eval

* Commands in keymap @code{helm-eval-expression-map}::
* Commands in library @code{helm-eval} (excludes keymaps)::
* Options in library @samp{helm-eval}::

Library: helm-external

* Commands in library @code{helm-external} (excludes keymaps)::
* Options in library @samp{helm-external}::

Library: helm-fd

* Commands in keymap @code{helm-fd-map}::
* Options in library @samp{helm-fd}::

Library: helm-files

* Modes in library @code{helm-files}::
* Commands in keymap @code{helm-browse-project-map}::
* Commands in keymap @code{helm-file-name-history-map}::
* Commands in keymap @code{helm-find-files-map}::
* Commands in keymap @code{helm-read-file-map}::
* Commands in library @code{helm-files} (excludes keymaps)::
* Options in library @samp{helm-files}::
* Hooks in library @samp{helm-files}::

Library: helm-find

* Commands in keymap @code{helm-find-map}::
* Commands in library @code{helm-find} (excludes keymaps)::
* Options in library @samp{helm-find}::

Library: helm-font

* Commands in keymap @code{helm-ucs-map}::
* Commands in library @code{helm-font} (excludes keymaps)::
* Options in library @samp{helm-font}::

Library: helm-for-files

* Commands in library @code{helm-for-files} (excludes keymaps)::
* Options in library @samp{helm-for-files}::

Library: helm-global-bindings

* Commands in keymap @code{helm-command-map}::
* Options in library @samp{helm-global-bindings}::

Library: helm-grep

* Modes in library @code{helm-grep}::
* Commands in keymap @code{helm-grep-map}::
* Commands in keymap @code{helm-grep-mode-map}::
* Commands in keymap @code{helm-pdfgrep-map}::
* Commands in library @code{helm-grep} (excludes keymaps)::
* Options in library @samp{helm-grep}::
* Hooks in library @samp{helm-grep}::

Library: helm-help

* Commands in library @code{helm-help} (excludes keymaps)::

Library: helm-id-utils

* Commands in library @code{helm-id-utils} (excludes keymaps)::
* Options in library @samp{helm-id-utils}::

Library: helm-imenu

* Commands in keymap @code{helm-imenu-map}::
* Commands in library @code{helm-imenu} (excludes keymaps)::
* Options in library @samp{helm-imenu}::

Library: helm-info

* Modes in library @code{helm-info}::
* Commands in library @code{helm-info} (excludes keymaps)::
* Options in library @samp{helm-info}::

Library: helm-lib

* Commands in library @code{helm-lib} (excludes keymaps)::
* Options in library @samp{helm-lib}::
* Hooks in library @samp{helm-lib}::

Library: helm-locate

* Commands in keymap @code{helm-locate-map}::
* Commands in library @code{helm-locate} (excludes keymaps)::
* Options in library @samp{helm-locate}::

Library: helm-man

* Commands in library @code{helm-man} (excludes keymaps)::
* Options in library @samp{helm-man}::

Library: helm-misc

* Commands in library @code{helm-misc} (excludes keymaps)::
* Options in library @samp{helm-misc}::

Library: helm-mode

* Modes in library @code{helm-mode}::
* Commands in keymap @code{helm-comp-read-map}::
* Commands in library @code{helm-mode} (excludes keymaps)::
* Options in library @samp{helm-mode}::
* Hooks in library @samp{helm-mode}::

Library: helm-multi-match

* Modes in library @code{helm-multi-match}::
* Commands in library @code{helm-multi-match} (excludes keymaps)::
* Options in library @samp{helm-multi-match}::
* Hooks in library @samp{helm-multi-match}::

Library: helm-net

* Commands in library @code{helm-net} (excludes keymaps)::
* Options in library @samp{helm-net}::

Library: helm-occur

* Modes in library @code{helm-occur}::
* Commands in keymap @code{helm-occur-map}::
* Commands in keymap @code{helm-occur-mode-map}::
* Commands in library @code{helm-occur} (excludes keymaps)::
* Options in library @samp{helm-occur}::
* Hooks in library @samp{helm-occur}::

Library: helm-regexp

* Commands in library @code{helm-regexp} (excludes keymaps)::

Library: helm-ring

* Commands in keymap @code{helm-kill-ring-map}::
* Commands in library @code{helm-ring} (excludes keymaps)::
* Options in library @samp{helm-ring}::

Library: helm-semantic

* Commands in library @code{helm-semantic} (excludes keymaps)::
* Options in library @samp{helm-semantic}::

Library: helm-shell

* Commands in library @code{helm-shell} (excludes keymaps)::

Library: helm-sys

* Modes in library @code{helm-sys}::
* Commands in keymap @code{helm-top-map}::
* Commands in library @code{helm-sys} (excludes keymaps)::
* Options in library @samp{helm-sys}::
* Hooks in library @samp{helm-sys}::

Library: helm-tags

* Commands in keymap @code{helm-etags-map}::
* Commands in library @code{helm-tags} (excludes keymaps)::
* Options in library @samp{helm-tags}::

Library: helm-types

* Commands in keymap @code{helm-generic-files-map}::
* Options in library @samp{helm-types}::

Library: helm-utils

* Modes in library @code{helm-utils}::
* Commands in library @code{helm-utils} (excludes keymaps)::
* Options in library @samp{helm-utils}::
* Hooks in library @samp{helm-utils}::

Library: helm-x-files

* Options in library @samp{helm-x-files}::

@end detailmenu
@end menu

@node Package helm
@chapter Package: helm

@menu
* Library helm::
* Library helm-adaptive::
* Library helm-bookmark::
* Library helm-buffers::
* Library helm-color::
* Library helm-comint::
* Library helm-command::
* Library helm-config::
* Library helm-dabbrev::
* Library helm-easymenu::
* Library helm-elisp::
* Library helm-elisp-package::
* Library helm-epa::
* Library helm-eshell::
* Library helm-eval::
* Library helm-external::
* Library helm-fd::
* Library helm-files::
* Library helm-find::
* Library helm-font::
* Library helm-for-files::
* Library helm-global-bindings::
* Library helm-grep::
* Library helm-help::
* Library helm-id-utils::
* Library helm-imenu::
* Library helm-info::
* Library helm-lib::
* Library helm-locate::
* Library helm-man::
* Library helm-misc::
* Library helm-mode::
* Library helm-multi-match::
* Library helm-net::
* Library helm-occur::
* Library helm-regexp::
* Library helm-ring::
* Library helm-semantic::
* Library helm-shell::
* Library helm-source::
* Library helm-sys::
* Library helm-tags::
* Library helm-types::
* Library helm-utils::
* Library helm-x-files::
@end menu

@node Library helm
@section Library: helm

@menu
* Modes in library @code{helm}::
* Commands in keymap @code{helm-map}::
* Commands in library @code{helm} (excludes keymaps)::
* Options in library @samp{helm}::
* Hooks in library @samp{helm}::
@end menu

@node Modes in library @code{helm}
@subsection Modes in library @code{helm}

@anchor{other-mode-p}
@subsubheading other-mode-p

@table @asis
@item @code{helm-major-mode}
@findex helm-major-mode

[INTERNAL] Provide major-mode name in Helm buffers.
Unuseful when used outside Helm, don't use it.

This mode runs the hook @code{helm-major-mode-hook}, as the final or
penultimate step during initialization.

\@{helm-major-mode-map@}
@end table

@anchor{minor-mode-p}
@subsubheading minor-mode-p

@table @asis
@item @code{helm--minor-mode}
@findex helm--minor-mode

(helm--minor-mode &optional ARG)

[INTERNAL] Enable keymap in Helm minibuffer.
Since this mode has no effect when run outside of Helm context,
please don't use it outside of Helm.

If called interactively, toggle @code{Helm- minor mode}.  If the
prefix argument is positive, enable the mode, and if it is zero
or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\@{helm-map@}

@item @code{helm--remap-mouse-mode}
@findex helm--remap-mouse-mode

(helm--remap-mouse-mode &optional ARG)

[INTERNAL] Prevent escaping helm minibuffer with mouse clicks.
Do nothing when used outside of helm context.

If called interactively, toggle @code{Helm--Remap-Mouse mode}.  If the
prefix argument is positive, enable the mode, and if it is zero
or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.

WARNING: Do not use this mode yourself, it is internal to Helm.

@item @code{helm-autoresize-mode}
@findex helm-autoresize-mode

(helm-autoresize-mode &optional ARG)

Auto resize helm window when enabled.
Helm window is re-sized according to @code{helm-autoresize-max-height}
and @code{helm-autoresize-min-height}.  Note that when this mode is
enabled, Helm behaves as if @code{helm-always-two-windows} is enabled.

If called interactively, toggle @code{Helm-Autoresize mode}.  If the
prefix argument is positive, enable the mode, and if it is zero
or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.

See @code{fit-window-to-buffer} for more infos.
@end table

@node Commands in keymap @code{helm-map}
@subsection Commands in keymap @code{helm-map}

@anchor{Most Important}
@subsubheading Most Important

@table @asis
@item @kbd{C-g} (@code{helm-keyboard-quit})
@findex helm-keyboard-quit @r{(helm-map)}

@kindex C-g @r{(helm-map)}

Quit minibuffer in helm.
If action buffer is displayed, kill it.

@item @kbd{@key{RET}} (@code{helm-maybe-exit-minibuffer})
@findex helm-maybe-exit-minibuffer @r{(helm-map)}

@kindex RET @r{(helm-map)}

@item @kbd{C-j} (@code{helm-execute-persistent-action})
@findex helm-execute-persistent-action @r{(helm-map)}

@kindex C-j @r{(helm-map)}

(helm-execute-persistent-action &optional ATTR SPLIT)

Perform the associated action ATTR without quitting helm.

Arg ATTR default will be @code{persistent-action} or
@code{persistent-action-if} if unspecified depending on what's found
in source, but it can be anything else.
In this case you have to add this new attribute to your source.
See @code{persistent-action} and @code{persistent-action-if} slot
documentation in @code{helm-source}.

When @code{helm-full-frame} is non-nil, and @code{helm-buffer} is displayed
in only one window, the helm window is split to display
@code{helm-select-persistent-action-window} in other window to
maintain visibility.  The argument SPLIT can be used to force
splitting inconditionally, it is unused actually.

@item @kbd{@key{TAB}} (@code{helm-select-action})
@findex helm-select-action @r{(helm-map)}

@kindex TAB @r{(helm-map)}

Select an action for the currently selected candidate.
If action buffer is selected, back to the Helm buffer.

@item @kbd{C-x 1} (@code{helm-execute-selection-action-at-nth-+1})
@findex helm-execute-selection-action-at-nth-+1 @r{(helm-map)}

@kindex C-x 1 @r{(helm-map)}

@item @kbd{C-c 1} (@code{helm-execute-selection-action-at-nth-+1})
@findex helm-execute-selection-action-at-nth-+1 @r{(helm-map)}

@kindex C-c 1 @r{(helm-map)}

@item @kbd{C-x 2} (@code{helm-execute-selection-action-at-nth-+2})
@findex helm-execute-selection-action-at-nth-+2 @r{(helm-map)}

@kindex C-x 2 @r{(helm-map)}

@item @kbd{C-c 2} (@code{helm-execute-selection-action-at-nth-+2})
@findex helm-execute-selection-action-at-nth-+2 @r{(helm-map)}

@kindex C-c 2 @r{(helm-map)}

@item @kbd{C-x 3} (@code{helm-execute-selection-action-at-nth-+3})
@findex helm-execute-selection-action-at-nth-+3 @r{(helm-map)}

@kindex C-x 3 @r{(helm-map)}

@item @kbd{C-c 3} (@code{helm-execute-selection-action-at-nth-+3})
@findex helm-execute-selection-action-at-nth-+3 @r{(helm-map)}

@kindex C-c 3 @r{(helm-map)}

@item @kbd{C-x 4} (@code{helm-execute-selection-action-at-nth-+4})
@findex helm-execute-selection-action-at-nth-+4 @r{(helm-map)}

@kindex C-x 4 @r{(helm-map)}

@item @kbd{C-c 4} (@code{helm-execute-selection-action-at-nth-+4})
@findex helm-execute-selection-action-at-nth-+4 @r{(helm-map)}

@kindex C-c 4 @r{(helm-map)}

@item @kbd{C-x 5} (@code{helm-execute-selection-action-at-nth-+5})
@findex helm-execute-selection-action-at-nth-+5 @r{(helm-map)}

@kindex C-x 5 @r{(helm-map)}

@item @kbd{C-c 5} (@code{helm-execute-selection-action-at-nth-+5})
@findex helm-execute-selection-action-at-nth-+5 @r{(helm-map)}

@kindex C-c 5 @r{(helm-map)}

@item @kbd{C-x 6} (@code{helm-execute-selection-action-at-nth-+6})
@findex helm-execute-selection-action-at-nth-+6 @r{(helm-map)}

@kindex C-x 6 @r{(helm-map)}

@item @kbd{C-c 6} (@code{helm-execute-selection-action-at-nth-+6})
@findex helm-execute-selection-action-at-nth-+6 @r{(helm-map)}

@kindex C-c 6 @r{(helm-map)}

@item @kbd{C-x 7} (@code{helm-execute-selection-action-at-nth-+7})
@findex helm-execute-selection-action-at-nth-+7 @r{(helm-map)}

@kindex C-x 7 @r{(helm-map)}

@item @kbd{C-c 7} (@code{helm-execute-selection-action-at-nth-+7})
@findex helm-execute-selection-action-at-nth-+7 @r{(helm-map)}

@kindex C-c 7 @r{(helm-map)}

@item @kbd{C-x 8} (@code{helm-execute-selection-action-at-nth-+8})
@findex helm-execute-selection-action-at-nth-+8 @r{(helm-map)}

@kindex C-x 8 @r{(helm-map)}

@item @kbd{C-c 8} (@code{helm-execute-selection-action-at-nth-+8})
@findex helm-execute-selection-action-at-nth-+8 @r{(helm-map)}

@kindex C-c 8 @r{(helm-map)}

@item @kbd{C-x 9} (@code{helm-execute-selection-action-at-nth-+9})
@findex helm-execute-selection-action-at-nth-+9 @r{(helm-map)}

@kindex C-x 9 @r{(helm-map)}

@item @kbd{C-c 9} (@code{helm-execute-selection-action-at-nth-+9})
@findex helm-execute-selection-action-at-nth-+9 @r{(helm-map)}

@kindex C-c 9 @r{(helm-map)}

@item @kbd{C-<tab>}

@item @kbd{C-s}

@item @kbd{C-h h}

@item @kbd{C-h C-h}

@item @kbd{M-s} (@code{undefined})
@findex undefined @r{(helm-map)}

@kindex C-<tab> @r{(helm-map)}
@kindex C-s @r{(helm-map)}
@kindex C-h h @r{(helm-map)}
@kindex C-h C-h @r{(helm-map)}
@kindex M-s @r{(helm-map)}

Beep to tell the user this binding is undefined.

@item @kbd{C-k} (@code{helm-delete-minibuffer-contents})
@findex helm-delete-minibuffer-contents @r{(helm-map)}

@kindex C-k @r{(helm-map)}

(helm-delete-minibuffer-contents &optional ARG)

Delete minibuffer contents.
When @code{helm-delete-minibuffer-contents-from-point} is non-nil,
delete minibuffer contents from point instead of deleting all.
With a prefix arg reverse this behaviour.  When at the end of
minibuffer, delete all.

@item @kbd{<help> m}

@item @kbd{C-h m}

@item @kbd{C-c ?} (@code{helm-help})
@findex helm-help @r{(helm-map)}

@kindex <help> m @r{(helm-map)}
@kindex C-h m @r{(helm-map)}
@kindex C-c ? @r{(helm-map)}

Generate Helm's help according to @code{help-message} attribute.

If @code{helm-buffer} is empty, provide completions on @code{helm-sources}
to choose its local documentation.
If source doesn't have any @code{help-message} attribute, a generic
message explaining this is added instead.
The global @code{helm-help-message} is always added after this local
help.

@item @kbd{C-h c} (@code{helm-customize-group})
@findex helm-customize-group @r{(helm-map)}

@kindex C-h c @r{(helm-map)}

Jump to customization group of current source.

Default to Helm group when group is not defined in source.
@end table

@anchor{Minor Modes}
@subsubheading Minor Modes

@table @asis
@item @kbd{C-c l} (@code{helm-display-line-numbers-mode})
@findex helm-display-line-numbers-mode @r{(helm-map)}

@kindex C-c l @r{(helm-map)}

(helm-display-line-numbers-mode &optional ARG)

Toggle display of line numbers in current Helm buffer.

If called interactively, toggle @code{Helm-Display-Line-Numbers mode}.
If the prefix argument is positive, enable the mode, and if it is
zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.

@item @kbd{C-c C-f} (@code{helm-follow-mode})
@findex helm-follow-mode @r{(helm-map)}

@kindex C-c C-f @r{(helm-map)}

(helm-follow-mode &optional ARG)

Execute persistent action every time the cursor is moved.

This mode is source local, i.e. It applies on current source only.
\<helm-map>
This mode can be enabled or disabled interactively at anytime during
a helm session with \[helm-follow-mode].

When enabling interactively @code{helm-follow-mode} in a source, you
can keep it enabled for next Emacs sessions by setting
@code{helm-follow-mode-persistent} to a non-nil value.

When @code{helm-follow-mode} is called with a prefix arg and
@code{helm-follow-mode-persistent} is non-nil @code{helm-follow-mode} will
be persistent only for this Emacs session, but not for the next
Emacs sessions, i.e. the current source will not be saved to
@code{helm-source-names-using-follow}.

A prefix arg with @code{helm-follow-mode} already enabled will have no
effect.

Note that you can use instead of this mode the commands
@code{helm-follow-action-forward} and @code{helm-follow-action-backward} at
anytime in all Helm sessions.

They are bound by default to \[helm-follow-action-forward] and
\[helm-follow-action-backward].
@end table

@anchor{Control what is displayed}
@subsubheading Control what is displayed

@table @asis
@item @kbd{C-c >} (@code{helm-toggle-truncate-line})
@findex helm-toggle-truncate-line @r{(helm-map)}

@kindex C-c > @r{(helm-map)}

Toggle @code{truncate-lines} value in @code{helm-buffer}

@item @kbd{C-M-e} (@code{helm-display-all-sources})
@findex helm-display-all-sources @r{(helm-map)}

@kindex C-M-e @r{(helm-map)}

Display all sources previously hidden by @code{helm-set-source-filter}.

@item @kbd{C-M-a} (@code{helm-show-all-candidates-in-source})
@findex helm-show-all-candidates-in-source @r{(helm-map)}

@kindex C-M-a @r{(helm-map)}

(helm-show-all-candidates-in-source ARG)

Toggle all or only candidate-number-limit cands in current source.
With a numeric prefix arg show only the ARG number of candidates.
The prefix arg has no effect when toggling to only
candidate-number-limit.
@end table

@anchor{Control the layout}
@subsubheading Control the layout

@table @asis
@item @kbd{C-c %} (@code{helm-exchange-minibuffer-and-header-line})
@findex helm-exchange-minibuffer-and-header-line @r{(helm-map)}

@kindex C-c % @r{(helm-map)}

Display minibuffer in header-line and vice versa for current Helm session.

This is a toggle command.

@item @kbd{C-@{} (@code{helm-enlarge-window})
@findex helm-enlarge-window @r{(helm-map)}

@kindex C-@{ @r{(helm-map)}

Enlarge helm window.

@item @kbd{C-@}} (@code{helm-narrow-window})
@findex helm-narrow-window @r{(helm-map)}

@kindex C-@} @r{(helm-map)}

Narrow helm window.

@item @kbd{C-c -} (@code{helm-swap-windows})
@findex helm-swap-windows @r{(helm-map)}

@kindex C-c - @r{(helm-map)}

Swap window holding @code{helm-buffer} with other window.

@item @kbd{C-c _} (@code{helm-toggle-full-frame})
@findex helm-toggle-full-frame @r{(helm-map)}

@kindex C-c _ @r{(helm-map)}

(helm-toggle-full-frame &optional ARG)

Toggle @code{helm-buffer} full-frame view.

@item @kbd{C-t} (@code{helm-toggle-resplit-and-swap-windows})
@findex helm-toggle-resplit-and-swap-windows @r{(helm-map)}

@kindex C-t @r{(helm-map)}

Multi key command to re-split and swap Helm window.
First call runs @code{helm-toggle-resplit-window},
and second call within 1s runs @code{helm-swap-windows}.
@end table

@anchor{Act on Other Window}
@subsubheading Act on Other Window

@table @asis
@item @kbd{C-l} (@code{helm-recenter-top-bottom-other-window})
@findex helm-recenter-top-bottom-other-window @r{(helm-map)}

@kindex C-l @r{(helm-map)}

(helm-recenter-top-bottom-other-window &optional ARG)

Run @code{recenter-top-bottom} in other window.
Meaning of prefix ARG is the same as in @code{recenter-top-bottom}.

@item @kbd{C-M-l} (@code{helm-reposition-window-other-window})
@findex helm-reposition-window-other-window @r{(helm-map)}

@kindex C-M-l @r{(helm-map)}

(helm-reposition-window-other-window &optional ARG)

Run @code{reposition-window} in other window.
Meaning of prefix ARG is the same as in @code{reposition-window}.

@item @kbd{C-M-<down>}

@item @kbd{M-<next>}

@item @kbd{C-M-v} (@code{helm-scroll-other-window})
@findex helm-scroll-other-window @r{(helm-map)}

@kindex C-M-<down> @r{(helm-map)}
@kindex M-<next> @r{(helm-map)}
@kindex C-M-v @r{(helm-map)}

(helm-scroll-other-window &optional ARG)

Scroll other window upward ARG many lines.
When arg is not provided scroll @code{helm-scroll-amount} lines.
See @code{scroll-other-window}.

@item @kbd{C-M-<up>}

@item @kbd{M-<prior>}

@item @kbd{C-M-S-v}

@item @kbd{C-M-y} (@code{helm-scroll-other-window-down})
@findex helm-scroll-other-window-down @r{(helm-map)}

@kindex C-M-<up> @r{(helm-map)}
@kindex M-<prior> @r{(helm-map)}
@kindex C-M-S-v @r{(helm-map)}
@kindex C-M-y @r{(helm-map)}

(helm-scroll-other-window-down &optional ARG)

Scroll other window downward ARG many lines.
When arg is not provided scroll @code{helm-scroll-amount} lines.
See @code{scroll-other-window-down}.
@end table

@anchor{Navigate}
@subsubheading Navigate



@itemize
@item
@anchor{Move by line}Move by line


@table @asis
@item @kbd{C-p}

@item @kbd{<up>} (@code{helm-previous-line})
@findex helm-previous-line @r{(helm-map)}

@kindex C-p @r{(helm-map)}
@kindex <up> @r{(helm-map)}

(helm-previous-line &optional ARG)

Move selection to the ARG previous line(s).
Same behavior as @code{helm-next-line} when called with a numeric
prefix arg.

@item @kbd{C-n}

@item @kbd{<down>} (@code{helm-next-line})
@findex helm-next-line @r{(helm-map)}

@kindex C-n @r{(helm-map)}
@kindex <down> @r{(helm-map)}

(helm-next-line &optional ARG)

Move selection to the next ARG line(s).
When numeric prefix arg is > than the number of candidates, then
move to the last candidate of current source (i.e. don't move to
next source).
@end table

@item
@anchor{Move by page}Move by page


@table @asis
@item @kbd{<prior>}

@item @kbd{M-v} (@code{helm-previous-page})
@findex helm-previous-page @r{(helm-map)}

@kindex <prior> @r{(helm-map)}
@kindex M-v @r{(helm-map)}

Move selection back with a pageful.

@item @kbd{C-v}

@item @kbd{<next>} (@code{helm-next-page})
@findex helm-next-page @r{(helm-map)}

@kindex C-v @r{(helm-map)}
@kindex <next> @r{(helm-map)}

Move selection forward with a pageful.
@end table

@item
@anchor{Move by source}Move by source


@table @asis
@item @kbd{<left>}

@item @kbd{M-o} (@code{helm-previous-source})
@findex helm-previous-source @r{(helm-map)}

@kindex <left> @r{(helm-map)}
@kindex M-o @r{(helm-map)}

Move selection to the previous source.

@item @kbd{<right>}

@item @kbd{C-o} (@code{helm-next-source})
@findex helm-next-source @r{(helm-map)}

@kindex <right> @r{(helm-map)}
@kindex C-o @r{(helm-map)}

Move selection to the next source.
@end table

@item
@anchor{Move to beginning or end of buffer}Move to beginning or end of buffer


@table @asis
@item @kbd{M-<} (@code{helm-beginning-of-buffer})
@findex helm-beginning-of-buffer @r{(helm-map)}

@kindex M-< @r{(helm-map)}

Move selection at the top.

@item @kbd{M->} (@code{helm-end-of-buffer})
@findex helm-end-of-buffer @r{(helm-map)}

@kindex M-> @r{(helm-map)}

Move selection at the bottom.
@end table

@item
@anchor{Move by mark}Move by mark


@table @asis
@item @kbd{M-(} (@code{helm-prev-visible-mark})
@findex helm-prev-visible-mark @r{(helm-map)}

@kindex M-( @r{(helm-map)}

Move previous helm visible mark.

@item @kbd{M-)} (@code{helm-next-visible-mark})
@findex helm-next-visible-mark @r{(helm-map)}

@kindex M-) @r{(helm-map)}

(helm-next-visible-mark &optional PREV)

Move next Helm visible mark.
If PREV is non-nil move to precedent.
@end table
@end itemize

@anchor{Mark}
@subsubheading Mark

@table @asis
@item @kbd{M-a} (@code{helm-mark-all})
@findex helm-mark-all @r{(helm-map)}

@kindex M-a @r{(helm-map)}

(helm-mark-all &optional ALL)

Mark all visible unmarked candidates in current source.

With a prefix arg mark all visible unmarked candidates in all
sources.

@item @kbd{M-U} (@code{helm-unmark-all})
@findex helm-unmark-all @r{(helm-map)}

@kindex M-U @r{(helm-map)}

Unmark all candidates in all sources of current helm session.

@item @kbd{C-@@} (@code{helm-toggle-visible-mark})
@findex helm-toggle-visible-mark @r{(helm-map)}

@kindex C-@ @r{(helm-map)}

(helm-toggle-visible-mark ARG)

Toggle Helm visible mark at point ARG times.
If ARG is negative toggle backward.

@item @kbd{M-m} (@code{helm-toggle-all-marks})
@findex helm-toggle-all-marks @r{(helm-map)}

@kindex M-m @r{(helm-map)}

(helm-toggle-all-marks &optional ALL)

Toggle all marks.

Mark all visible candidates of current source or unmark all
candidates visible or invisible in all sources of current Helm
session.

With a prefix argument mark all candidates in all sources.

@item @kbd{M-@key{SPC}} (@code{helm-toggle-visible-mark-backward})
@findex helm-toggle-visible-mark-backward @r{(helm-map)}

@kindex M-SPC @r{(helm-map)}

@item @kbd{C-@key{SPC}} (@code{helm-toggle-visible-mark-forward})
@findex helm-toggle-visible-mark-forward @r{(helm-map)}

@kindex C-SPC @r{(helm-map)}
@end table

@anchor{Act on Selected Candidates}
@subsubheading Act on Selected Candidates

@table @asis
@item @kbd{C-c @key{TAB}} (@code{helm-copy-to-buffer})
@findex helm-copy-to-buffer @r{(helm-map)}

@kindex C-c TAB @r{(helm-map)}

Copy selection or marked candidates to @code{helm-current-buffer}.
Note that the real values of candidates are copied and not the
display values.

@item @kbd{C-c C-k} (@code{helm-kill-selection-and-quit})
@findex helm-kill-selection-and-quit @r{(helm-map)}

@kindex C-c C-k @r{(helm-map)}

(helm-kill-selection-and-quit ARG)

Store display value of current selection to kill ring.
With a prefix arg use real value of current selection.
Display value is shown in @code{helm-buffer} and real value is used to
perform actions.

@item @kbd{C-c C-y} (@code{helm-yank-selection})
@findex helm-yank-selection @r{(helm-map)}

@kindex C-c C-y @r{(helm-map)}

(helm-yank-selection ARG)

Set minibuffer contents to current display selection.
With a prefix arg set to real value of current selection.
@end table

@anchor{Move and Act}
@subsubheading Move and Act

@table @asis
@item @kbd{C-<up>} (@code{helm-follow-action-backward})
@findex helm-follow-action-backward @r{(helm-map)}

@kindex C-<up> @r{(helm-map)}

Go to previous line and execute persistent action.

@item @kbd{C-<down>} (@code{helm-follow-action-forward})
@findex helm-follow-action-forward @r{(helm-map)}

@kindex C-<down> @r{(helm-map)}

Go to next line and execute persistent action.
@end table

@anchor{Resume Previous Session (after quitting)}
@subsubheading Resume Previous Session (after quitting)

@table @asis
@item @kbd{C-x b} (@code{helm-resume-previous-session-after-quit})
@findex helm-resume-previous-session-after-quit @r{(helm-map)}

@kindex C-x b @r{(helm-map)}

Resume previous Helm session within a running Helm.
@end table

@anchor{Suspend Update of Candidates}
@subsubheading Suspend Update of Candidates

@table @asis
@item @kbd{C-!} (@code{helm-toggle-suspend-update})
@findex helm-toggle-suspend-update @r{(helm-map)}

@kindex C-! @r{(helm-map)}

Enable or disable display update in helm.
This can be useful for example for quietly writing a complex
regexp without Helm constantly updating.
@end table

@anchor{Helm Refresh}
@subsubheading Helm Refresh

@table @asis
@item @kbd{C-c C-u} (@code{helm-refresh})
@findex helm-refresh @r{(helm-map)}

@kindex C-c C-u @r{(helm-map)}

Force recalculation and update of candidates.
@end table

@anchor{Find file after Quit}
@subsubheading Find file after Quit

@table @asis
@item @kbd{C-x C-f} (@code{helm-quit-and-find-file})
@findex helm-quit-and-find-file @r{(helm-map)}

@kindex C-x C-f @r{(helm-map)}

Drop into @code{helm-find-files} from @code{helm}.
If current selection is a buffer or a file, @code{helm-find-files}
from its directory.
@end table

@anchor{List Buffers after Quitting}
@subsubheading List Buffers after Quitting

@table @asis
@item @kbd{C-x C-b} (@code{helm-resume-list-buffers-after-quit})
@findex helm-resume-list-buffers-after-quit @r{(helm-map)}

@kindex C-x C-b @r{(helm-map)}

List Helm buffers that can be resumed within a running Helm.
@end table

@anchor{Debug Helm}
@subsubheading Debug Helm

@table @asis
@item @kbd{C-h C-d} (@code{helm-enable-or-switch-to-debug})
@findex helm-enable-or-switch-to-debug @r{(helm-map)}

@kindex C-h C-d @r{(helm-map)}

First hit enable helm debugging, second hit switch to debug buffer.
@end table

@node Commands in library @code{helm} (excludes keymaps)
@subsection Commands in library @code{helm} (excludes keymaps)

@anchor{Debug}
@subsubheading Debug

@table @asis
@item @code{helm-debug-open-last-log}
@findex helm-debug-open-last-log

Open Helm log file or buffer of last Helm session.

@item @code{helm-debug-output}
@findex helm-debug-output

Show all Helm-related variables at this time.
@end table

@anchor{Select}
@subsubheading Select

@table @asis
@item @code{helm-menu-select-action}
@findex helm-menu-select-action

(helm-menu-select-action EVENT)

Popup action menu from mouse-3.

@item @code{helm-mouse-select-candidate}
@findex helm-mouse-select-candidate

(helm-mouse-select-candidate EVENT)
@end table

@anchor{Resume}
@subsubheading Resume

@table @asis
@item @code{helm-cycle-resume}
@findex helm-cycle-resume

Cycle in @code{helm-buffers} list and resume when waiting more than 1.2s.

@item @kbd{C-x c b} (@code{helm-resume})
@findex helm-resume

@kindex C-x c b

(helm-resume ARG)

Resume a previous Helm session.
Call with a prefix arg to choose among existing Helm
buffers (sessions).  When calling from Lisp, specify a
@code{buffer-name} as a string with ARG@.

@item @code{helm-run-cycle-resume}
@findex helm-run-cycle-resume

Same as @code{helm-cycle-resume} but intended to be called only from Helm.
@end table

@anchor{uncategorized}
@subsubheading uncategorized

@table @asis
@item @code{helm-configuration}
@findex helm-configuration

Customize Helm.

@item @code{helm-confirm-and-exit-minibuffer}
@findex helm-confirm-and-exit-minibuffer

Maybe ask for confirmation when exiting helm.
It is similar to @code{minibuffer-complete-and-exit} adapted to Helm.
If @code{minibuffer-completion-confirm} value is 'confirm, send
minibuffer confirm message and exit on next hit.  If
@code{minibuffer-completion-confirm} value is t, don't exit and send
message 'no match'.

@item @code{helm-delete-backward-no-update}
@findex helm-delete-backward-no-update

(helm-delete-backward-no-update ARG)

Disable update and delete ARG chars backward.
Update is reenabled when idle 1s.

@item @code{helm-toggle-resplit-window}
@findex helm-toggle-resplit-window

Toggle resplit helm window, vertically or horizontally.
@end table

@node Options in library @samp{helm}
@subsection Options in library @samp{helm}

@anchor{Min}
@subsubheading Min

@table @asis
@item @code{helm-tramp-connection-min-time-diff}
@vindex helm-tramp-connection-min-time-diff

@strong{Standard Value}: 5

Value of @code{tramp-connection-min-time-diff} for Helm remote processes.
If set to zero Helm remote processes are not delayed.

Setting this to a value less than 5 or disabling it with a zero
value is risky, however on Emacs versions starting at 24.5 it
seems it is now possible to disable it.

Anyway at any time in Helm you can suspend your processes while
typing by hitting  @code{C-!}.

Only async sources than use a sentinel calling
@code{helm-process-deferred-sentinel-hook} are affected by this.
@end table

@anchor{Windows}
@subsubheading Windows

@table @asis
@item @code{helm-always-two-windows}
@vindex helm-always-two-windows

@strong{Standard Value}: nil

When non-nil Helm uses two windows in this frame.

I.e. @code{helm-buffer} in one window and @code{helm-current-buffer}
in the other.

Note: this has no effect when @code{helm-split-window-inside-p} is
non-nil, or when @code{helm-split-window-default-side} is set to
’same.

When @code{helm-autoresize-mode} is enabled, setting this to nil
will have no effect.

Also when non-nil it overrides the effect of
@code{helm-split-window-default-side} set to @code{other}.
@end table

@anchor{Functions}
@subsubheading Functions

@table @asis
@item @code{helm-save-configuration-functions}
@vindex helm-save-configuration-functions

@strong{Standard Value}:

@lisp
(set-window-configuration . current-window-configuration)
@end lisp

Functions used to restore or save configurations for frames and windows.
Specified as a pair of functions, where car is the restore
function and cdr is the save function.

To save and restore frame configuration, set this variable to
’(set-frame-configuration . current-frame-configuration)

NOTE: This may not work properly with own-frame minibuffer
settings.  Older versions saves/restores frame configuration, but
the default has changed now to avoid flickering.
@end table

@anchor{Candidate}
@subsubheading Candidate

@table @asis
@item @code{helm-candidate-number-limit}
@vindex helm-candidate-number-limit

@strong{Standard Value}: 100

Global limit for number of candidates displayed.
When the pattern is empty, the number of candidates shown will be
as set here instead of the entire list, which may be hundreds or
thousands.  Since narrowing and filtering rapidly reduces
available candidates, having a small list will keep the interface
responsive.

Set this value to nil for no limit.

@item @code{helm-candidate-separator}
@vindex helm-candidate-separator

@strong{Standard Value}: ――――――――――――――――――――――――――――――――――――――

Candidates separator of @code{multiline} source.
@end table

@anchor{Minibuffer}
@subsubheading Minibuffer

@table @asis
@item @code{helm-delete-minibuffer-contents-from-point}
@vindex helm-delete-minibuffer-contents-from-point

@strong{Standard Value}: t

When non-nil, @code{helm-delete-minibuffer-contents} deletes region from @code{point}.
Otherwise it deletes @code{minibuffer-contents}.
See documentation for @code{helm-delete-minibuffer-contents}.

@item @code{helm-prevent-escaping-from-minibuffer}
@vindex helm-prevent-escaping-from-minibuffer

@strong{Standard Value}: t

Prevent escaping from minibuffer with @code{other-window} during the Helm session.
@end table

@anchor{Width}
@subsubheading Width

@table @asis
@item @code{helm-left-margin-width}
@vindex helm-left-margin-width

@strong{Standard Value}: 0

@code{left-margin-width} value for the @code{helm-buffer}.
@end table

@anchor{Delay}
@subsubheading Delay

@table @asis
@item @code{helm-cycle-resume-delay}
@vindex helm-cycle-resume-delay

@strong{Standard Value}: 1.0

Delay used before resuming in @code{helm-run-cycle-resume}.

@item @code{helm-exit-idle-delay}
@vindex helm-exit-idle-delay

@strong{Standard Value}: 0

Idle time before exiting minibuffer while Helm is updating.
Has no affect when helm-buffer is up to date (i.e. exit without
delay in this condition).
@end table

@anchor{Mouse}
@subsubheading Mouse

@table @asis
@item @code{helm-allow-mouse}
@vindex helm-allow-mouse

@strong{Standard Value}: nil

Allow mouse usage during the Helm session when non-nil.

Note that this also allows moving out of minibuffer when clicking
outside of @code{helm-buffer}, so it is up to you to get back to Helm
by clicking back in @code{helm-buffer} or minibuffer.
@end table

@anchor{Source}
@subsubheading Source

@table @asis
@item @code{helm-source-names-using-follow}
@vindex helm-source-names-using-follow

@strong{Standard Value}: nil

A list of source names to have follow enabled.
This list of source names will be used only
when @code{helm-follow-mode-persistent} is non-nil.

You don’t have to customize this yourself unless you really want
and know what you are doing, instead just set
@code{helm-follow-mode-persistent} to non-nil and as soon as you turn
on or off @code{helm-follow-mode} (C-c C-f) in a source, Helm will
save or remove source name in this variable.
@end table

@anchor{Search}
@subsubheading Search

@table @asis
@item @code{helm-case-fold-search}
@vindex helm-case-fold-search

@strong{Standard Value}: smart

Adds ’smart’ option to @code{case-fold-search}.
Smart option ignores case for searches as long as there are no
upper case characters in the pattern.

Use nil or t to turn off smart behavior and use
@code{case-fold-search} behavior.

Default is smart.

NOTE: Case fold search has no effect when searching asynchronous
sources, which relies on customized features implemented directly
into their execution process. See helm-grep.el for an example.

@item @code{helm-file-name-case-fold-search}
@vindex helm-file-name-case-fold-search

@strong{Standard Value}: smart

Local setting of @code{helm-case-fold-search} for reading filenames.

See @code{helm-case-fold-search} for more info.
@end table

@anchor{Action}
@subsubheading Action

@table @asis
@item @code{helm-action-at-nth-negative-prefix-key}
@vindex helm-action-at-nth-negative-prefix-key

@strong{Standard Value}: C-x %d

The prefix key to execute default action on nth <-n> candidate.

This is a format spec where %d will be replaced by the candidate
number.

NOTE: @code{setq} have no effect until you restart Emacs, use
customize for immediate effect.

@item @code{helm-action-at-nth-positive-prefix-key}
@vindex helm-action-at-nth-positive-prefix-key

@strong{Standard Value}: C-c %d

The prefix key to execute default action on nth <+n> candidate.

This is a format spec where %d will be replaced by the candidate
number.

NOTE: @code{setq} have no effect until you restart Emacs, use
customize for immediate effect.
@end table

@anchor{Fuzzy}
@subsubheading Fuzzy

@table @asis
@item @code{helm-fuzzy-match-fn}
@vindex helm-fuzzy-match-fn

@strong{Standard Value}: helm-fuzzy-match

The function for fuzzy matching in @code{helm-source-sync} based sources.

@item @code{helm-fuzzy-matching-highlight-fn}
@vindex helm-fuzzy-matching-highlight-fn

@strong{Standard Value}: helm-fuzzy-default-highlight-match

The function to highlight fuzzy matches.

@item @code{helm-fuzzy-search-fn}
@vindex helm-fuzzy-search-fn

@strong{Standard Value}: helm-fuzzy-search

The function for fuzzy matching in @code{helm-source-in-buffer} based sources.

@item @code{helm-fuzzy-sort-fn}
@vindex helm-fuzzy-sort-fn

@strong{Standard Value}: helm-fuzzy-matching-default-sort-fn

The sort transformer function used in fuzzy matching.
@end table

@anchor{Autoresize}
@subsubheading Autoresize

@table @asis
@item @code{helm-autoresize-max-height}
@vindex helm-autoresize-max-height

@strong{Standard Value}: 40

Specify maximum height and defaults to percent of Helm window’s frame height.

See @code{fit-window-to-buffer} for more infos.

@item @code{helm-autoresize-min-height}
@vindex helm-autoresize-min-height

@strong{Standard Value}: 10

Specify minimum height and defaults to percent of Helm window’s frame height.

If nil, @code{window-min-height} is used.
See @code{fit-window-to-buffer} for details.
@end table

@anchor{Line}
@subsubheading Line

@table @asis
@item @code{helm-header-line-space-before-prompt}
@vindex helm-header-line-space-before-prompt

@strong{Standard Value}: left-fringe

Specify the space before prompt in header-line.

This will be used when @code{helm-echo-input-in-header-line} is
non-nil.

Value can be one of the symbols ’left-fringe or ’left-margin or
an integer specifying the number of spaces before prompt.  Note
that on input longer that @code{window-width} the continuation string
will be shown on left side of window without taking care of
this.

@item @code{helm-move-to-line-cycle-in-source}
@vindex helm-move-to-line-cycle-in-source

@strong{Standard Value}: nil

Cycle to the beginning or end of the list after reaching the bottom or top.
This applies when using @code{helm-next/previous-line}.
@end table

@anchor{Input}
@subsubheading Input

@table @asis
@item @code{helm-echo-input-in-header-line}
@vindex helm-echo-input-in-header-line

@strong{Standard Value}: nil

Send current input to header-line when non-nil.

@item @code{helm-inherit-input-method}
@vindex helm-inherit-input-method

@strong{Standard Value}: t

Inherit @code{current-input-method} from @code{current-buffer} when non-nil.
The default is to enable this by default and then toggle
@code{toggle-input-method}.

@item @code{helm-input-idle-delay}
@vindex helm-input-idle-delay

@strong{Standard Value}: 0.01

Idle time before updating, specified in seconds.

@item @code{helm-input-method-verbose-flag}
@vindex helm-input-method-verbose-flag

@strong{Standard Value}: nil

The default value for @code{input-method-verbose-flag} used in Helm minibuffer.
It is nil by default, which does not turn off input method. Helm
updates and exits without interruption -- necessary for complex
methods.

If set to any other value as per @code{input-method-verbose-flag},
then use @code{C-\} to disable the @code{current-input-method} to exit or
update Helm.
@end table

@anchor{Mode}
@subsubheading Mode

@table @asis
@item @code{helm--minor-mode-hook}
@vindex helm--minor-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm--minor-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)

@item @code{helm--remap-mouse-mode-hook}
@vindex helm--remap-mouse-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm--remap-mouse-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)

@item @code{helm-autoresize-mode-hook}
@vindex helm-autoresize-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm-autoresize-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)

@item @code{helm-follow-mode-persistent}
@vindex helm-follow-mode-persistent

@strong{Standard Value}: nil

When non-nil, save last state of @code{helm-follow-mode} for the next Emacs sessions.

Each time you turn on or off @code{helm-follow-mode}, the current
source name will be stored or removed from
@code{helm-source-names-using-follow}.

Note that this may be disabled in some places where it is unsafe
to use because persistent action is changing according to
context.
@end table

@anchor{Default}
@subsubheading Default

@table @asis
@item @code{helm-sources-using-default-as-input}
@vindex helm-sources-using-default-as-input

@strong{Standard Value}:

@lisp
(helm-source-imenu helm-source-imenu-all helm-source-info-elisp helm-source-etags-select helm-source-man-pages helm-source-occur helm-source-moccur helm-source-grep-ag helm-source-grep-git helm-source-grep)
@end lisp

List of Helm sources that need to use @code{helm-maybe-use-default-as-input}.
When a source is a member of this list, default @code{thing-at-point}
will be used as input.
@end table

@anchor{Frame Use}
@subsubheading Frame Use

@table @asis
@item @code{helm-use-frame-when-more-than-two-windows}
@vindex helm-use-frame-when-more-than-two-windows

@strong{Standard Value}: nil

Display Helm buffer in frame when more than two windows.

@item @code{helm-use-undecorated-frame-option}
@vindex helm-use-undecorated-frame-option

@strong{Standard Value}: t

Display Helm frame undecorated when non nil.

This option has no effect with Emacs versions lower than 26.
@end table

@anchor{Frame Color}
@subsubheading Frame Color

@table @asis
@item @code{helm-frame-background-color}
@vindex helm-frame-background-color

@strong{Standard Value}: nil

Background color for Helm frames, a string.
Fallback to default face background when nil.

@item @code{helm-frame-foreground-color}
@vindex helm-frame-foreground-color

@strong{Standard Value}: nil

Foreground color for Helm frames, a string.
Fallback to default face foreground when nil
@end table

@anchor{Frame uncategorized}
@subsubheading Frame uncategorized

@table @asis
@item @code{helm-actions-inherit-frame-settings}
@vindex helm-actions-inherit-frame-settings

@strong{Standard Value}: t

Actions inherit Helm frame settings of initial command when non nil.

@item @code{helm-commands-using-frame}
@vindex helm-commands-using-frame

@strong{Standard Value}: nil

A list of commands where @code{helm-buffer} is displayed in a frame.

@item @code{helm-frame-alpha}
@vindex helm-frame-alpha

@strong{Standard Value}: nil

Alpha parameter for Helm frames, an integer.
Fallback to 100 when nil.

@item @code{helm-full-frame}
@vindex helm-full-frame

@strong{Standard Value}: nil

Use current window for showing candidates.
If t, then Helm does not pop-up a new window.
@end table

@anchor{Window When}
@subsubheading Window When

@table @asis
@item @code{helm-use-frame-when-dedicated-window}
@vindex helm-use-frame-when-dedicated-window

@strong{Standard Value}: nil

Display Helm buffer in frame when Helm is started from a dedicated window.
@end table

@anchor{Window Other}
@subsubheading Window Other

@table @asis
@item @code{helm-show-action-window-other-window}
@vindex helm-show-action-window-other-window

@strong{Standard Value}: nil

Show action buffer beside @code{helm-buffer} when non-nil.

If nil don’t split and replace helm-buffer by the action buffer
in same window.
If left display the action buffer at the left of helm-buffer.
If right or any other value, split at right.

Note that this may not fit well with some Helm window
configurations, so it have only effect when
@code{helm-always-two-windows} is non-nil.
@end table

@anchor{Window Split}
@subsubheading Window Split

@table @asis
@item @code{helm-reuse-last-window-split-state}
@vindex helm-reuse-last-window-split-state

@strong{Standard Value}: nil

Use the same state of window split, vertical or horizontal.
@code{helm-toggle-resplit-window} for the next helm session will use
the same window scheme as the previous session unless
@code{helm-split-window-default-side} is ’same or ’other.

@item @code{helm-split-window-default-side}
@vindex helm-split-window-default-side

@strong{Standard Value}: below

The default side to display @code{helm-buffer}.
Must be one acceptable arg for @code{split-window} SIDE,
that is @code{below}, @code{above}, @code{left} or @code{right}.

Other acceptable values are @code{same} which always displays
@code{helm-buffer} in current window and @code{other} that displays
@code{helm-buffer} below if only one window or in
@code{other-window-for-scrolling} when available.

A nil value has same effect as @code{below}. If @code{helm-full-frame} is
non-nil, it take precedence over this setting.

See also @code{helm-split-window-inside-p} and
@code{helm-always-two-windows} that take precedence over this.

NOTE: this has no effect if
@code{helm-split-window-preferred-function} is not
@code{helm-split-window-default-fn} unless this new function can
handle this.

@item @code{helm-split-window-in-side-p}
@vindex helm-split-window-in-side-p

@strong{Standard Value}: nil

Force split inside selected window when non-nil.
See also @code{helm-split-window-default-side}.

NOTE: this has no effect if
@code{helm-split-window-preferred-function} is not
@code{helm-split-window-default-fn} unless this new function can
handle this.

@item @code{helm-split-window-inside-p}
@vindex helm-split-window-inside-p

@strong{Standard Value}: nil

Force split inside selected window when non-nil.
See also @code{helm-split-window-default-side}.

NOTE: this has no effect if
@code{helm-split-window-preferred-function} is not
@code{helm-split-window-default-fn} unless this new function can
handle this.

@item @code{helm-split-window-other-side-when-one-window}
@vindex helm-split-window-other-side-when-one-window

@strong{Standard Value}: below

The default side to display @code{helm-buffer} when (1)
@code{helm-split-window-default-side} is ’other and (2)
the current frame only has one window. Possible values
are acceptable args for @code{split-window} SIDE, that is @code{below},
@code{above}, @code{left} or @code{right}.

If @code{helm-full-frame} is non-nil, it takes precedence over this
setting.

See also @code{helm-split-window-inside-p} and @code{helm-always-two-windows} that
takes precedence over this.

NOTE: this has no effect if
@code{helm-split-window-preferred-function} is not
@code{helm-split-window-default-fn} unless this new function can
handle this.

@item @code{helm-split-window-preferred-function}
@vindex helm-split-window-preferred-function

@strong{Standard Value}: helm-split-window-default-fn

Default function used for splitting window.
@end table

@anchor{Window uncategorized}
@subsubheading Window uncategorized

@table @asis
@item @code{helm-completion-window-scroll-margin}
@vindex helm-completion-window-scroll-margin

@strong{Standard Value}: 5

@code{scroll-margin} to use for Helm completion window.
Set to 0 to disable.
NOTE: This has no effect when @code{helm-display-source-at-screen-top}
id is non-nil.
@end table

@anchor{Display Line}
@subsubheading Display Line

@table @asis
@item @code{helm-display-header-line}
@vindex helm-display-header-line

@strong{Standard Value}: t

Display header-line when non nil.

@item @code{helm-display-line-numbers-mode-hook}
@vindex helm-display-line-numbers-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm-display-line-numbers-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)
@end table

@anchor{Display Function}
@subsubheading Display Function

@table @asis
@item @code{helm-display-function}
@vindex helm-display-function

@strong{Standard Value}: helm-default-display-buffer

Function used to display @code{helm-buffer}.

Local value in @code{helm-buffer} will take precedence on this default
value.  Commands that are in @code{helm-commands-using-frame} will have
@code{helm-buffer} displayed in frame, @code{helm-display-function} being
ignored.
If no local value is found and current command is not one of
@code{helm-commands-using-frame} use this default value.
The function in charge of deciding which value use is
@code{helm-resolve-display-function}.

To set it locally to @code{helm-buffer} in Helm sources use
@code{helm-set-local-variable} in init function or use
:display-function slot in @code{helm} call.
@end table

@anchor{Display Default}
@subsubheading Display Default

@table @asis
@item @code{helm-default-prompt-display-function}
@vindex helm-default-prompt-display-function

@strong{Standard Value}: helm-set-default-prompt-display

The function to use to set face of fake cursor in header-line.
@end table

@anchor{Display Buffer Width}
@subsubheading Display Buffer Width

@table @asis
@item @code{helm-display-buffer-width}
@vindex helm-display-buffer-width

@strong{Standard Value}: 72

Frame width when displaying helm-buffer in own frame.
@end table

@anchor{Display Buffer Height}
@subsubheading Display Buffer Height

@table @asis
@item @code{helm-display-buffer-height}
@vindex helm-display-buffer-height

@strong{Standard Value}: 20

Frame height when displaying helm-buffer in own frame.
@end table

@anchor{Display Buffer Default}
@subsubheading Display Buffer Default

@table @asis
@item @code{helm-default-display-buffer-alist}
@vindex helm-default-display-buffer-alist

@strong{Standard Value}: nil

Additional alist to pass to @code{display-buffer} action.
See (info ``(elisp) Action Alists for Buffer Display'').

It has no effect when @code{helm-always-two-windows} is non-nil and
may override other settings like @code{helm-split-window-inside-p}.
Note that window-height and window-width have to be configured in
@code{helm-display-buffer-height} and @code{helm-display-buffer-width}.

@item @code{helm-default-display-buffer-functions}
@vindex helm-default-display-buffer-functions

@strong{Standard Value}: nil

Action functions to pass to @code{display-buffer}.
See (info ``(elisp) Action Functions for Buffer Display'').

It has no effect when @code{helm-always-two-windows} is non-nil and
may override other settings like @code{helm-split-window-inside-p}.

@item @code{helm-display-buffer-default-height}
@vindex helm-display-buffer-default-height

@strong{Standard Value}: nil

Initial height of @code{helm-buffer}, specified as an integer or a function.

The function should take one arg and be responsible for re-sizing
the window; function’s return value is ignored.  Note that this
has no effect when the split is vertical.  See @code{display-buffer}
for more info.

@item @code{helm-display-buffer-default-width}
@vindex helm-display-buffer-default-width

@strong{Standard Value}: nil

Initial width of @code{helm-buffer}, specified as an integer or a function.

The function should take one arg and be responsible for re-sizing
the window; function’s return value is ignored.  Note that this
have no effect when the split is horizontal.  See @code{display-buffer}
for more info.
@end table

@anchor{Display Buffer uncategorized}
@subsubheading Display Buffer uncategorized

@table @asis
@item @code{helm-display-buffer-reuse-frame}
@vindex helm-display-buffer-reuse-frame

@strong{Standard Value}: nil

When non nil Helm frame is not deleted and reused in next sessions.

This was used to workaround a bug in Emacs where frames where
popping up slowly, now that the bug have been fixed upstream
(emacs-27) probably you don’t want to use this any more.  On
emacs-26 set @code{x-wait-for-event-timeout} to nil to have your
frames popping up fast.
@end table

@anchor{Display uncategorized}
@subsubheading Display uncategorized

@table @asis
@item @code{helm-display-source-at-screen-top}
@vindex helm-display-source-at-screen-top

@strong{Standard Value}: t

Display candidates at the top of screen.
This happens with @code{helm-next-source} and @code{helm-previous-source}.
NOTE: When non-nil (default), disable
@code{helm-completion-window-scroll-margin}.
@end table

@anchor{minor-mode-p (1)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm--remap-mouse-mode}
@vindex helm--remap-mouse-mode

@strong{Standard Value}: nil

(helm--remap-mouse-mode &optional ARG)

[INTERNAL] Prevent escaping helm minibuffer with mouse clicks.
Do nothing when used outside of helm context.

If called interactively, toggle @code{Helm--Remap-Mouse mode}.  If the
prefix argument is positive, enable the mode, and if it is zero
or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.

WARNING: Do not use this mode yourself, it is internal to Helm.

@item @code{helm-autoresize-mode}
@vindex helm-autoresize-mode

@strong{Standard Value}: nil

(helm-autoresize-mode &optional ARG)

Auto resize helm window when enabled.
Helm window is re-sized according to @code{helm-autoresize-max-height}
and @code{helm-autoresize-min-height}.  Note that when this mode is
enabled, Helm behaves as if @code{helm-always-two-windows} is enabled.

If called interactively, toggle @code{Helm-Autoresize mode}.  If the
prefix argument is positive, enable the mode, and if it is zero
or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.

See @code{fit-window-to-buffer} for more infos.
@end table

@anchor{uncategorized (1)}
@subsubheading uncategorized

@table @asis
@item @code{helm-debug-root-directory}
@vindex helm-debug-root-directory

@strong{Standard Value}: nil

When non-nil, save Helm log messages to a file in this directory.
When nil log messages are saved to a buffer instead.  Log message
are saved only when @code{helm-debug} is non-nil, so setting this
doesn’t enable debugging by itself.

See @code{helm-log-save-maybe} for more info.

@item @code{helm-samewindow}
@vindex helm-samewindow

@strong{Standard Value}: nil

Use current window for showing candidates.
If t, then Helm does not pop-up a new window.

@item @code{helm-truncate-lines}
@vindex helm-truncate-lines

@strong{Standard Value}: nil

The value of @code{truncate-lines} when Helm starts.
You can toggle later @code{truncate-lines} with
C-c >.
@end table

@node Hooks in library @samp{helm}
@subsection Hooks in library @samp{helm}

@anchor{Run}
@subsubheading Run

@table @asis
@item @code{helm-log-run-hook}
@vindex helm-log-run-hook

@strong{Standard Value}:
@end table

@anchor{Exit}
@subsubheading Exit

@table @asis
@item @code{helm-confirm-and-exit-hook}
@vindex helm-confirm-and-exit-hook

@strong{Standard Value}:
@end table

@anchor{Temp}
@subsubheading Temp

@table @asis
@item @code{with-helm-temp-hook}
@vindex with-helm-temp-hook

@strong{Standard Value}:
@end table

@anchor{Hooks}
@subsubheading Hooks

@table @asis
@item @code{helm--run-init-hooks}
@vindex helm--run-init-hooks

@strong{Standard Value}:

@item @code{helm--temp-hooks}
@vindex helm--temp-hooks

@strong{Standard Value}:

@lisp
((helm--hook94 . helm-after-update-hook))
@end lisp

Store temporary hooks added by @code{with-helm-temp-hook}.
@end table

@anchor{Minibuffer (1)}
@subsubheading Minibuffer

@table @asis
@item @code{helm-exit-minibuffer-hook}
@vindex helm-exit-minibuffer-hook

@strong{Standard Value}:

@lisp
(helm-files-save-file-name-history)
@end lisp

Runs just before exiting the minibuffer.

This hook runs when Helm exits the minibuffer normally (e.g., via
candidate selection), but does NOT run if Helm exits the
minibuffer abnormally (e.g. via @code{helm-keyboard-quit}).

@item @code{helm-minibuffer-set-up-hook}
@vindex helm-minibuffer-set-up-hook

@strong{Standard Value}: nil

Hook that runs at minibuffer initialization.
A hook useful for modifying minibuffer settings in Helm.

An example that hides the minibuffer when using
@code{helm-echo-input-in-header-line}:

(add-hook ’helm-minibuffer-set-up-hook #’helm-hide-minibuffer-maybe)

Note that we check @code{helm-echo-input-in-header-line} value
from @code{helm-buffer} which allows detecting possible local
value of this var.
@end table

@anchor{Autoresize (1)}
@subsubheading Autoresize

@table @asis
@item @code{helm--autoresize-hook}
@vindex helm--autoresize-hook

@strong{Standard Value}:
@end table

@anchor{Before}
@subsubheading Before

@table @asis
@item @code{helm-before-initialize-hook}
@vindex helm-before-initialize-hook

@strong{Standard Value}: nil

Runs before Helm initialization.
This hook runs before init functions in @code{helm-sources}, which is
before creation of @code{helm-buffer}.  Set local variables for
@code{helm-buffer} that need a value from @code{current-buffer} with
@code{helm-set-local-variable}.

@item @code{helm-move-selection-before-hook}
@vindex helm-move-selection-before-hook

@strong{Standard Value}: nil

Runs before moving selection in @code{helm-buffer}.
@end table

@anchor{Update}
@subsubheading Update

@table @asis
@item @code{helm-before-update-hook}
@vindex helm-before-update-hook

@strong{Standard Value}: nil

Runs before updating the Helm buffer with the new input pattern.

@item @code{helm-update-hook}
@vindex helm-update-hook

@strong{Standard Value}:

@lisp
(helm--maybe-update-keymap helm-match-line-cleanup-maybe helm-revive-visible-mark helm-confirm-and-exit-hook)
@end lisp

Runs after updating the Helm buffer with the new input pattern.
@end table

@anchor{Action (1)}
@subsubheading Action

@table @asis
@item @code{helm-before-action-hook}
@vindex helm-before-action-hook

@strong{Standard Value}:

@lisp
(helm-ff-before-action-hook-fn)
@end lisp

Runs before executing action.
Unlike @code{helm-cleanup-hook}, this hook runs before Helm closes the
minibuffer and also before performing an action.

@item @code{helm-select-action-hook}
@vindex helm-select-action-hook

@strong{Standard Value}: nil

Runs when opening the action buffer.
@end table

@anchor{Mode (1)}
@subsubheading Mode

@table @asis
@item @code{helm--minor-mode-hook}
@vindex helm--minor-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm--minor-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)

@item @code{helm--remap-mouse-mode-hook}
@vindex helm--remap-mouse-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm--remap-mouse-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)

@item @code{helm-autoresize-mode-hook}
@vindex helm-autoresize-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm-autoresize-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)

@item @code{helm-display-line-numbers-mode-hook}
@vindex helm-display-line-numbers-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm-display-line-numbers-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)

@item @code{helm-major-mode-hook}
@vindex helm-major-mode-hook

@strong{Standard Value}: nil

Hook run after entering Hmm mode.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)
@end table

@anchor{After Action}
@subsubheading After Action

@table @asis
@item @code{helm-after-action-hook}
@vindex helm-after-action-hook

@strong{Standard Value}:

@lisp
(helm-match-line-cleanup-pulse)
@end lisp

Runs after executing action.

@item @code{helm-after-persistent-action-hook}
@vindex helm-after-persistent-action-hook

@strong{Standard Value}:

@lisp
(helm-find-files--reset-level-tree helm-match-line-update helm-persistent-autoresize-hook)
@end lisp

Runs after executing persistent action.
@end table

@anchor{After Update}
@subsubheading After Update

@table @asis
@item @code{helm-after-update-hook}
@vindex helm-after-update-hook

@strong{Standard Value}:

@lisp
(helm--maybe-update-keymap helm-match-line-cleanup-maybe helm-revive-visible-mark helm-confirm-and-exit-hook)
@end lisp

Runs after updating the Helm buffer with the new input pattern.

@item @code{with-helm-after-update-hook}
@vindex with-helm-after-update-hook

@strong{Standard Value}:
@end table

@anchor{After uncategorized}
@subsubheading After uncategorized

@table @asis
@item @code{helm-after-initialize-hook}
@vindex helm-after-initialize-hook

@strong{Standard Value}:

@lisp
(helm-reset-yank-point)
@end lisp

Runs after Helm initialization.
This hook runs after @code{helm-buffer} is created but not from
@code{helm-buffer}.  The hook needs to specify in which buffer to
run.

@item @code{helm-after-preselection-hook}
@vindex helm-after-preselection-hook

@strong{Standard Value}: nil

Runs after pre-selection in @code{helm-buffer}.

@item @code{helm-move-selection-after-hook}
@vindex helm-move-selection-after-hook

@strong{Standard Value}: nil

Runs after moving selection in @code{helm-buffer}.

@item @code{helm-resume-after-hook}
@vindex helm-resume-after-hook

@strong{Standard Value}:

@lisp
(helm-ff--update-resume-after-hook)
@end lisp

A hook that runs after resuming a Helm session.
The hook should takes one arg SOURCES@.
@end table

@anchor{uncategorized (2)}
@subsubheading uncategorized

@table @asis
@item @code{helm-async-outer-limit-hook}
@vindex helm-async-outer-limit-hook

@strong{Standard Value}: nil

A hook that runs in async sources when process output comes out of @code{candidate-number-limit}.
Should be set locally to @code{helm-buffer} with @code{helm-set-local-variable}.

@item @code{helm-cleanup-hook}
@vindex helm-cleanup-hook

@strong{Standard Value}:

@lisp
(helm-ff-save-history helm-find-files--reset-level-tree helm-match-line-cleanup helm-handle-winner-boring-buffers helm-reset-yank-point)
@end lisp

Runs after exiting the minibuffer and before performing an
action.

This hook runs even if Helm exits the minibuffer abnormally (e.g.
via @code{helm-keyboard-quit}).

@item @code{helm-process-deferred-sentinel-hook}
@vindex helm-process-deferred-sentinel-hook

@strong{Standard Value}:

@item @code{helm-quit-hook}
@vindex helm-quit-hook

@strong{Standard Value}: nil

A hook that runs when quitting Helm.

@item @code{helm-window-configuration-hook}
@vindex helm-window-configuration-hook

@strong{Standard Value}: nil

Runs when switching to and from the action buffer.
Should run also at end of @code{helm-display-function}.
@end table

@node Library helm-adaptive
@section Library: helm-adaptive

@menu
* Modes in library @code{helm-adaptive}::
* Commands in library @code{helm-adaptive} (excludes keymaps)::
* Options in library @samp{helm-adaptive}::
* Hooks in library @samp{helm-adaptive}::
@end menu

@node Modes in library @code{helm-adaptive}
@subsection Modes in library @code{helm-adaptive}

@anchor{minor-mode-p (2)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-adaptive-mode}
@findex helm-adaptive-mode

(helm-adaptive-mode &optional ARG)

Toggle adaptive sorting in all sources.

If called interactively, toggle @code{Helm-Adaptive mode}.  If the
prefix argument is positive, enable the mode, and if it is zero
or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.
@end table

@node Commands in library @code{helm-adaptive} (excludes keymaps)
@subsection Commands in library @code{helm-adaptive} (excludes keymaps)

@anchor{History}
@subsubheading History

@table @asis
@item @code{helm-adaptive-save-history}
@findex helm-adaptive-save-history

(helm-adaptive-save-history &optional ARG)

Save history information to the file given by @code{helm-adaptive-history-file}.

@item @code{helm-reset-adaptive-history}
@findex helm-reset-adaptive-history

Delete all @code{helm-adaptive-history} and his file.
Useful when you have a old or corrupted
@code{helm-adaptive-history-file}.
@end table

@anchor{minor-mode-p (3)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-adaptive-mode}
@findex helm-adaptive-mode

(helm-adaptive-mode &optional ARG)

Toggle adaptive sorting in all sources.

If called interactively, toggle @code{Helm-Adaptive mode}.  If the
prefix argument is positive, enable the mode, and if it is zero
or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.
@end table

@node Options in library @samp{helm-adaptive}
@subsection Options in library @samp{helm-adaptive}

@anchor{Mode (2)}
@subsubheading Mode

@table @asis
@item @code{helm-adaptive-mode-hook}
@vindex helm-adaptive-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm-adaptive-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)
@end table

@anchor{History (1)}
@subsubheading History

@table @asis
@item @code{helm-adaptive-history-file}
@vindex helm-adaptive-history-file

@strong{Standard Value}: ~/.emacs.d/helm-adaptive-history

Path of file where history information is stored.
When nil history is not saved nor restored after Emacs restart
unless you save/restore @code{helm-adaptive-history} with something
else like psession or desktop.

@item @code{helm-adaptive-history-length}
@vindex helm-adaptive-history-length

@strong{Standard Value}: 50

Maximum number of candidates stored for a source.
@end table

@anchor{minor-mode-p (4)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-adaptive-mode}
@vindex helm-adaptive-mode

@strong{Standard Value}: nil

(helm-adaptive-mode &optional ARG)

Toggle adaptive sorting in all sources.

If called interactively, toggle @code{Helm-Adaptive mode}.  If the
prefix argument is positive, enable the mode, and if it is zero
or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.
@end table

@anchor{uncategorized (3)}
@subsubheading uncategorized

@table @asis
@item @code{helm-adaptive-sort-by-frequent-recent-usage}
@vindex helm-adaptive-sort-by-frequent-recent-usage

@strong{Standard Value}: t

Try to sort on an average of frequent and recent usage when non-nil.

When nil sort on frequency usage only.

Only frequency:
When candidate have low frequency, you have to hit on it many
times to make it going up on top.

Frequency+recent:
Even with a low frequency, candidate go up on top. If a candidate
have a high frequency but it is not used since some time, it goes
down slowly, but as soon you reuse it it go up on top quickly.
@end table

@node Hooks in library @samp{helm-adaptive}
@subsection Hooks in library @samp{helm-adaptive}

@anchor{uncategorized (4)}
@subsubheading uncategorized

@table @asis
@item @code{helm-adaptive-mode-hook}
@vindex helm-adaptive-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm-adaptive-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)
@end table

@node Library helm-bookmark
@section Library: helm-bookmark

@menu
* Commands in keymap @code{helm-bookmark-find-files-map}::
* Commands in keymap @code{helm-bookmark-map}::
* Commands in library @code{helm-bookmark} (excludes keymaps)::
* Options in library @samp{helm-bookmark}::
@end menu

@node Commands in keymap @code{helm-bookmark-find-files-map}
@subsection Commands in keymap @code{helm-bookmark-find-files-map}

@anchor{uncategorized (5)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x C-d} (@code{helm-bookmark-run-browse-project})
@findex helm-bookmark-run-browse-project @r{(helm-bookmark-find-files-map)}

@kindex C-x C-d @r{(helm-bookmark-find-files-map)}

Run @code{helm-bookmark-browse-project} from keyboard.
@end table

@node Commands in keymap @code{helm-bookmark-map}
@subsection Commands in keymap @code{helm-bookmark-map}

@anchor{uncategorized (6)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-d} (@code{helm-bookmark-run-delete})
@findex helm-bookmark-run-delete @r{(helm-bookmark-map)}

@kindex C-d @r{(helm-bookmark-map)}

Delete bookmark from keyboard.

@item @kbd{M-e} (@code{helm-bookmark-run-edit})
@findex helm-bookmark-run-edit @r{(helm-bookmark-map)}

@kindex M-e @r{(helm-bookmark-map)}

Run @code{helm-bookmark-edit-bookmark} from keyboard.

@item @kbd{C-c C-o} (@code{helm-bookmark-run-jump-other-frame})
@findex helm-bookmark-run-jump-other-frame @r{(helm-bookmark-map)}

@kindex C-c C-o @r{(helm-bookmark-map)}

Jump to bookmark other frame from keyboard.

@item @kbd{C-c o} (@code{helm-bookmark-run-jump-other-window})
@findex helm-bookmark-run-jump-other-window @r{(helm-bookmark-map)}

@kindex C-c o @r{(helm-bookmark-map)}

Jump to bookmark from keyboard.

@item @kbd{C-]} (@code{helm-bookmark-toggle-filename})
@findex helm-bookmark-toggle-filename @r{(helm-bookmark-map)}

@kindex C-] @r{(helm-bookmark-map)}

Toggle bookmark location visibility.
@end table

@node Commands in library @code{helm-bookmark} (excludes keymaps)
@subsection Commands in library @code{helm-bookmark} (excludes keymaps)

@anchor{Bookmarks}
@subsubheading Bookmarks

@table @asis
@item @code{helm-bookmarks}
@findex helm-bookmarks

Preconfigured @code{helm} for bookmarks.

@item @kbd{C-x c C-x r b} (@code{helm-filtered-bookmarks})
@findex helm-filtered-bookmarks

@kindex C-x c C-x r b

Preconfigured @code{helm} for bookmarks (filtered by category).
Optional source @code{helm-source-bookmark-addressbook} is loaded only
if external addressbook-bookmark package is installed.
@end table

@anchor{uncategorized (7)}
@subsubheading uncategorized

@table @asis
@item @code{helm-bookmark-rename}
@findex helm-bookmark-rename

(helm-bookmark-rename OLD &optional NEW BATCH)

Change bookmark's name from OLD to NEW@.
Interactively:
 If called from the keyboard, then prompt for OLD@.
 If called from the menubar, select OLD from a menu.
If NEW is nil, then prompt for its string value.

If BATCH is non-nil, then do not rebuild the menu list.

While the user enters the new name, repeated @code{C-w} inserts
consecutive words from the buffer into the new bookmark name.
@end table

@node Options in library @samp{helm-bookmark}
@subsection Options in library @samp{helm-bookmark}

@anchor{uncategorized (8)}
@subsubheading uncategorized

@table @asis
@item @code{helm-bookmark-default-filtered-sources}
@vindex helm-bookmark-default-filtered-sources

@strong{Standard Value}:

@lisp
(helm-source-bookmark-org helm-source-bookmark-files&dirs helm-source-bookmark-helm-find-files helm-source-bookmark-info helm-source-bookmark-gnus helm-source-bookmark-man helm-source-bookmark-images helm-source-bookmark-w3m helm-source-bookmark-uncategorized helm-source-bookmark-set)
@end lisp

List of sources to use in @code{helm-filtered-bookmarks}.

@item @code{helm-bookmark-show-location}
@vindex helm-bookmark-show-location

@strong{Standard Value}: nil

Show location of bookmark on display.
@end table

@node Library helm-buffers
@section Library: helm-buffers

@menu
* Commands in keymap @code{helm-buffer-map}::
* Commands in keymap @code{helm-buffer-not-found-map}::
* Commands in library @code{helm-buffers} (excludes keymaps)::
* Options in library @samp{helm-buffers}::
@end menu

@node Commands in keymap @code{helm-buffer-map}
@subsection Commands in keymap @code{helm-buffer-map}

@anchor{Control what you see}
@subsubheading Control what you see

@table @asis
@item @kbd{C-c a} (@code{helm-buffers-toggle-show-hidden-buffers})
@findex helm-buffers-toggle-show-hidden-buffers @r{(helm-buffer-map)}

@kindex C-c a @r{(helm-buffer-map)}

@item @kbd{C-]} (@code{helm-toggle-buffers-details})
@findex helm-toggle-buffers-details @r{(helm-buffer-map)}

@kindex C-] @r{(helm-buffer-map)}
@end table

@anchor{Browse Project}
@subsubheading Browse Project

@table @asis
@item @kbd{C-x C-d} (@code{helm-buffers-run-browse-project})
@findex helm-buffers-run-browse-project @r{(helm-buffer-map)}

@kindex C-x C-d @r{(helm-buffer-map)}

Run @code{helm-buffers-browse-project} from key.
@end table

@anchor{Switch to Buffer in other frame window or tab}
@subsubheading Switch to Buffer in other frame, window or tab

@table @asis
@item @kbd{C-c C-o} (@code{helm-buffer-switch-other-frame})
@findex helm-buffer-switch-other-frame @r{(helm-buffer-map)}

@kindex C-c C-o @r{(helm-buffer-map)}

Run switch to other frame action from @code{helm-source-buffers-list}.

@item @kbd{C-c o} (@code{helm-buffer-switch-other-window})
@findex helm-buffer-switch-other-window @r{(helm-buffer-map)}

@kindex C-c o @r{(helm-buffer-map)}

Run switch to other window action from @code{helm-source-buffers-list}.

@item @kbd{C-c C-t} (@code{helm-buffers-switch-to-buffer-new-tab})
@findex helm-buffers-switch-to-buffer-new-tab @r{(helm-buffer-map)}

@kindex C-c C-t @r{(helm-buffer-map)}

Run switch to buffer in other tab action from @code{helm-source-buffers-list}.
@end table

@anchor{Run Occur}
@subsubheading Run Occur

@table @asis
@item @kbd{C-s} (@code{helm-buffers-run-occur})
@findex helm-buffers-run-occur @r{(helm-buffer-map)}

@kindex C-s @r{(helm-buffer-map)}

Run @code{helm-multi-occur-as-action} by key.
@end table

@anchor{Query Replace on Buffers' contents}
@subsubheading Query Replace on Buffers' contents

@table @asis
@item @kbd{M-%} (@code{helm-buffer-run-query-replace})
@findex helm-buffer-run-query-replace @r{(helm-buffer-map)}

@kindex M-% @r{(helm-buffer-map)}

Run Query replace action from @code{helm-source-buffers-list}.

@item @kbd{C-M-%} (@code{helm-buffer-run-query-replace-regexp})
@findex helm-buffer-run-query-replace-regexp @r{(helm-buffer-map)}

@kindex C-M-% @r{(helm-buffer-map)}

Run Query replace regexp action from @code{helm-source-buffers-list}.
@end table

@anchor{Mark similar Buffers}
@subsubheading Mark similar Buffers

@table @asis
@item @kbd{C-M-@key{SPC}} (@code{helm-buffers-mark-similar-buffers})
@findex helm-buffers-mark-similar-buffers @r{(helm-buffer-map)}

@kindex C-M-SPC @r{(helm-buffer-map)}

Mark All buffers that have same property @code{type} than current.
I.e. same color.
@end table

@anchor{Save Buffer}
@subsubheading Save Buffer

@table @asis
@item @kbd{C-x C-s} (@code{helm-buffer-save-persistent})
@findex helm-buffer-save-persistent @r{(helm-buffer-map)}

@kindex C-x C-s @r{(helm-buffer-map)}

Save buffer without quitting Helm.

@item @kbd{C-x s} (@code{helm-buffer-run-save-some-buffers})
@findex helm-buffer-run-save-some-buffers @r{(helm-buffer-map)}

@kindex C-x s @r{(helm-buffer-map)}

Save unsaved file buffers without quitting Helm.
@end table

@anchor{Run Diff and friends}
@subsubheading Run Diff and friends

@table @asis
@item @kbd{C-=} (@code{helm-buffer-diff-persistent})
@findex helm-buffer-diff-persistent @r{(helm-buffer-map)}

@kindex C-= @r{(helm-buffer-map)}

Toggle diff buffer without quitting helm.

@item @kbd{C-c =} (@code{helm-buffer-run-ediff})
@findex helm-buffer-run-ediff @r{(helm-buffer-map)}

@kindex C-c = @r{(helm-buffer-map)}

Run ediff action from @code{helm-source-buffers-list}.

@item @kbd{M-=} (@code{helm-buffer-run-ediff-merge})
@findex helm-buffer-run-ediff-merge @r{(helm-buffer-map)}

@kindex M-= @r{(helm-buffer-map)}

Run ediff action from @code{helm-source-buffers-list}.
@end table

@anchor{Kill Buffers}
@subsubheading Kill Buffers

@table @asis
@item @kbd{C-c d} (@code{helm-buffer-run-kill-persistent})
@findex helm-buffer-run-kill-persistent @r{(helm-buffer-map)}

@kindex C-c d @r{(helm-buffer-map)}

Kill buffer without quitting Helm.

@item @kbd{M-D} (@code{helm-buffer-run-kill-buffers})
@findex helm-buffer-run-kill-buffers @r{(helm-buffer-map)}

@kindex M-D @r{(helm-buffer-map)}

Run kill buffer action from @code{helm-source-buffers-list}.
@end table

@anchor{Rename Buffer}
@subsubheading Rename Buffer

@table @asis
@item @kbd{M-R} (@code{helm-buffer-run-rename-buffer})
@findex helm-buffer-run-rename-buffer @r{(helm-buffer-map)}

@kindex M-R @r{(helm-buffer-map)}

Run rename buffer action from @code{helm-source-buffers-list}.
@end table

@anchor{Revert Buffer}
@subsubheading Revert Buffer

@table @asis
@item @kbd{M-G} (@code{helm-buffer-revert-persistent})
@findex helm-buffer-revert-persistent @r{(helm-buffer-map)}

@kindex M-G @r{(helm-buffer-map)}

Revert buffer without quitting helm.
@end table

@anchor{Goto line}
@subsubheading Goto line

@table @asis
@item @kbd{M-g M-g} (@code{helm-buffer-run-goto-line})
@findex helm-buffer-run-goto-line @r{(helm-buffer-map)}

@kindex M-g M-g @r{(helm-buffer-map)}

Switch to buffer at line number.
@end table

@anchor{Run ZGrep}
@subsubheading Run ZGrep

@table @asis
@item @kbd{M-g s} (@code{helm-buffer-run-zgrep})
@findex helm-buffer-run-zgrep @r{(helm-buffer-map)}

@kindex M-g s @r{(helm-buffer-map)}

Run Grep action from @code{helm-source-buffers-list}.
@end table

@node Commands in keymap @code{helm-buffer-not-found-map}
@subsection Commands in keymap @code{helm-buffer-not-found-map}

@anchor{Create new Buffers in other frame or window}
@subsubheading Create new Buffers in other frame or window

@table @asis
@item @kbd{C-c C-o} (@code{helm-buffers-not-found-run-switch-of})
@findex helm-buffers-not-found-run-switch-of @r{(helm-buffer-not-found-map)}

@kindex C-c C-o @r{(helm-buffer-not-found-map)}

Run create new buffer other frame action from keymap.

@item @kbd{C-c o} (@code{helm-buffers-not-found-run-switch-ow})
@findex helm-buffers-not-found-run-switch-ow @r{(helm-buffer-not-found-map)}

@kindex C-c o @r{(helm-buffer-not-found-map)}

Run create new buffer other window action from keymap.
@end table

@node Commands in library @code{helm-buffers} (excludes keymaps)
@subsection Commands in library @code{helm-buffers} (excludes keymaps)

@anchor{Mini}
@subsubheading Mini

@table @asis
@item @code{helm-mini}
@findex helm-mini

Preconfigured @code{helm} displaying @code{helm-mini-default-sources}.

@item @code{helm-quit-and-helm-mini}
@findex helm-quit-and-helm-mini

Drop into @code{helm-mini} from @code{helm}.
@end table

@anchor{uncategorized (9)}
@subsubheading uncategorized

@table @asis
@item @code{helm-buffer-run-grep}
@findex helm-buffer-run-grep

Run Grep action from @code{helm-source-buffers-list}.

@item @kbd{C-x c C-x C-b}

@item @kbd{C-x C-b} (@code{helm-buffers-list})
@findex helm-buffers-list

@kindex C-x c C-x C-b
@kindex C-x C-b

Preconfigured @code{helm} to list buffers.
@end table

@node Options in library @samp{helm-buffers}
@subsection Options in library @samp{helm-buffers}

@anchor{Buffer List}
@subsubheading Buffer List

@table @asis
@item @code{helm-boring-buffer-regexp-list}
@vindex helm-boring-buffer-regexp-list

@strong{Standard Value}:

@lisp
("\\` " "\\`\\*helm" "\\`\\*Echo Area" "\\`\\*Minibuf")
@end lisp

The regexp list that match boring buffers.
Buffer candidates matching these regular expression will be
filtered from the list of candidates if the
@code{helm-skip-boring-buffers} candidate transformer is used.

@item @code{helm-buffer-list-reorder-fn}
@vindex helm-buffer-list-reorder-fn

@strong{Standard Value}: helm-buffers-reorder-buffer-list

A function in charge of ordering the initial buffer list.
It takes two arguments VISIBLES buffers and OTHERS buffers.
Arg VISIBLES handles the buffers visibles in this frame.
Arg OTHERS handles all the other buffers.
You can write a function that reorder VISIBLES and OTHERS as you
want.
Default function returns OTHERS buffers on top and VISIBLES
buffer at the end.  See @code{helm-buffers-reorder-buffer-list}.

@item @code{helm-white-buffer-regexp-list}
@vindex helm-white-buffer-regexp-list

@strong{Standard Value}: nil

The regexp list of not boring buffers.
These buffers will be displayed even if they match one of
@code{helm-boring-buffer-regexp-list}.
@end table

@anchor{Buffer uncategorized}
@subsubheading Buffer uncategorized

@table @asis
@item @code{helm-buffer--pretty-names}
@vindex helm-buffer--pretty-names

@strong{Standard Value}:

@lisp
((dired-mode . "Dired")
 (lisp-interaction-mode . "Lisp Inter"))
@end lisp

An alist specifying pretty names for modes.
Most of the time buffer’s @code{mode-name} is a string so no need to
add it here as there is no need to compute it, but sometimes it
may be a mode-line specification which may be costly to compute,
in this case add here the pretty name as a string to avoid this
costly computation.  Also if some pretty names are too long you
can add your own abbreviation here.

@item @code{helm-buffer-details-flag}
@vindex helm-buffer-details-flag

@strong{Standard Value}: t

Always show details in buffer list when non-nil.

@item @code{helm-buffer-max-length}
@vindex helm-buffer-max-length

@strong{Standard Value}: 20

Max length of buffer names before truncate.
When disabled (nil) use the longest @code{buffer-name} length found.

@item @code{helm-buffer-skip-remote-checking}
@vindex helm-buffer-skip-remote-checking

@strong{Standard Value}: nil

Ignore checking for @code{file-exists-p} on remote files.
@end table

@anchor{Buffers uncategorized uncategorized uncategorized}
@subsubheading Buffers uncategorized uncategorized uncategorized

@table @asis
@item @code{helm-buffers-column-separator}
@vindex helm-buffers-column-separator

@strong{Standard Value}:

Separator for columns in buffer listing.

@item @code{helm-buffers-end-truncated-string}
@vindex helm-buffers-end-truncated-string

@strong{Standard Value}: @dots{}

The string to display at end of truncated buffer names.

@item @code{helm-buffers-favorite-modes}
@vindex helm-buffers-favorite-modes

@strong{Standard Value}:

@lisp
(lisp-interaction-mode emacs-lisp-mode text-mode org-mode)
@end lisp

List of preferred mode to open new buffers with.

@item @code{helm-buffers-fuzzy-matching}
@vindex helm-buffers-fuzzy-matching

@strong{Standard Value}: nil

Fuzzy matching buffer names when non-nil.
Only buffer names are fuzzy matched when this is enabled,
@code{major-mode} matching is not affected by this.

@item @code{helm-buffers-left-margin-width}
@vindex helm-buffers-left-margin-width

@strong{Standard Value}: 0

@code{left-margin-width} value for @code{helm-mini} and @code{helm-buffers-list}.

@item @code{helm-buffers-maybe-switch-to-tab}
@vindex helm-buffers-maybe-switch-to-tab

@strong{Standard Value}: nil

Switch to buffer in its tab when non nil.
This has no effect when @code{tab-bar-mode} is not available.

@item @code{helm-buffers-sort-fn}
@vindex helm-buffers-sort-fn

@strong{Standard Value}: helm-fuzzy-matching-default-sort-fn

The sort function to use in @code{helm-buffers-list}.

Default to @code{helm-fuzzy-sort-fn} you can use
@code{helm-fuzzy-matching-sort-fn-preserve-ties-order} as alternative if
you want to keep the recentest order when narrowing candidates.

@item @code{helm-buffers-truncate-lines}
@vindex helm-buffers-truncate-lines

@strong{Standard Value}: t

Truncate lines in @code{helm-buffers-list} when non-nil.
@end table

@anchor{uncategorized (10)}
@subsubheading uncategorized

@table @asis
@item @code{helm-mini-default-sources}
@vindex helm-mini-default-sources

@strong{Standard Value}:

@lisp
(helm-source-buffers-list helm-source-recentf helm-source-buffer-not-found)
@end lisp

Default sources list used in @code{helm-mini}.

When adding a source here it is up to you to ensure the library
of this source is accessible and properly loaded.
@end table

@node Library helm-color
@section Library: helm-color

@menu
* Commands in keymap @code{helm-color-map}::
* Commands in library @code{helm-color} (excludes keymaps)::
@end menu

@node Commands in keymap @code{helm-color-map}
@subsection Commands in keymap @code{helm-color-map}

@anchor{uncategorized (11)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-c n} (@code{helm-color-run-insert-name})
@findex helm-color-run-insert-name @r{(helm-color-map)}

@kindex C-c n @r{(helm-color-map)}

Insert name of color from @code{helm-source-colors}.

@item @kbd{C-c r} (@code{helm-color-run-insert-rgb})
@findex helm-color-run-insert-rgb @r{(helm-color-map)}

@kindex C-c r @r{(helm-color-map)}

Insert RGB of color from @code{helm-source-colors}.

@item @kbd{C-c N} (@code{helm-color-run-kill-name})
@findex helm-color-run-kill-name @r{(helm-color-map)}

@kindex C-c N @r{(helm-color-map)}

Kill name of color from @code{helm-source-colors}.

@item @kbd{C-c R} (@code{helm-color-run-kill-rgb})
@findex helm-color-run-kill-rgb @r{(helm-color-map)}

@kindex C-c R @r{(helm-color-map)}

Kill RGB of color from @code{helm-source-colors}.
@end table

@node Commands in library @code{helm-color} (excludes keymaps)
@subsection Commands in library @code{helm-color} (excludes keymaps)

@anchor{uncategorized (12)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x c c} (@code{helm-colors})
@findex helm-colors

@kindex C-x c c

Preconfigured @code{helm} for color.
@end table

@node Library helm-comint
@section Library: helm-comint

@menu
* Commands in keymap @code{helm-comint-prompts-keymap}::
* Commands in library @code{helm-comint} (excludes keymaps)::
* Options in library @samp{helm-comint}::
@end menu

@node Commands in keymap @code{helm-comint-prompts-keymap}
@subsection Commands in keymap @code{helm-comint-prompts-keymap}

@anchor{uncategorized (13)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-c C-o} (@code{helm-comint-prompts-other-frame})
@findex helm-comint-prompts-other-frame @r{(helm-comint-prompts-keymap)}

@kindex C-c C-o @r{(helm-comint-prompts-keymap)}

@item @kbd{C-c o} (@code{helm-comint-prompts-other-window})
@findex helm-comint-prompts-other-window @r{(helm-comint-prompts-keymap)}

@kindex C-c o @r{(helm-comint-prompts-keymap)}
@end table

@node Commands in library @code{helm-comint} (excludes keymaps)
@subsection Commands in library @code{helm-comint} (excludes keymaps)

@anchor{Prompts}
@subsubheading Prompts

@table @asis
@item @code{helm-comint-prompts}
@findex helm-comint-prompts

Pre-configured @code{helm} to browse the prompts of the current comint buffer.

@item @code{helm-comint-prompts-all}
@findex helm-comint-prompts-all

Pre-configured @code{helm} to browse the prompts of all comint sessions.
@end table

@anchor{uncategorized (14)}
@subsubheading uncategorized

@table @asis
@item @code{helm-comint-input-ring}
@findex helm-comint-input-ring

Preconfigured @code{helm} that provide completion of @code{comint} history.
@end table

@node Options in library @samp{helm-comint}
@subsection Options in library @samp{helm-comint}

@anchor{uncategorized (15)}
@subsubheading uncategorized

@table @asis
@item @code{helm-comint-max-offset}
@vindex helm-comint-max-offset

@strong{Standard Value}: 400

Max number of chars displayed per candidate in comint-input-ring browser.
When t, don’t truncate candidate, show all.
By default it is approximatively the number of bits contained in
five lines of 80 chars each i.e 80*5.
Note that if you set this to nil multiline will be disabled, i.e
you will not have anymore separators between candidates.

@item @code{helm-comint-mode-list}
@vindex helm-comint-mode-list

@strong{Standard Value}:

@lisp
(comint-mode slime-repl-mode sly-mrepl-mode sql-interactive-mode)
@end lisp

Supported modes for prompt navigation.
Derived modes (e.g., Geiser’s REPL) are automatically supported.

@item @code{helm-comint-next-prompt-function}
@vindex helm-comint-next-prompt-function

@strong{Standard Value}:

@lisp
((sly-mrepl-mode lambda nil
                 (sly-mrepl-next-prompt)
                 (point)))
@end lisp

Alist of (MODE . NEXT-PROMPT-FUNCTION) to use.
 If the current major mode is a key in this list, the associated
 function will be used to navigate the prompts.
 The function must return the point after the prompt.
 Otherwise (comint-next-prompt 1) will be used.

@item @code{helm-comint-prompts-promptidx-p}
@vindex helm-comint-prompts-promptidx-p

@strong{Standard Value}: t

Show prompt number.
@end table

@node Library helm-command
@section Library: helm-command

@menu
* Commands in keymap @code{helm-M-x-map}::
* Commands in library @code{helm-command} (excludes keymaps)::
* Options in library @samp{helm-command}::
* Hooks in library @samp{helm-command}::
@end menu

@node Commands in keymap @code{helm-M-x-map}
@subsection Commands in keymap @code{helm-M-x-map}

@anchor{uncategorized (16)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-u} (@code{helm-M-x-universal-argument})
@findex helm-M-x-universal-argument @r{(helm-M-x-map)}

@kindex C-u @r{(helm-M-x-map)}

Same as @code{universal-argument} but for @code{helm-M-x}.
@end table

@node Commands in library @code{helm-command} (excludes keymaps)
@subsection Commands in library @code{helm-command} (excludes keymaps)

@anchor{uncategorized (17)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x c M-x}

@item @kbd{<execute>}

@item @kbd{<menu>}

@item @kbd{M-x} (@code{helm-M-x})
@findex helm-M-x

@kindex C-x c M-x
@kindex <execute>
@kindex <menu>
@kindex M-x

(helm-M-x ARG)

Preconfigured @code{helm} for Emacs commands.
It is @code{helm} replacement of regular @code{M-x}
@code{execute-extended-command}.

Unlike regular @code{M-x} Emacs vanilla @code{execute-extended-command}
command, the prefix args if needed, can be passed AFTER starting
@code{helm-M-x}.  When a prefix arg is passed BEFORE starting
@code{helm-M-x}, the first @code{C-u} while in @code{helm-M-x} session will
disable it.

You can get help on each command by persistent action.
@end table

@node Options in library @samp{helm-command}
@subsection Options in library @samp{helm-command}

@anchor{X}
@subsubheading X

@table @asis
@item @code{helm-M-x-always-save-history}
@vindex helm-M-x-always-save-history

@strong{Standard Value}: nil

@code{helm-M-x} save command in @code{extended-command-history} even when it fails.

@item @code{helm-M-x-reverse-history}
@vindex helm-M-x-reverse-history

@strong{Standard Value}: nil

The history source of @code{helm-M-x} appear in second position when non-nil.

@item @code{helm-M-x-use-completion-styles}
@vindex helm-M-x-use-completion-styles

@strong{Standard Value}: nil

Use @code{completion-styles} and dynamic completion when non nil.
It is disable by default as it is a regression starting from Emacs-27.
@end table

@anchor{minor-mode-p (5)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-mode}
@vindex helm-mode

@strong{Standard Value}: t

(helm-mode &optional ARG)

Toggle generic helm completion.

If called interactively, toggle @code{Helm mode}.  If the prefix
argument is positive, enable the mode, and if it is zero or
negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.

All functions in Emacs that use @code{completing-read},
@code{read-file-name}, @code{completion-in-region} and friends will use helm
interface when this mode is turned on.

However you can modify this behavior for functions of your choice
with @code{helm-completing-read-handlers-alist}.

Called with a positive arg, turn on unconditionally, with a
negative arg turn off.
You can toggle it with M-x @code{helm-mode}.

About @code{ido-mode}:
DO NOT enable @code{ido-everywhere} when using @code{helm-mode}.  Instead of
using @code{ido-mode}, add the commands where you want to use ido to
@code{helm-completing-read-handlers-alist} with @code{ido} as value.

Note: This mode is incompatible with Emacs23.
@end table

@node Hooks in library @samp{helm-command}
@subsection Hooks in library @samp{helm-command}

@anchor{uncategorized (18)}
@subsubheading uncategorized

@table @asis
@item @code{helm-M-x--before-action-hook}
@vindex helm-M-x--before-action-hook

@strong{Standard Value}:

@item @code{helm-M-x--move-selection-after-hook}
@vindex helm-M-x--move-selection-after-hook

@strong{Standard Value}:
@end table

@node Library helm-config
@section Library: helm-config

@node Library helm-dabbrev
@section Library: helm-dabbrev

@menu
* Commands in library @code{helm-dabbrev} (excludes keymaps)::
* Options in library @samp{helm-dabbrev}::
@end menu

@node Commands in library @code{helm-dabbrev} (excludes keymaps)
@subsection Commands in library @code{helm-dabbrev} (excludes keymaps)

@anchor{uncategorized (19)}
@subsubheading uncategorized

@table @asis
@item @kbd{M-/} (@code{helm-dabbrev})
@findex helm-dabbrev

@kindex M-/

Preconfigured helm for dynamic abbreviations.
@end table

@node Options in library @samp{helm-dabbrev}
@subsection Options in library @samp{helm-dabbrev}

@anchor{Search (1)}
@subsubheading Search

@table @asis
@item @code{helm-dabbrev-always-search-all}
@vindex helm-dabbrev-always-search-all

@strong{Standard Value}: t

Always search in all buffers when non--nil.
Note that even if nil, a search in all buffers will occur if the
length of candidates is <= than
@code{helm-dabbrev-max-length-result}.

@item @code{helm-dabbrev-case-fold-search}
@vindex helm-dabbrev-case-fold-search

@strong{Standard Value}: smart

Set @code{case-fold-search} in @code{helm-dabbrev}.
Same as @code{helm-case-fold-search} but for @code{helm-dabbrev}.
Note that this is not affecting searching in Helm buffer, but the
initial search for all candidates in buffer(s).
@end table

@anchor{uncategorized (20)}
@subsubheading uncategorized

@table @asis
@item @code{helm-dabbrev-candidates-number-limit}
@vindex helm-dabbrev-candidates-number-limit

@strong{Standard Value}: 1000

Maximum number of candidates to collect.

The higher this number is, the slower the computation of
candidates will be.  You can use safely a higher value with
emacs-26+.
Note that this have nothing to do with
@code{helm-candidate-number-limit}, this means that computation of
candidates stop when this value is reached but only
@code{helm-candidate-number-limit} candidates are displayed in the
Helm buffer.

@item @code{helm-dabbrev-cycle-threshold}
@vindex helm-dabbrev-cycle-threshold

@strong{Standard Value}: 5

Number of time helm-dabbrev cycle before displaying helm completion.
When nil or 0 disable cycling.

@item @code{helm-dabbrev-ignored-buffers-regexps}
@vindex helm-dabbrev-ignored-buffers-regexps

@strong{Standard Value}:

@lisp
("\\*helm" "\\*Messages" "\\*Echo Area" "\\*Buffer List")
@end lisp

List of regexps matching names of buffers that @code{helm-dabbrev} should not check.

@item @code{helm-dabbrev-lineno-around}
@vindex helm-dabbrev-lineno-around

@strong{Standard Value}: 30

Search first in this number of lines before and after point.

@item @code{helm-dabbrev-major-mode-assoc}
@vindex helm-dabbrev-major-mode-assoc

@strong{Standard Value}: nil

Major mode association alist.

This allow helm-dabbrev searching in buffers with the associated
@code{major-mode}.
E.g. (emacs-lisp-mode . lisp-interaction-mode)

will allow searching in the lisp-interaction-mode buffer when
@code{current-buffer} is an @code{emacs-lisp-mode} buffer and vice versa
i.e. no need to provide (lisp-interaction-mode .
emacs-lisp-mode) association.

When nil check is the searched buffer has same @code{major-mode} than
the @code{current-buffer}.

This has no effect when @code{helm-dabbrev-related-buffer-fn} is nil
or of course bound to a function that doesn’t handle this var.

@item @code{helm-dabbrev-related-buffer-fn}
@vindex helm-dabbrev-related-buffer-fn

@strong{Standard Value}: helm-dabbrev--same-major-mode-p

A function that decide if a buffer to search in its related to @code{current-buffer}.

This is actually determined by comparing @code{major-mode} of the
buffer to search and the @code{current-buffer}.

The function take one arg, the buffer which is current, look at
@code{helm-dabbrev--same-major-mode-p} for an example.

When nil all buffers are considered related to @code{current-buffer}.
@end table

@node Library helm-easymenu
@section Library: helm-easymenu

@node Library helm-elisp
@section Library: helm-elisp

@menu
* Commands in library @code{helm-elisp} (excludes keymaps)::
* Options in library @samp{helm-elisp}::
@end menu

@node Commands in library @code{helm-elisp} (excludes keymaps)
@subsection Commands in library @code{helm-elisp} (excludes keymaps)

@anchor{Lisp}
@subsubheading Lisp

@table @asis
@item @code{helm-lisp-indent}
@findex helm-lisp-indent
@end table

@anchor{Point}
@subsubheading Point

@table @asis
@item @code{helm-complete-file-name-at-point}
@findex helm-complete-file-name-at-point

(helm-complete-file-name-at-point &optional FORCE)

Preconfigured Helm to complete file name at point.

@item @kbd{C-x c <tab>} (@code{helm-lisp-completion-at-point})
@findex helm-lisp-completion-at-point

@kindex C-x c <tab>

Preconfigured Helm for Lisp symbol completion at point.

@item @code{helm-lisp-completion-or-file-name-at-point}
@findex helm-lisp-completion-or-file-name-at-point

Preconfigured Helm to complete Lisp symbol or filename at point.
Filename completion happens if string start after or between a
double quote.
@end table

@anchor{uncategorized (21)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x c a}

@item @kbd{C-h a}

@item @kbd{<f1> a}

@item @kbd{<help> a} (@code{helm-apropos})
@findex helm-apropos

@kindex C-x c a
@kindex C-h a
@kindex <f1> a
@kindex <help> a

(helm-apropos DEFAULT)

Preconfigured Helm to describe commands, functions, variables and faces.
In non interactives calls DEFAULT argument should be provided as
a string, i.e. the @code{symbol-name} of any existing symbol.

@item @code{helm-complex-command-history}
@findex helm-complex-command-history

Preconfigured @code{helm} for complex command history.

@item @code{helm-locate-library}
@findex helm-locate-library

Preconfigured helm to locate elisp libraries.

@item @code{helm-manage-advice}
@findex helm-manage-advice

Preconfigured @code{helm} to disable/enable function advices.

@item @code{helm-sexp-eval-1}
@findex helm-sexp-eval-1

@item @code{helm-timers}
@findex helm-timers

Preconfigured @code{helm} for timers.
@end table

@node Options in library @samp{helm-elisp}
@subsection Options in library @samp{helm-elisp}

@anchor{Fuzzy (1)}
@subsubheading Fuzzy

@table @asis
@item @code{helm-locate-library-fuzzy-match}
@vindex helm-locate-library-fuzzy-match

@strong{Standard Value}: t

Enable fuzzy-matching in @code{helm-locate-library} when non--nil.
@end table

@anchor{Apropos}
@subsubheading Apropos

@table @asis
@item @code{helm-apropos-defaut-info-lookup-sources}
@vindex helm-apropos-defaut-info-lookup-sources

@strong{Standard Value}:

@lisp
(helm-source-info-elisp helm-source-info-cl helm-source-info-eieio)
@end lisp

A list of sources to look into when searching info page of a symbol.

@item @code{helm-apropos-fuzzy-match}
@vindex helm-apropos-fuzzy-match

@strong{Standard Value}: nil

Enable fuzzy matching for @code{helm-apropos} when non-nil.
@end table

@anchor{Completion}
@subsubheading Completion

@table @asis
@item @code{helm-lisp-fuzzy-completion}
@vindex helm-lisp-fuzzy-completion

@strong{Standard Value}: nil

Enable fuzzy matching in emacs-lisp completion when non-nil.
NOTE: This enables fuzzy matching in Helm native implementation of
elisp completion, but not on helmized elisp completion, i.e. fuzzy
completion is not available in @code{completion-at-point}.

@item @code{helm-show-completion-min-window-height}
@vindex helm-show-completion-min-window-height

@strong{Standard Value}: 7

Minimum completion window height used in show completion.
This is used in macro @code{with-helm-show-completion}.

@item @code{helm-turn-on-show-completion}
@vindex helm-turn-on-show-completion

@strong{Standard Value}: t

Display candidate in @code{current-buffer} while moving selection when non--nil.
@end table

@anchor{Function}
@subsubheading Function

@table @asis
@item @code{helm-apropos-function-list}
@vindex helm-apropos-function-list

@strong{Standard Value}:

@lisp
(helm-def-source--emacs-commands helm-def-source--emacs-functions helm-def-source--eieio-classes helm-def-source--eieio-generic helm-def-source--emacs-variables helm-def-source--emacs-faces)
@end lisp

A list of functions that build helm sources to use in @code{helm-apropos}.

@item @code{helm-elisp-help-function}
@vindex helm-elisp-help-function

@strong{Standard Value}: helm-elisp-show-help

Function for displaying help for Lisp symbols.

@item @code{helm-lisp-quoted-function-list}
@vindex helm-lisp-quoted-function-list

@strong{Standard Value}:

@lisp
(funcall apply mapc cl-mapc mapcar cl-mapcar callf callf2 cl-callf cl-callf2 fset fboundp fmakunbound symbol-function)
@end lisp

List of function where quoted function completion happen.
E.g. give only function names after (funcall ’.

@item @code{helm-lisp-unquoted-function-list}
@vindex helm-lisp-unquoted-function-list

@strong{Standard Value}:

@lisp
#'defadvice
@end lisp

List of function where unquoted function completion happen.
E.g. give only function names after (function .

@item @code{helm-show-completion-display-function}
@vindex helm-show-completion-display-function

@strong{Standard Value}: helm-display-buffer-in-own-frame

The function used to display helm completion buffer.

This function is used by @code{with-helm-show-completion}, when nil
fallback to @code{helm-default-display-buffer}.

Default is to use a separate frame on graphic display and
@code{helm-show-completion-default-display-function} on non graphic
display.
@end table

@node Library helm-elisp-package
@section Library: helm-elisp-package

@menu
* Commands in keymap @code{helm-el-package-map}::
* Commands in library @code{helm-elisp-package} (excludes keymaps)::
* Options in library @samp{helm-elisp-package}::
@end menu

@node Commands in keymap @code{helm-el-package-map}
@subsection Commands in keymap @code{helm-el-package-map}

@anchor{uncategorized Run}
@subsubheading uncategorized Run

@table @asis
@item @kbd{C-c @@} (@code{helm-el-run-visit-homepage})
@findex helm-el-run-visit-homepage @r{(helm-el-package-map)}

@kindex C-c @ @r{(helm-el-package-map)}
@end table

@anchor{uncategorized Package Run}
@subsubheading uncategorized Package Run

@table @asis
@item @kbd{C-c i} (@code{helm-el-run-package-install})
@findex helm-el-run-package-install @r{(helm-el-package-map)}

@kindex C-c i @r{(helm-el-package-map)}

@item @kbd{C-c r} (@code{helm-el-run-package-reinstall})
@findex helm-el-run-package-reinstall @r{(helm-el-package-map)}

@kindex C-c r @r{(helm-el-package-map)}

@item @kbd{C-c d} (@code{helm-el-run-package-uninstall})
@findex helm-el-run-package-uninstall @r{(helm-el-package-map)}

@kindex C-c d @r{(helm-el-package-map)}

@item @kbd{C-c u} (@code{helm-el-run-package-upgrade})
@findex helm-el-run-package-upgrade @r{(helm-el-package-map)}

@kindex C-c u @r{(helm-el-package-map)}

@item @kbd{C-c U} (@code{helm-el-run-package-upgrade-all})
@findex helm-el-run-package-upgrade-all @r{(helm-el-package-map)}

@kindex C-c U @r{(helm-el-package-map)}
@end table

@anchor{uncategorized Package Show}
@subsubheading uncategorized Package Show

@table @asis
@item @kbd{M-A} (@code{helm-el-package-show-all})
@findex helm-el-package-show-all @r{(helm-el-package-map)}

@kindex M-A @r{(helm-el-package-map)}

@item @kbd{M-B} (@code{helm-el-package-show-built-in})
@findex helm-el-package-show-built-in @r{(helm-el-package-map)}

@kindex M-B @r{(helm-el-package-map)}

@item @kbd{M-I} (@code{helm-el-package-show-installed})
@findex helm-el-package-show-installed @r{(helm-el-package-map)}

@kindex M-I @r{(helm-el-package-map)}

@item @kbd{M-O} (@code{helm-el-package-show-uninstalled})
@findex helm-el-package-show-uninstalled @r{(helm-el-package-map)}

@kindex M-O @r{(helm-el-package-map)}

@item @kbd{M-U} (@code{helm-el-package-show-upgrade})
@findex helm-el-package-show-upgrade @r{(helm-el-package-map)}

@kindex M-U @r{(helm-el-package-map)}
@end table

@node Commands in library @code{helm-elisp-package} (excludes keymaps)
@subsection Commands in library @code{helm-elisp-package} (excludes keymaps)

@anchor{uncategorized (22)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x c @@} (@code{helm-list-elisp-packages})
@findex helm-list-elisp-packages

@kindex C-x c @

(helm-list-elisp-packages ARG)

Preconfigured @code{helm} for listing and handling Emacs packages.

@item @code{helm-list-elisp-packages-no-fetch}
@findex helm-list-elisp-packages-no-fetch

(helm-list-elisp-packages-no-fetch ARG)

Preconfigured Helm for Emacs packages.

Same as @code{helm-list-elisp-packages} but don't fetch packages on
remote.  Called with a prefix ARG always fetch packages on
remote.
@end table

@node Options in library @samp{helm-elisp-package}
@subsection Options in library @samp{helm-elisp-package}

@anchor{Package}
@subsubheading Package

@table @asis
@item @code{helm-el-package-autoremove-on-start}
@vindex helm-el-package-autoremove-on-start

@strong{Standard Value}: nil

Try to autoremove no more needed packages on startup.
See @code{package-autoremove}.

@item @code{helm-el-package-initial-filter}
@vindex helm-el-package-initial-filter

@strong{Standard Value}: all

Show only installed, upgraded or all packages at startup.

@item @code{helm-el-package-upgrade-on-start}
@vindex helm-el-package-upgrade-on-start

@strong{Standard Value}: nil

Show package upgrades on startup when non nil.
@end table

@anchor{uncategorized (23)}
@subsubheading uncategorized

@table @asis
@item @code{helm-el-truncate-lines}
@vindex helm-el-truncate-lines

@strong{Standard Value}: t

Truncate lines in @code{helm-buffer} when non-nil.
@end table

@node Library helm-epa
@section Library: helm-epa

@menu
* Modes in library @code{helm-epa}::
* Commands in library @code{helm-epa} (excludes keymaps)::
* Options in library @samp{helm-epa}::
* Hooks in library @samp{helm-epa}::
@end menu

@node Modes in library @code{helm-epa}
@subsection Modes in library @code{helm-epa}

@anchor{minor-mode-p (6)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-epa-mode}
@findex helm-epa-mode

(helm-epa-mode &optional ARG)

Enable helm completion on gpg keys in epa functions.

If called interactively, toggle @code{Helm-Epa mode}.  If the prefix
argument is positive, enable the mode, and if it is zero or
negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.
@end table

@node Commands in library @code{helm-epa} (excludes keymaps)
@subsection Commands in library @code{helm-epa} (excludes keymaps)

@anchor{minor-mode-p (7)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-epa-mode}
@findex helm-epa-mode

(helm-epa-mode &optional ARG)

Enable helm completion on gpg keys in epa functions.

If called interactively, toggle @code{Helm-Epa mode}.  If the prefix
argument is positive, enable the mode, and if it is zero or
negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.
@end table

@anchor{uncategorized (24)}
@subsubheading uncategorized

@table @asis
@item @code{helm-epa-list-keys}
@findex helm-epa-list-keys

List all gpg keys.
This is the helm interface for @code{epa-list-keys}.
@end table

@node Options in library @samp{helm-epa}
@subsection Options in library @samp{helm-epa}

@anchor{Mode (3)}
@subsubheading Mode

@table @asis
@item @code{helm-epa-mode-hook}
@vindex helm-epa-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm-epa-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)
@end table

@anchor{minor-mode-p (8)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-epa-mode}
@vindex helm-epa-mode

@strong{Standard Value}: nil

(helm-epa-mode &optional ARG)

Enable helm completion on gpg keys in epa functions.

If called interactively, toggle @code{Helm-Epa mode}.  If the prefix
argument is positive, enable the mode, and if it is zero or
negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.
@end table

@anchor{uncategorized (25)}
@subsubheading uncategorized

@table @asis
@item @code{helm-epa-actions}
@vindex helm-epa-actions

@strong{Standard Value}:

@lisp
(("Show key" . epa--show-key)
 ("encrypt file with key" . helm-epa-encrypt-file)
 ("Copy keys to kill ring" . helm-epa-kill-keys-armor)
 ("Delete keys" . helm-epa-delete-keys))
@end lisp

Actions for @code{helm-epa-list-keys}.
@end table

@node Hooks in library @samp{helm-epa}
@subsection Hooks in library @samp{helm-epa}

@anchor{uncategorized (26)}
@subsubheading uncategorized

@table @asis
@item @code{helm-epa-mode-hook}
@vindex helm-epa-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm-epa-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)
@end table

@node Library helm-eshell
@section Library: helm-eshell

@menu
* Commands in keymap @code{helm-eshell-prompts-keymap}::
* Commands in library @code{helm-eshell} (excludes keymaps)::
* Options in library @samp{helm-eshell}::
* Hooks in library @samp{helm-eshell}::
@end menu

@node Commands in keymap @code{helm-eshell-prompts-keymap}
@subsection Commands in keymap @code{helm-eshell-prompts-keymap}

@anchor{uncategorized (27)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-c C-o} (@code{helm-eshell-prompts-other-frame})
@findex helm-eshell-prompts-other-frame @r{(helm-eshell-prompts-keymap)}

@kindex C-c C-o @r{(helm-eshell-prompts-keymap)}

@item @kbd{C-c o} (@code{helm-eshell-prompts-other-window})
@findex helm-eshell-prompts-other-window @r{(helm-eshell-prompts-keymap)}

@kindex C-c o @r{(helm-eshell-prompts-keymap)}
@end table

@node Commands in library @code{helm-eshell} (excludes keymaps)
@subsection Commands in library @code{helm-eshell} (excludes keymaps)

@anchor{Eshell}
@subsubheading Eshell

@table @asis
@item @code{helm-eshell-history}
@findex helm-eshell-history

Preconfigured Helm for Eshell history.

@item @code{helm-eshell-prompts}
@findex helm-eshell-prompts

Pre-configured @code{helm} to browse the prompts of the current Eshell.

@item @code{helm-eshell-prompts-all}
@findex helm-eshell-prompts-all

Pre-configured @code{helm} to browse the prompts of all Eshell sessions.
@end table

@anchor{uncategorized (28)}
@subsubheading uncategorized

@table @asis
@item @code{helm-esh-pcomplete}
@findex helm-esh-pcomplete

Preconfigured @code{helm} to provide Helm completion in Eshell.
@end table

@node Options in library @samp{helm-eshell}
@subsection Options in library @samp{helm-eshell}

@anchor{uncategorized (29)}
@subsubheading uncategorized

@table @asis
@item @code{helm-eshell-fuzzy-match}
@vindex helm-eshell-fuzzy-match

@strong{Standard Value}: nil

Enable fuzzy matching in @code{helm-esh-pcomplete} when non-nil.

@item @code{helm-eshell-prompts-promptidx-p}
@vindex helm-eshell-prompts-promptidx-p

@strong{Standard Value}: t

Show prompt number.
@end table

@node Hooks in library @samp{helm-eshell}
@subsection Hooks in library @samp{helm-eshell}

@anchor{uncategorized (30)}
@subsubheading uncategorized

@table @asis
@item @code{helm-eshell--quit-hook-fn}
@vindex helm-eshell--quit-hook-fn

@strong{Standard Value}:
@end table

@node Library helm-eval
@section Library: helm-eval

@menu
* Commands in keymap @code{helm-eval-expression-map}::
* Commands in library @code{helm-eval} (excludes keymaps)::
* Options in library @samp{helm-eval}::
@end menu

@node Commands in keymap @code{helm-eval-expression-map}
@subsection Commands in keymap @code{helm-eval-expression-map}

@anchor{uncategorized Helm}
@subsubheading uncategorized Helm

@table @asis
@item @kbd{C-<tab>}

@item @kbd{C-x c <tab>} (@code{helm-lisp-completion-at-point})
@findex helm-lisp-completion-at-point @r{(helm-eval-expression-map)}

@kindex C-<tab> @r{(helm-eval-expression-map)}
@kindex C-x c <tab> @r{(helm-eval-expression-map)}

Preconfigured Helm for Lisp symbol completion at point.
@end table

@anchor{uncategorized Char}
@subsubheading uncategorized Char

@table @asis
@item @kbd{<left>}

@item @kbd{C-b} (@code{backward-char})
@findex backward-char @r{(helm-eval-expression-map)}

@kindex <left> @r{(helm-eval-expression-map)}
@kindex C-b @r{(helm-eval-expression-map)}

(backward-char &optional N)

Move point N characters backward (forward if N is negative).
On attempt to pass beginning or end of buffer, stop and signal error.
Interactively, N is the numeric prefix argument.
If N is omitted or nil, move point 1 character backward.

Depending on the bidirectional context, the movement may be to the
right or to the left on the screen.  This is in contrast with
\[left-char], which see.

@item @kbd{<right>}

@item @kbd{C-f} (@code{forward-char})
@findex forward-char @r{(helm-eval-expression-map)}

@kindex <right> @r{(helm-eval-expression-map)}
@kindex C-f @r{(helm-eval-expression-map)}

(forward-char &optional N)

Move point N characters forward (backward if N is negative).
On reaching end or beginning of buffer, stop and signal error.
Interactively, N is the numeric prefix argument.
If N is omitted or nil, move point 1 character forward.

Depending on the bidirectional context, the movement may be to the
right or to the left on the screen.  This is in contrast with
\[right-char], which see.
@end table

@anchor{uncategorized Line}
@subsubheading uncategorized Line

@table @asis
@item @kbd{C-<return>} (@code{helm-eval-new-line-and-indent})
@findex helm-eval-new-line-and-indent @r{(helm-eval-expression-map)}

@kindex C-<return> @r{(helm-eval-expression-map)}

@item @kbd{M-<tab>} (@code{lisp-indent-line})
@findex lisp-indent-line @r{(helm-eval-expression-map)}

@kindex M-<tab> @r{(helm-eval-expression-map)}

(lisp-indent-line &optional INDENT)

Indent current line as Lisp code.

@item @kbd{<down>}

@item @kbd{C-n} (@code{next-line})
@findex next-line @r{(helm-eval-expression-map)}

@kindex <down> @r{(helm-eval-expression-map)}
@kindex C-n @r{(helm-eval-expression-map)}

(next-line &optional ARG TRY-VSCROLL)

Move cursor vertically down ARG lines.
Interactively, vscroll tall lines if @code{auto-window-vscroll} is enabled.
Non-interactively, use TRY-VSCROLL to control whether to vscroll tall
lines: if either @code{auto-window-vscroll} or TRY-VSCROLL is nil, this
function will not vscroll.

ARG defaults to 1.

If there is no character in the target line exactly under the current column,
the cursor is positioned after the character in that line that spans this
column, or at the end of the line if it is not long enough.
If there is no line in the buffer after this one, behavior depends on the
value of @code{next-line-add-newlines}.  If non-nil, it inserts a newline character
to create a line, and moves the cursor to that line.  Otherwise it moves the
cursor to the end of the buffer.

If the variable @code{line-move-visual} is non-nil, this command moves
by display lines.  Otherwise, it moves by buffer lines, without
taking variable-width characters or continued lines into account.
See \[next-logical-line] for a command that always moves by buffer lines.

The command \[set-goal-column] can be used to create
a semipermanent goal column for this command.
Then instead of trying to move exactly vertically (or as close as possible),
this command moves to the specified goal column (or as close as possible).
The goal column is stored in the variable @code{goal-column}, which is nil
when there is no goal column.  Note that setting @code{goal-column}
overrides @code{line-move-visual} and causes this command to move by buffer
lines rather than by display lines.

@item @kbd{<up>}

@item @kbd{C-p} (@code{previous-line})
@findex previous-line @r{(helm-eval-expression-map)}

@kindex <up> @r{(helm-eval-expression-map)}
@kindex C-p @r{(helm-eval-expression-map)}

(previous-line &optional ARG TRY-VSCROLL)

Move cursor vertically up ARG lines.
Interactively, vscroll tall lines if @code{auto-window-vscroll} is enabled.
Non-interactively, use TRY-VSCROLL to control whether to vscroll tall
lines: if either @code{auto-window-vscroll} or TRY-VSCROLL is nil, this
function will not vscroll.

ARG defaults to 1.

If there is no character in the target line exactly over the current column,
the cursor is positioned after the character in that line that spans this
column, or at the end of the line if it is not long enough.

If the variable @code{line-move-visual} is non-nil, this command moves
by display lines.  Otherwise, it moves by buffer lines, without
taking variable-width characters or continued lines into account.
See \[previous-logical-line] for a command that always moves by buffer lines.

The command \[set-goal-column] can be used to create
a semipermanent goal column for this command.
Then instead of trying to move exactly vertically (or as close as possible),
this command moves to the specified goal column (or as close as possible).
The goal column is stored in the variable @code{goal-column}, which is nil
when there is no goal column.  Note that setting @code{goal-column}
overrides @code{line-move-visual} and causes this command to move by buffer
lines rather than by display lines.
@end table

@node Commands in library @code{helm-eval} (excludes keymaps)
@subsection Commands in library @code{helm-eval} (excludes keymaps)

@anchor{Eval}
@subsubheading Eval

@table @asis
@item @code{helm-eval-expression}
@findex helm-eval-expression

(helm-eval-expression ARG)

Preconfigured @code{helm} for @code{helm-source-evaluation-result}.

@item @kbd{C-x c C-:} (@code{helm-eval-expression-with-eldoc})
@findex helm-eval-expression-with-eldoc

@kindex C-x c C-:

Preconfigured @code{helm} for @code{helm-source-evaluation-result} with @code{eldoc} support.
@end table

@anchor{uncategorized (31)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x c C-} (@code{helm-calcul-expression})
@findex helm-calcul-expression

@kindex C-x c C-,

Preconfigured @code{helm} for @code{helm-source-calculation-result}.
@end table

@node Options in library @samp{helm-eval}
@subsection Options in library @samp{helm-eval}

@anchor{uncategorized (32)}
@subsubheading uncategorized

@table @asis
@item @code{helm-eldoc-in-minibuffer-show-fn}
@vindex helm-eldoc-in-minibuffer-show-fn

@strong{Standard Value}: helm-show-info-in-mode-line

A function to display eldoc info.
Should take one arg: the string to display.

@item @code{helm-show-info-in-mode-line-delay}
@vindex helm-show-info-in-mode-line-delay

@strong{Standard Value}: 12

Eldoc will show info in mode-line during this delay if user is idle.
@end table

@node Library helm-external
@section Library: helm-external

@menu
* Commands in library @code{helm-external} (excludes keymaps)::
* Options in library @samp{helm-external}::
@end menu

@node Commands in library @code{helm-external} (excludes keymaps)
@subsection Commands in library @code{helm-external} (excludes keymaps)

@anchor{uncategorized (33)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x c C-c C-x} (@code{helm-run-external-command})
@findex helm-run-external-command

@kindex C-x c C-c C-x

(helm-run-external-command PROGRAM)

Preconfigured @code{helm} to run External PROGRAM asyncronously from Emacs.
If program is already running exit with error.
You can set your own list of commands with
@code{helm-external-commands-list}.
@end table

@node Options in library @samp{helm-external}
@subsection Options in library @samp{helm-external}

@anchor{External}
@subsubheading External

@table @asis
@item @code{helm-default-external-file-browser}
@vindex helm-default-external-file-browser

@strong{Standard Value}: nautilus

Default external file browser for your system.
Directories will be opened externally with it when opening file
externally in @code{helm-find-files}.
Set to nil if you do not have an external file browser or do not
want to use it.
Windows users should set that to ``explorer.exe''.

@item @code{helm-external-programs-associations}
@vindex helm-external-programs-associations

@strong{Standard Value}: nil

Alist to store externals programs associated with file extension.
This variable overhide setting in .mailcap file.
E.g.: ’((``jpg'' . ``gqview'') (``pdf'' . ``xpdf''))
@end table

@anchor{uncategorized (34)}
@subsubheading uncategorized

@table @asis
@item @code{helm-raise-command}
@vindex helm-raise-command

@strong{Standard Value}: nil

A shell command to jump to a window running specific program.
Need external program wmctrl.
This will be use with @code{format}, so use something like ``wmctrl -xa %s''.
@end table

@node Library helm-fd
@section Library: helm-fd

@menu
* Commands in keymap @code{helm-fd-map}::
* Options in library @samp{helm-fd}::
@end menu

@node Commands in keymap @code{helm-fd-map}
@subsection Commands in keymap @code{helm-fd-map}

@anchor{uncategorized (35)}
@subsubheading uncategorized

@table @asis
@item @kbd{DEL} (@code{helm-delete-backward-no-update})
@findex helm-delete-backward-no-update @r{(helm-fd-map)}

@kindex DEL @r{(helm-fd-map)}

(helm-delete-backward-no-update ARG)

Disable update and delete ARG chars backward.
Update is reenabled when idle 1s.

@item @kbd{M-<down>} (@code{helm-fd-next-directory})
@findex helm-fd-next-directory @r{(helm-fd-map)}

@kindex M-<down> @r{(helm-fd-map)}

Move to next directory in a helm-fd source.

@item @kbd{M-<up>} (@code{helm-fd-previous-directory})
@findex helm-fd-previous-directory @r{(helm-fd-map)}

@kindex M-<up> @r{(helm-fd-map)}

Move to previous directory in a helm-fd source.
@end table

@node Options in library @samp{helm-fd}
@subsection Options in library @samp{helm-fd}

@anchor{uncategorized (36)}
@subsubheading uncategorized

@table @asis
@item @code{helm-fd-switches}
@vindex helm-fd-switches

@strong{Standard Value}:

@lisp
("--hidden" "--type" "f" "--type" "d" "--color" "always")
@end lisp

A list of options to pass to fd shell command.
@end table

@node Library helm-files
@section Library: helm-files

@menu
* Modes in library @code{helm-files}::
* Commands in keymap @code{helm-browse-project-map}::
* Commands in keymap @code{helm-file-name-history-map}::
* Commands in keymap @code{helm-find-files-map}::
* Commands in keymap @code{helm-read-file-map}::
* Commands in library @code{helm-files} (excludes keymaps)::
* Options in library @samp{helm-files}::
* Hooks in library @samp{helm-files}::
@end menu

@node Modes in library @code{helm-files}
@subsection Modes in library @code{helm-files}

@anchor{minor-mode-p (9)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-ff--delete-async-modeline-mode}
@findex helm-ff--delete-async-modeline-mode

(helm-ff--delete-async-modeline-mode &optional ARG)

Notify mode-line that an async process run.

If called interactively, toggle `Helm-Ff--Delete-Async-Modeline
mode'.  If the prefix argument is positive, enable the mode, and
if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.
@end table

@node Commands in keymap @code{helm-browse-project-map}
@subsection Commands in keymap @code{helm-browse-project-map}

@anchor{Run Grep on Project}
@subsubheading Run Grep on Project

@table @asis
@item @kbd{M-g a} (@code{helm-browse-project-run-ag})
@findex helm-browse-project-run-ag @r{(helm-browse-project-map)}

@kindex M-g a @r{(helm-browse-project-map)}

Run @code{helm-grep} AG from @code{helm-browse-project}.
@end table

@node Commands in keymap @code{helm-file-name-history-map}
@subsection Commands in keymap @code{helm-file-name-history-map}

@anchor{Act on File name history}
@subsubheading Act on File name history

@table @asis
@item @kbd{C-x C-f} (@code{helm-ff-file-name-history-run-ff})
@findex helm-ff-file-name-history-run-ff @r{(helm-file-name-history-map)}

@kindex C-x C-f @r{(helm-file-name-history-map)}

Switch back to current HFF session with selection as preselect.

@item @kbd{C-c d} (@code{helm-file-name-history-show-or-hide-deleted})
@findex helm-file-name-history-show-or-hide-deleted @r{(helm-file-name-history-map)}

@kindex C-c d @r{(helm-file-name-history-map)}
@end table

@node Commands in keymap @code{helm-find-files-map}
@subsection Commands in keymap @code{helm-find-files-map}

@anchor{Control filtering behaviour}
@subsubheading Control filtering behaviour

@table @asis
@item @kbd{C-_} (@code{helm-ff-undo})
@findex helm-ff-undo @r{(helm-find-files-map)}

@kindex C-_ @r{(helm-find-files-map)}

Undo minibuffer in @code{helm-find-files}.
Ensure disabling @code{helm-ff-auto-update-flag} before undoing.

@item @kbd{C-<backspace>}

@item @kbd{C-c DEL} (@code{helm-ff-run-toggle-auto-update})
@findex helm-ff-run-toggle-auto-update @r{(helm-find-files-map)}

@kindex C-<backspace> @r{(helm-find-files-map)}
@kindex C-c DEL @r{(helm-find-files-map)}
@end table

@anchor{RET}
@subsubheading RET

@table @asis
@item @kbd{@key{RET}} (@code{helm-ff-RET})
@findex helm-ff-RET @r{(helm-find-files-map)}

@kindex RET @r{(helm-find-files-map)}

Default action for RET in @code{helm-find-files}.

Behave differently depending on @code{helm-selection}:

@itemize
@item
candidate basename is ``.'' => open it in dired.
@item
candidate is a directory    => expand it.
@item
candidate is a file         => open it.
@end itemize
@end table

@anchor{Move up or down the directory tree}
@subsubheading Move up or down the directory tree

@table @asis
@item @kbd{<left>}

@item @kbd{C-l} (@code{helm-find-files-up-one-level})
@findex helm-find-files-up-one-level @r{(helm-find-files-map)}

@kindex <left> @r{(helm-find-files-map)}
@kindex C-l @r{(helm-find-files-map)}

(helm-find-files-up-one-level ARG)

Go up one level like unix command @code{cd ..}.
If prefix numeric arg is given go ARG level up.

@item @kbd{C-r} (@code{helm-find-files-down-last-level})
@findex helm-find-files-down-last-level @r{(helm-find-files-map)}

@kindex C-r @r{(helm-find-files-map)}

Retrieve previous paths reached by @code{C-l} in helm-find-files.
@end table

@anchor{Sort the listing}
@subsubheading Sort the listing

@table @asis
@item @kbd{S-<f1>} (@code{helm-ff-sort-alpha})
@findex helm-ff-sort-alpha @r{(helm-find-files-map)}

@kindex S-<f1> @r{(helm-find-files-map)}

@item @kbd{S-<f2>} (@code{helm-ff-sort-by-newest})
@findex helm-ff-sort-by-newest @r{(helm-find-files-map)}

@kindex S-<f2> @r{(helm-find-files-map)}

@item @kbd{S-<f3>} (@code{helm-ff-sort-by-size})
@findex helm-ff-sort-by-size @r{(helm-find-files-map)}

@kindex S-<f3> @r{(helm-find-files-map)}
@end table

@anchor{List directories or files only}
@subsubheading List directories or files only

@table @asis
@item @kbd{S-<f4>} (@code{helm-ff-toggle-dirs-only})
@findex helm-ff-toggle-dirs-only @r{(helm-find-files-map)}

@kindex S-<f4> @r{(helm-find-files-map)}

Show only directories in helm-find-files.

@item @kbd{S-<f5>} (@code{helm-ff-toggle-files-only})
@findex helm-ff-toggle-files-only @r{(helm-find-files-map)}

@kindex S-<f5> @r{(helm-find-files-map)}

Show only files in helm-find-files.
@end table

@anchor{Configure display}
@subsubheading Configure display

@table @asis
@item @kbd{C-]} (@code{helm-ff-run-toggle-basename})
@findex helm-ff-run-toggle-basename @r{(helm-find-files-map)}

@kindex C-] @r{(helm-find-files-map)}
@end table

@anchor{Visit files in other window or frame}
@subsubheading Visit files in other window or frame

@table @asis
@item @kbd{C-c C-o} (@code{helm-ff-run-switch-other-frame})
@findex helm-ff-run-switch-other-frame @r{(helm-find-files-map)}

@kindex C-c C-o @r{(helm-find-files-map)}

Run switch to other frame action from @code{helm-source-find-files}.

@item @kbd{C-c o} (@code{helm-ff-run-switch-other-window})
@findex helm-ff-run-switch-other-window @r{(helm-find-files-map)}

@kindex C-c o @r{(helm-find-files-map)}

Run switch to other window action from @code{helm-source-find-files}.
When a prefix arg is provided, split is done vertically.

@item @kbd{C-c C-t} (@code{helm-ff-find-file-other-tab})
@findex helm-ff-find-file-other-tab @r{(helm-find-files-map)}

@kindex C-c C-t @r{(helm-find-files-map)}

Run find file in other tab action from @code{helm-source-buffers-list}.

@item @kbd{C-c r} (@code{helm-ff-run-find-file-as-root})
@findex helm-ff-run-find-file-as-root @r{(helm-find-files-map)}

@kindex C-c r @r{(helm-find-files-map)}
@end table

@anchor{Kill Buffers (1)}
@subsubheading Kill Buffers

@table @asis
@item @kbd{M-K} (@code{helm-ff-run-kill-buffer-persistent})
@findex helm-ff-run-kill-buffer-persistent @r{(helm-find-files-map)}

@kindex M-K @r{(helm-find-files-map)}

Execute @code{helm-ff-kill-buffer-fname} without quitting.
@end table

@anchor{Open files externally}
@subsubheading Open files externally

@table @asis
@item @kbd{C-x C-v} (@code{helm-ff-run-find-alternate-file})
@findex helm-ff-run-find-alternate-file @r{(helm-find-files-map)}

@kindex C-x C-v @r{(helm-find-files-map)}

@item @kbd{C-c C-x} (@code{helm-ff-run-open-file-externally})
@findex helm-ff-run-open-file-externally @r{(helm-find-files-map)}

@kindex C-c C-x @r{(helm-find-files-map)}

Run open file externally command action from @code{helm-source-find-files}.

@item @kbd{C-c X} (@code{helm-ff-run-open-file-with-default-tool})
@findex helm-ff-run-open-file-with-default-tool @r{(helm-find-files-map)}

@kindex C-c X @r{(helm-find-files-map)}

Run open file externally command action from @code{helm-source-find-files}.

@item @kbd{C-c C-v} (@code{helm-ff-run-preview-file-externally})
@findex helm-ff-run-preview-file-externally @r{(helm-find-files-map)}

@kindex C-c C-v @r{(helm-find-files-map)}
@end table

@anchor{Copy files}
@subsubheading Copy files

@table @asis
@item @kbd{M-C} (@code{helm-ff-run-copy-file})
@findex helm-ff-run-copy-file @r{(helm-find-files-map)}

@kindex M-C @r{(helm-find-files-map)}

Run Copy file action from @code{helm-source-find-files}.

@item @kbd{M-V} (@code{helm-ff-run-rsync-file})
@findex helm-ff-run-rsync-file @r{(helm-find-files-map)}

@kindex M-V @r{(helm-find-files-map)}

Run Rsync file action from @code{helm-source-find-files}.
@end table

@anchor{Run Query-Replace on Filenames}
@subsubheading Run Query-Replace on Filenames

@table @asis
@item @kbd{M-@@} (@code{helm-ff-run-query-replace-fnames-on-marked})
@findex helm-ff-run-query-replace-fnames-on-marked @r{(helm-find-files-map)}

@kindex M-@ @r{(helm-find-files-map)}

@item @kbd{M-R} (@code{helm-ff-run-rename-file})
@findex helm-ff-run-rename-file @r{(helm-find-files-map)}

@kindex M-R @r{(helm-find-files-map)}

Run Rename file action from @code{helm-source-find-files}.
@end table

@anchor{Run Query-Replace on Buffers' Content}
@subsubheading Run Query-Replace on Buffers' Content

@table @asis
@item @kbd{M-%} (@code{helm-ff-run-query-replace})
@findex helm-ff-run-query-replace @r{(helm-find-files-map)}

@kindex M-% @r{(helm-find-files-map)}

@item @kbd{C-M-%} (@code{helm-ff-run-query-replace-regexp})
@findex helm-ff-run-query-replace-regexp @r{(helm-find-files-map)}

@kindex C-M-% @r{(helm-find-files-map)}
@end table

@anchor{Touch files}
@subsubheading Touch files

@table @asis
@item @kbd{M-T} (@code{helm-ff-run-touch-files})
@findex helm-ff-run-touch-files @r{(helm-find-files-map)}

@kindex M-T @r{(helm-find-files-map)}

Used to interactively run touch file action from keyboard.
@end table

@anchor{Delete Persistently}
@subsubheading Delete Persistently

@table @asis
@item @kbd{M-D} (@code{helm-ff-run-delete-file})
@findex helm-ff-run-delete-file @r{(helm-find-files-map)}

@kindex M-D @r{(helm-find-files-map)}

Run Delete file action from @code{helm-source-find-files}.

@item @kbd{C-c d} (@code{helm-ff-persistent-delete})
@findex helm-ff-persistent-delete @r{(helm-find-files-map)}

@kindex C-c d @r{(helm-find-files-map)}

Delete current candidate without quitting.
@end table

@anchor{Operate on Images}
@subsubheading Operate on Images

@table @asis
@item @kbd{M--} (@code{helm-ff-decrease-image-size-persistent})
@findex helm-ff-decrease-image-size-persistent @r{(helm-find-files-map)}

@kindex M-- @r{(helm-find-files-map)}

Decrease image size without quitting helm.

@item @kbd{M-+} (@code{helm-ff-increase-image-size-persistent})
@findex helm-ff-increase-image-size-persistent @r{(helm-find-files-map)}

@kindex M-+ @r{(helm-find-files-map)}

Increase image size without quitting helm.

@item @kbd{M-l} (@code{helm-ff-rotate-left-persistent})
@findex helm-ff-rotate-left-persistent @r{(helm-find-files-map)}

@kindex M-l @r{(helm-find-files-map)}

Rotate image left without quitting helm.

@item @kbd{M-r} (@code{helm-ff-rotate-right-persistent})
@findex helm-ff-rotate-right-persistent @r{(helm-find-files-map)}

@kindex M-r @r{(helm-find-files-map)}

Rotate image right without quitting helm.
@end table

@anchor{Run Grep and friends}
@subsubheading Run Grep and friends

@table @asis
@item @kbd{M-g g} (@code{helm-ff-run-git-grep})
@findex helm-ff-run-git-grep @r{(helm-find-files-map)}

@kindex M-g g @r{(helm-find-files-map)}

Run git-grep action from @code{helm-source-find-files}.

@item @kbd{C-s}

@item @kbd{M-g s} (@code{helm-ff-run-grep})
@findex helm-ff-run-grep @r{(helm-find-files-map)}

@kindex C-s @r{(helm-find-files-map)}
@kindex M-g s @r{(helm-find-files-map)}

Run Grep action from @code{helm-source-find-files}.

@item @kbd{M-g a} (@code{helm-ff-run-grep-ag})
@findex helm-ff-run-grep-ag @r{(helm-find-files-map)}

@kindex M-g a @r{(helm-find-files-map)}

@item @kbd{M-g i} (@code{helm-ff-run-gid})
@findex helm-ff-run-gid @r{(helm-find-files-map)}

@kindex M-g i @r{(helm-find-files-map)}

@item @kbd{M-g p} (@code{helm-ff-run-pdfgrep})
@findex helm-ff-run-pdfgrep @r{(helm-find-files-map)}

@kindex M-g p @r{(helm-find-files-map)}

Run Pdfgrep action from @code{helm-source-find-files}.

@item @kbd{M-g z} (@code{helm-ff-run-zgrep})
@findex helm-ff-run-zgrep @r{(helm-find-files-map)}

@kindex M-g z @r{(helm-find-files-map)}

Run Grep action from @code{helm-source-find-files}.
@end table

@anchor{Run find or locate}
@subsubheading Run find or locate

@table @asis
@item @kbd{C-c /} (@code{helm-ff-run-find-sh-command})
@findex helm-ff-run-find-sh-command @r{(helm-find-files-map)}

@kindex C-c / @r{(helm-find-files-map)}

Run find shell command action with key from @code{helm-find-files}.

@item @kbd{C-x C-f} (@code{helm-ff-run-locate})
@findex helm-ff-run-locate @r{(helm-find-files-map)}

@kindex C-x C-f @r{(helm-find-files-map)}

Run locate action from @code{helm-source-find-files}.

@item @kbd{C-/} (@code{helm-ff-run-fd})
@findex helm-ff-run-fd @r{(helm-find-files-map)}

@kindex C-/ @r{(helm-find-files-map)}

Run fd shell command action with key from @code{helm-find-files}.
@end table

@anchor{Show Properties}
@subsubheading Show Properties

@table @asis
@item @kbd{M-i} (@code{helm-ff-properties-persistent})
@findex helm-ff-properties-persistent @r{(helm-find-files-map)}

@kindex M-i @r{(helm-find-files-map)}

Show properties without quitting helm.
@end table

@anchor{Browse File name history}
@subsubheading Browse File name history

@table @asis
@item @kbd{C-c h} (@code{helm-ff-file-name-history})
@findex helm-ff-file-name-history @r{(helm-find-files-map)}

@kindex C-c h @r{(helm-find-files-map)}

Switch to @code{file-name-history} without quitting @code{helm-find-files}.

@item @kbd{M-p} (@code{helm-find-files-history})
@findex helm-find-files-history @r{(helm-find-files-map)}

@kindex M-p @r{(helm-find-files-map)}

(helm-find-files-history ARG &key (COMP-READ t))

The @code{helm-find-files} history.
Show the first @code{helm-ff-history-max-length} elements of
@code{helm-ff-history} in an @code{helm-comp-read}.
@end table

@anchor{Attach files to an Email}
@subsubheading Attach files to an Email

@table @asis
@item @kbd{C-c C-a} (@code{helm-ff-run-mail-attach-files})
@findex helm-ff-run-mail-attach-files @r{(helm-find-files-map)}

@kindex C-c C-a @r{(helm-find-files-map)}

Run mail attach files command action from @code{helm-source-find-files}.

@item @kbd{C-x C-q} (@code{helm-ff-run-marked-files-in-dired})
@findex helm-ff-run-marked-files-in-dired @r{(helm-find-files-map)}

@kindex C-x C-q @r{(helm-find-files-map)}

Execute @code{helm-marked-files-in-dired} interactively.
@end table

@anchor{Operate on Elisp files}
@subsubheading Operate on Elisp files

@table @asis
@item @kbd{M-B} (@code{helm-ff-run-byte-compile-file})
@findex helm-ff-run-byte-compile-file @r{(helm-find-files-map)}

@kindex M-B @r{(helm-find-files-map)}

Run Byte compile file action from @code{helm-source-find-files}.

@item @kbd{M-L} (@code{helm-ff-run-load-file})
@findex helm-ff-run-load-file @r{(helm-find-files-map)}

@kindex M-L @r{(helm-find-files-map)}

Run Load file action from @code{helm-source-find-files}.
@end table

@anchor{Run Ediff and Emerge}
@subsubheading Run Ediff and Emerge

@table @asis
@item @kbd{C-c =} (@code{helm-ff-run-ediff-file})
@findex helm-ff-run-ediff-file @r{(helm-find-files-map)}

@kindex C-c = @r{(helm-find-files-map)}

Run Ediff file action from @code{helm-source-find-files}.

@item @kbd{M-=} (@code{helm-ff-run-ediff-merge-file})
@findex helm-ff-run-ediff-merge-file @r{(helm-find-files-map)}

@kindex M-= @r{(helm-find-files-map)}

Run Ediff merge file action from @code{helm-source-find-files}.
@end table

@anchor{uncategorized Ff Run File}
@subsubheading uncategorized Ff Run File

@table @asis
@item @kbd{C-c p} (@code{helm-ff-run-print-file})
@findex helm-ff-run-print-file @r{(helm-find-files-map)}

@kindex C-c p @r{(helm-find-files-map)}

Run Print file action from @code{helm-source-find-files}.
@end table

@anchor{Link files}
@subsubheading Link files

@table @asis
@item @kbd{M-H} (@code{helm-ff-run-hardlink-file})
@findex helm-ff-run-hardlink-file @r{(helm-find-files-map)}

@kindex M-H @r{(helm-find-files-map)}

Run Hardlink file action from @code{helm-source-find-files}.

@item @kbd{M-Y} (@code{helm-ff-run-relsymlink-file})
@findex helm-ff-run-relsymlink-file @r{(helm-find-files-map)}

@kindex M-Y @r{(helm-find-files-map)}

Run Symlink file action from @code{helm-source-find-files}.

@item @kbd{M-S} (@code{helm-ff-run-symlink-file})
@findex helm-ff-run-symlink-file @r{(helm-find-files-map)}

@kindex M-S @r{(helm-find-files-map)}

Run Symlink file action from @code{helm-source-find-files}.
@end table

@anchor{uncategorized Ff Run uncategorized}
@subsubheading uncategorized Ff Run uncategorized

@table @asis
@item @kbd{C-x C-d} (@code{helm-ff-run-browse-project})
@findex helm-ff-run-browse-project @r{(helm-find-files-map)}

@kindex C-x C-d @r{(helm-find-files-map)}

@item @kbd{C-c i} (@code{helm-ff-run-complete-fn-at-point})
@findex helm-ff-run-complete-fn-at-point @r{(helm-find-files-map)}

@kindex C-c i @r{(helm-find-files-map)}

Run complete file name action from @code{helm-source-find-files}.

@item @kbd{M-.} (@code{helm-ff-run-etags})
@findex helm-ff-run-etags @r{(helm-find-files-map)}

@kindex M-. @r{(helm-find-files-map)}

Run Etags command action from @code{helm-source-find-files}.

@item @kbd{C-c @@} (@code{helm-ff-run-insert-org-link})
@findex helm-ff-run-insert-org-link @r{(helm-find-files-map)}

@kindex C-c @ @r{(helm-find-files-map)}
@end table

@anchor{Manage Helm Find Files Sessioin}
@subsubheading Manage Helm Find Files Sessioin

@table @asis
@item @kbd{C-x r m} (@code{helm-ff-bookmark-set})
@findex helm-ff-bookmark-set @r{(helm-find-files-map)}

@kindex C-x r m @r{(helm-find-files-map)}

Record @code{helm-find-files} session in bookmarks.

@item @kbd{C-x r b} (@code{helm-find-files-switch-to-bookmark})
@findex helm-find-files-switch-to-bookmark @r{(helm-find-files-map)}

@kindex C-x r b @r{(helm-find-files-map)}

Switch to helm-bookmark for @code{helm-find-files} from @code{helm-find-files.}
@end table

@anchor{Run Eshell}
@subsubheading Run Eshell

@table @asis
@item @kbd{M-e} (@code{helm-ff-run-switch-to-shell})
@findex helm-ff-run-switch-to-shell @r{(helm-find-files-map)}

@kindex M-e @r{(helm-find-files-map)}

Run switch to eshell action from @code{helm-source-find-files}.

@item @kbd{M-!} (@code{helm-ff-run-eshell-command-on-file})
@findex helm-ff-run-eshell-command-on-file @r{(helm-find-files-map)}

@kindex M-! @r{(helm-find-files-map)}

Run eshell command on file action from @code{helm-source-find-files}.
@end table

@node Commands in keymap @code{helm-read-file-map}
@subsection Commands in keymap @code{helm-read-file-map}

@anchor{Control what is displayed (1)}
@subsubheading Control what is displayed

@table @asis
@item @kbd{C-]} (@code{helm-ff-run-toggle-basename})
@findex helm-ff-run-toggle-basename @r{(helm-read-file-map)}

@kindex C-] @r{(helm-read-file-map)}
@end table

@anchor{RET (1)}
@subsubheading RET

@table @asis
@item @kbd{@key{RET}} (@code{helm-ff-RET})
@findex helm-ff-RET @r{(helm-read-file-map)}

@kindex RET @r{(helm-read-file-map)}

Default action for RET in @code{helm-find-files}.

Behave differently depending on @code{helm-selection}:

@itemize
@item
candidate basename is ``.'' => open it in dired.
@item
candidate is a directory    => expand it.
@item
candidate is a file         => open it.
@end itemize
@end table

@anchor{Return empty string}
@subsubheading Return empty string

@table @asis
@item @kbd{C-<return>}

@item @kbd{M-@key{RET}} (@code{helm-cr-empty-string})
@findex helm-cr-empty-string @r{(helm-read-file-map)}

@kindex C-<return> @r{(helm-read-file-map)}
@kindex M-RET @r{(helm-read-file-map)}

Return empty string.
@end table

@anchor{Undo Minibuffer}
@subsubheading Undo Minibuffer

@table @asis
@item @kbd{C-_} (@code{helm-ff-undo})
@findex helm-ff-undo @r{(helm-read-file-map)}

@kindex C-_ @r{(helm-read-file-map)}

Undo minibuffer in @code{helm-find-files}.
Ensure disabling @code{helm-ff-auto-update-flag} before undoing.
@end table

@anchor{Go up and down directory tree}
@subsubheading Go up and down directory tree

@table @asis
@item @kbd{C-r} (@code{helm-find-files-down-last-level})
@findex helm-find-files-down-last-level @r{(helm-read-file-map)}

@kindex C-r @r{(helm-read-file-map)}

Retrieve previous paths reached by @code{C-l} in helm-find-files.

@item @kbd{<left>}

@item @kbd{C-l}

@item @kbd{C-.} (@code{helm-find-files-up-one-level})
@findex helm-find-files-up-one-level @r{(helm-read-file-map)}

@kindex <left> @r{(helm-read-file-map)}
@kindex C-l @r{(helm-read-file-map)}
@kindex C-. @r{(helm-read-file-map)}

(helm-find-files-up-one-level ARG)

Go up one level like unix command @code{cd ..}.
If prefix numeric arg is given go ARG level up.
@end table

@anchor{File name history}
@subsubheading File name history

@table @asis
@item @kbd{C-c h} (@code{helm-ff-file-name-history})
@findex helm-ff-file-name-history @r{(helm-read-file-map)}

@kindex C-c h @r{(helm-read-file-map)}

Switch to @code{file-name-history} without quitting @code{helm-find-files}.
@end table

@anchor{Toggle Auto-update}
@subsubheading Toggle Auto-update

@table @asis
@item @kbd{C-<backspace>}

@item @kbd{C-c DEL} (@code{helm-ff-run-toggle-auto-update})
@findex helm-ff-run-toggle-auto-update @r{(helm-read-file-map)}

@kindex C-<backspace> @r{(helm-read-file-map)}
@kindex C-c DEL @r{(helm-read-file-map)}
@end table

@node Commands in library @code{helm-files} (excludes keymaps)
@subsection Commands in library @code{helm-files} (excludes keymaps)

@anchor{Delete}
@subsubheading Delete

@table @asis
@item @code{helm-delete-tramp-connection}
@findex helm-delete-tramp-connection

Allow deleting tramp connection or marked tramp connections at once.

This replace @code{tramp-cleanup-connection} which is partially broken
in Emacs < to 25.1.50.1 (See Emacs bug @uref{http://debbugs.gnu.org/cgi/bugreport.cgi?bug=24432}).

It allows additionally to delete more than one connection at
once.
@end table

@anchor{Ff}
@subsubheading Ff

@table @asis
@item @code{helm-ff-RET-must-match}
@findex helm-ff-RET-must-match

Same as @code{helm-ff-RET} but used in must-match map.

@item @code{helm-ff-TAB}
@findex helm-ff-TAB

(helm-ff-TAB ARG)

Default action for TAB in @code{helm-find-files}.

Behave differently depending on @code{helm-selection}:

@itemize
@item
candidate basename is ``.'' => open the action menu.
@item
candidate is a directory    => expand it.
@item
candidate is a file         => open action menu.
@end itemize

Called with a prefix arg open menu unconditionally.

@item @code{helm-ff-delete-char-backward}
@findex helm-ff-delete-char-backward

Go up one level or disable HFF auto update and delete char backward.

Going up one level works only when pattern is a directory endings
with ``/'', otherwise this command deletes char backward.

Going up one level can be disabled if necessary by deleting ``/''
at end of pattern using \<helm-map>\[backward-char] and
\[helm-delete-minibuffer-contents].

@item @code{helm-ff-kill-rsync-process}
@findex helm-ff-kill-rsync-process

(helm-ff-kill-rsync-process PROCESS)

Kill rsync process PROCESS@.

When called interactively prompt user with completion when more than
one process.
@end table

@anchor{minor-mode-p (10)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-ff--delete-async-modeline-mode}
@findex helm-ff--delete-async-modeline-mode

(helm-ff--delete-async-modeline-mode &optional ARG)

Notify mode-line that an async process run.

If called interactively, toggle `Helm-Ff--Delete-Async-Modeline
mode'.  If the prefix argument is positive, enable the mode, and
if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.
@end table

@anchor{uncategorized (37)}
@subsubheading uncategorized

@table @asis
@item @code{helm-browse-project}
@findex helm-browse-project

(helm-browse-project ARG)

Preconfigured helm to browse projects.
Browse files and see status of project with its VCS@.
Only HG and GIT are supported for now.
Fall back to @code{helm-browse-project-find-files} if current
directory is not under control of one of those VCS@.
With a prefix ARG browse files recursively, with two prefix ARG
rebuild the cache.
If the current directory is found in the cache, start
@code{helm-browse-project-find-files} even with no prefix ARG@.
NOTE: The prefix ARG have no effect on the VCS controlled
directories.

Needed dependencies for VCS:
@uref{https://github.com/emacs-helm/helm-ls-git}
and
@uref{https://github.com/emacs-helm/helm-ls-hg}.

@item @kbd{C-x c C-x C-f}

@item @kbd{<open>}

@item @kbd{C-x C-f} (@code{helm-find-files})
@findex helm-find-files

@kindex C-x c C-x C-f
@kindex <open>
@kindex C-x C-f

(helm-find-files ARG)

Preconfigured @code{helm} for helm implementation of @code{find-file}.
Called with a prefix arg show history if some.
Don't call it from programs, use @code{helm-find-files-1} instead.
This is the starting point for nearly all actions you can do on
files.

@item @code{helm-projects-history}
@findex helm-projects-history

(helm-projects-history ARG)
@end table

@node Options in library @samp{helm-files}
@subsection Options in library @samp{helm-files}

@anchor{On}
@subsubheading On

@table @asis
@item @code{helm-substitute-in-filename-stay-on-remote}
@vindex helm-substitute-in-filename-stay-on-remote

@strong{Standard Value}: nil

Don’t switch back to local filesystem when expanding pattern with / or ~/.
@end table

@anchor{List}
@subsubheading List

@table @asis
@item @code{helm-list-directory-function}
@vindex helm-list-directory-function

@strong{Standard Value}: helm-list-dir-external

The function used in @code{helm-find-files} to list remote directories.

Actually Helm provides two functions to do this:
@code{helm-list-dir-lisp} and @code{helm-list-dir-external}.

Using @code{helm-list-dir-external} will provide a similar display to
what is provided with local files i.e. colorized symlinks,
executables files etc., whereas using @code{helm-list-dir-lisp} will
allow colorizing only directories but it is more portable.

NOTE: @code{helm-list-dir-external} needs ls and awk as dependencies.
Also the ls version installed on the remote side should support
the same arguments as the GNU/ls version, which are -A -1 -F -b
and -Q@.  So even if you are using a GNU/ls version locally and you
want to connect e.g. on a Freebsd server, you may have failures
due to the incompatible ls version installed on remote server.  In
such case use @code{helm-list-dir-lisp} which works everywhere but is
slower and less featured (only directories colorized).
@end table

@anchor{Rsync}
@subsubheading Rsync

@table @asis
@item @code{helm-rsync-percent-sign}
@vindex helm-rsync-percent-sign

@strong{Standard Value}: ％

Percentage unicode sign to use in Rsync reporter.

@item @code{helm-rsync-switches}
@vindex helm-rsync-switches

@strong{Standard Value}:

@lisp
("-a" "-z" "-h" "-s" "--info=all2")
@end lisp

Rsync options to use with HFF Rsync action.
Note: Using ``--info=all2'' allows having the name of the file
currently transfered in an help-echo in mode-line, if you use
``--info=progress2'' you will not have this information.
@end table

@anchor{Mode (4)}
@subsubheading Mode

@table @asis
@item @code{helm-rsync-no-mode-line-update}
@vindex helm-rsync-no-mode-line-update

@strong{Standard Value}: nil

When non nil don’t update mode-line when rsync is running.
This is useful if you display the progress bar somewhere else,
e.g. with minibuffer-line in minibuffer, in this case updating
mode-line may create flickering in other frame’s mode-line.
@end table

@anchor{Files Find}
@subsubheading Files Find

@table @asis
@item @code{helm-browse-project-default-find-files-fn}
@vindex helm-browse-project-default-find-files-fn

@strong{Standard Value}: helm-browse-project-fd-find-files

The default function to retrieve files in a non-vc directory.

A function that takes a directory name as only arg.

@item @code{helm-find-files-actions}
@vindex helm-find-files-actions

@strong{Standard Value}:

@lisp
(("Find File" . helm-find-file-or-marked)
 ("Find file in Dired" . helm-point-file-in-dired)
 ("View file" . view-file)
 ("Query replace fnames on marked ~M-@@~" . helm-ff-query-replace-fnames-on-marked)
 ("Marked files in dired ~C-x C-q, C-u wdired~" . helm-marked-files-in-dired)
 ("Query replace contents on marked ~M-%~" . helm-ff-query-replace)
 ("Query replace regexp contents on marked ~C-M-%~" . helm-ff-query-replace-regexp)
 ("Attach file(s) to mail buffer ~C-c C-a~" . helm-ff-mail-attach-files)
 ("Serial rename files" . helm-ff-serial-rename)
 ("Serial rename by symlinking files" . helm-ff-serial-rename-by-symlink)
 ("Serial rename by copying files" . helm-ff-serial-rename-by-copying)
 ("Open file with default tool" . helm-open-file-with-default-tool)
 ("Find file in hex dump" . hexl-find-file)
 ("Browse project ~C-x C-d~" . helm-ff-browse-project)
 ("Complete at point ~C-c i~" . helm-insert-file-name-completion-at-point)
 ("Insert as org link ~C-c @@~" . helm-files-insert-as-org-link)
 ("Find shell command ~C-c /~" . helm-ff-find-sh-command)
 ("Fd shell command (C-/)" . helm-ff-fd)
 ("Add marked files to file-cache" . helm-ff-cache-add-file)
 ("Open file externally ~C-c C-x, C-u to choose~" . helm-open-file-externally)
 ("Grep File(s) ~C-s, C-u Recurse~" . helm-find-files-grep)
 ("Grep current directory with AG ~M-g a, C-u select type~" . helm-find-files-ag)
 ("Git grep ~M-g g, C-u from root~" . helm-ff-git-grep)
 ("Zgrep File(s) ~M-g z, C-u Recurse~" . helm-ff-zgrep)
 ("Pdf Grep File(s)" . helm-ff-pdfgrep)
 ("Gid ~M-g i~" . helm-ff-gid)
 ("Switch to Eshell ~M-e~" . helm-ff-switch-to-shell)
 ("Etags ~M-., C-u reload tag file~" . helm-ff-etags-select)
 ("Eshell command on file(s) ~M-!, C-u take all marked as arguments.~" . helm-find-files-eshell-command-on-file)
 ("Find file as root ~C-c r~" . helm-find-file-as-root)
 ("Find alternate file ~C-x C-v~" . find-alternate-file)
 ("Ediff File ~C-c =~" . helm-find-files-ediff-files)
 ("Ediff Merge File ~M-=~" . helm-find-files-ediff-merge-files)
 ("Delete File(s) ~M-D~ (C-u reverse trash)" . helm-ff-delete-files)
 ("Touch File(s) ~M-T~" . helm-ff-touch-files)
 ("Copy file(s) ~M-C, C-u to follow~" . helm-find-files-copy)
 ("Rsync file(s) ~M-V~ (C-u edit command)" . helm-find-files-rsync)
 ("Rename file(s) ~M-R, C-u to follow~" . helm-find-files-rename)
 ("Backup files" . helm-find-files-backup)
 ("Symlink files(s) ~M-S, C-u to follow~" . helm-find-files-symlink)
 ("Relsymlink file(s) ~M-Y, C-u to follow~" . helm-find-files-relsymlink)
 ("Hardlink file(s) ~M-H, C-u to follow~" . helm-find-files-hardlink)
 ("Find file other window ~C-c o~" . helm-find-files-other-window)
 ("Find file other frame ~C-c C-o~" . find-file-other-frame)
 ("Find file other tab ~C-c C-t~" . find-file-other-tab)
 ("Print File ~C-c p, C-u to refresh~" . helm-ff-print)
 ("Locate ~C-x C-f, C-u to specify locate db~" . helm-ff-locate))
@end lisp

Actions for @code{helm-find-files}.

@item @code{helm-find-files-after-init-hook}
@vindex helm-find-files-after-init-hook

@strong{Standard Value}: nil

Hook that run after initialization of @code{helm-find-files}.

@item @code{helm-find-files-before-init-hook}
@vindex helm-find-files-before-init-hook

@strong{Standard Value}: nil

Hook that run before initialization of @code{helm-find-files}.

@item @code{helm-find-files-bookmark-prefix}
@vindex helm-find-files-bookmark-prefix

@strong{Standard Value}: Helm-find-files:

bookmark name prefix of @code{helm-find-files} sessions.

@item @code{helm-find-files-ignore-thing-at-point}
@vindex helm-find-files-ignore-thing-at-point

@strong{Standard Value}: nil

Use only @code{default-directory} as default input in @code{helm-find-files}.
I.e. text under cursor in @code{current-buffer} is ignored.
Note that when non-nil you will be unable to complete filename at
point in @code{current-buffer}.
@end table

@anchor{Files uncategorized}
@subsubheading Files uncategorized

@table @asis
@item @code{helm-files-save-history-extra-sources}
@vindex helm-files-save-history-extra-sources

@strong{Standard Value}:

@lisp
("Find" "Locate" "Recentf" "Files from Current Directory" "File Cache")
@end lisp

Extras source that save candidate to @code{file-name-history}.

@item @code{helm-trash-remote-files}
@vindex helm-trash-remote-files

@strong{Standard Value}: nil

Allow trashing remote files when non-nil.

Trashing remote files with tramp doesn’t work out of the box
unless the ’trash-cli’ package is installed.  This is why trashing
remote files from Helm is disabled by default.

Tramp is using external ’trash’ command in its @code{delete-file} and
@code{delete-directory} handlers when using
@code{delete-by-moving-to-trash}, which is documented nowhere in
Emacs.

If you want to enable this you will have to install the ’trash’
command on remote (and/or locally if you want to trash as root).
On Ubuntu-based distributions it is ’trash-cli’.
@end table

@anchor{Ff Mode}
@subsubheading Ff Mode

@table @asis
@item @code{helm-ff-preferred-shell-mode}
@vindex helm-ff-preferred-shell-mode

@strong{Standard Value}: eshell-mode

Shell to use to switch to a shell buffer from @code{helm-find-files}.
Possible values are @code{shell-mode}, @code{eshell-mode} and @code{term-mode}.
This affects @code{M-e} keybinding.
@end table

@anchor{Ff List}
@subsubheading Ff List

@table @asis
@item @code{helm-ff-printer-list}
@vindex helm-ff-printer-list

@strong{Standard Value}: nil

A list of available printers on your system.
When non-nil let you choose a printer to print file.
Otherwise when nil the variable @code{printer-name} will be used.
On Unix based systems (lpstat command needed) you don’t need to
set this, @code{helm-ff-find-printers} will find a list of available
printers for you.
@end table

@anchor{Ff Allow}
@subsubheading Ff Allow

@table @asis
@item @code{helm-ff-allow-recursive-deletes}
@vindex helm-ff-allow-recursive-deletes

@strong{Standard Value}: nil

When ’always don’t prompt for recursive deletion of directories.
When nil, will ask for recursive deletion.
Note that when deleting multiple directories you can answer !
when prompted to avoid being asked for next directories, so it
is probably better to not modify this variable.
@end table

@anchor{Ff Guess}
@subsubheading Ff Guess

@table @asis
@item @code{helm-ff-guess-ffap-filenames}
@vindex helm-ff-guess-ffap-filenames

@strong{Standard Value}: nil

Use ffap to guess local filenames at point in @code{helm-find-files}.
This doesn’t disable url or mail at point, see
@code{helm-ff-guess-ffap-urls} for this.

@item @code{helm-ff-guess-ffap-urls}
@vindex helm-ff-guess-ffap-urls

@strong{Standard Value}: t

Use ffap to guess local urls at point in @code{helm-find-files}.
This doesn’t disable guessing filenames at point, see
@code{helm-ff-guess-ffap-filenames} for this.
See also @code{ffap-url-unwrap-remote} that may override this
variable.
@end table

@anchor{Ff Level}
@subsubheading Ff Level

@table @asis
@item @code{helm-ff-DEL-up-one-level-maybe}
@vindex helm-ff-DEL-up-one-level-maybe

@strong{Standard Value}: nil

Use DEL to maybe go up one level when non nil.

Going up one level works only when pattern is a directory endings
with ``/'', otherwise this command deletes char backward.

When nil always delete char backward.
@end table

@anchor{Ff Delete}
@subsubheading Ff Delete

@table @asis
@item @code{helm-ff--delete-async-modeline-mode-hook}
@vindex helm-ff--delete-async-modeline-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm-ff--delete-async-modeline-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)
@end table

@anchor{Ff Update}
@subsubheading Ff Update

@table @asis
@item @code{helm-ff-reset-filters-on-update}
@vindex helm-ff-reset-filters-on-update

@strong{Standard Value}: t

Reset filter variables when changing directory.
When filtering directories/files only, switch back to a ``show all'' view
when moving out of directory when non nil.
@end table

@anchor{Ff History}
@subsubheading Ff History

@table @asis
@item @code{helm-ff-history-max-length}
@vindex helm-ff-history-max-length

@strong{Standard Value}: 100

Number of elements shown in @code{helm-find-files} history.
@end table

@anchor{Ff Initial}
@subsubheading Ff Initial

@table @asis
@item @code{helm-ff-auto-update-initial-value}
@vindex helm-ff-auto-update-initial-value

@strong{Standard Value}: nil

Auto update when only one candidate directory is matched.
Default value when starting @code{helm-find-files} is nil to not
confuse new users.
For a better experience with @code{helm-find-files} set this to
non-nil and use C-<backspace> to toggle it.

@item @code{helm-ff-initial-sort-method}
@vindex helm-ff-initial-sort-method

@strong{Standard Value}: nil

Sort method to use when initially listing a directory.
Note that this doesn’t affect the listing when matching inside
the directory (i.e. filenames).
@end table

@anchor{Ff Preselect}
@subsubheading Ff Preselect

@table @asis
@item @code{helm-ff-no-preselect}
@vindex helm-ff-no-preselect

@strong{Standard Value}: nil

When non-nil @code{helm-find-files} starts at root of current directory.

@item @code{helm-ff-up-one-level-preselect}
@vindex helm-ff-up-one-level-preselect

@strong{Standard Value}: t

Always preselect previous directory when going one level up.

When non-nil @code{candidate-number-limit} source value is modified
dynamically when going one level up if the position of previous
candidate in its directory is > to
@code{helm-ff-candidate-number-limit}.

It can be helpful to disable this and reduce
@code{helm-ff-candidate-number-limit} if you often navigate across
very large directories.
@end table

@anchor{Ff File}
@subsubheading Ff File

@table @asis
@item @code{helm-ff-allow-non-existing-file-at-point}
@vindex helm-ff-allow-non-existing-file-at-point

@strong{Standard Value}: nil

Use non existing file-at-point as initial input in @code{helm-find-files}.

@item @code{helm-ff-file-compressed-list}
@vindex helm-ff-file-compressed-list

@strong{Standard Value}:

@lisp
("gz" "bz2" "zip" "7z")
@end lisp

Minimal list of compressed files extension.

@item @code{helm-ff-file-name-history-use-recentf}
@vindex helm-ff-file-name-history-use-recentf

@strong{Standard Value}: nil

Use @code{recentf-list} instead of @code{file-name-history} in @code{helm-find-files}.
@end table

@anchor{Ff Image}
@subsubheading Ff Image

@table @asis
@item @code{helm-ff-display-image-native}
@vindex helm-ff-display-image-native

@strong{Standard Value}: nil

Use native @code{image-mode} when non nil.

You should use this only with Emacs>= 27 and @code{image-auto-resize}
enabled to have images resized properly.  When this is enabled,
you have new commands to zoom in/out images.  See
@code{image-transform-resize} and @code{image-auto-resize}.  Otherwise,
when nil @code{image-dired} is used, using imagemagick as backend.
NOTE: If you see image-mode is eating too much memory, you better have
to set this to nil (default).

@item @code{helm-ff-rotate-image-switch}
@vindex helm-ff-rotate-image-switch

@strong{Standard Value}:

@lisp
("-i")
@end lisp

Options used with @code{helm-ff-rotate-image-program}.
If you are using Mogrify or Jpegtran mandatory option is
``-rotate'', with Exiftran mandatory option is ``-i''.
@end table

@anchor{Ff Program}
@subsubheading Ff Program

@table @asis
@item @code{helm-ff-exif-data-program}
@vindex helm-ff-exif-data-program

@strong{Standard Value}: exiftran

Program used to extract exif data of an image file.

@item @code{helm-ff-exif-data-program-args}
@vindex helm-ff-exif-data-program-args

@strong{Standard Value}: -d

Arguments used for @code{helm-ff-exif-data-program}.

@item @code{helm-ff-rotate-image-program}
@vindex helm-ff-rotate-image-program

@strong{Standard Value}: exiftran

External program used to rotate images.
When nil and @code{helm-ff-display-image-native} is enabled, fallback to
@code{image-rotate} without modification of exif data i.e. rotation is not
persistent otherwise an error is returned when not using
@code{helm-ff-display-image-native} i.e. using image-dired.
@end table

@anchor{Ff Files}
@subsubheading Ff Files

@table @asis
@item @code{helm-ff-delete-files-function}
@vindex helm-ff-delete-files-function

@strong{Standard Value}: helm-delete-marked-files

The function to use by default to delete files.

Default is to delete files synchronously, other choice is to
delete files asynchronously.

BE AWARE that when deleting async you will not be warned about
recursive deletion of directories, IOW non-empty directories will
be deleted with no warnings in background!!!

It is the function that will be used when using
@code{M-D} from
@code{helm-find-files}.

@item @code{helm-ff-signal-error-on-dot-files}
@vindex helm-ff-signal-error-on-dot-files

@strong{Standard Value}: t

Signal error when file is @code{.} or @code{..} on file deletion when non-nil.
Default is non-nil.
WARNING: Setting this to nil is unsafe and can cause deletion of
a whole tree.

@item @code{helm-ff-skip-boring-files}
@vindex helm-ff-skip-boring-files

@strong{Standard Value}: nil

Non-nil to skip boring files.
I.e. the files matching regexps in @code{helm-boring-file-regexp-list}.
This takes effect in @code{helm-find-files} and file completion used by
@code{helm-mode} i.e. @code{helm-read-file-name}.
Note that when non-nil this will slow down slightly @code{helm-find-files}.

@item @code{helm-ff-skip-git-ignored-files}
@vindex helm-ff-skip-git-ignored-files

@strong{Standard Value}: nil

Non-nil to skip git ignored files.
This take effect only in @code{helm-find-files}.
Check is not done on remote files.
Note that when non-nil this will slow down slightly
@code{helm-find-files}.
@end table

@anchor{Ff uncategorized uncategorized uncategorized}
@subsubheading Ff uncategorized uncategorized uncategorized

@table @asis
@item @code{helm-ff-avfs-directory}
@vindex helm-ff-avfs-directory

@strong{Standard Value}: ~/.avfs

The default avfs directory, usually ’~/.avfs’.
When this is set you will be able to expand archive filenames
with @code{C-j} inside an avfs directory mounted with mountavfs.
See @uref{http://sourceforge.net/projects/avf/}.

@item @code{helm-ff-candidate-number-limit}
@vindex helm-ff-candidate-number-limit

@strong{Standard Value}: 5000

The @code{helm-candidate-number-limit} for @code{helm-find-files} and friends.
Note that when going one level up with
@code{C-l} the
length of directory will be used instead if it is higher than
this value.  This is to avoid failing to preselect the previous
directory/file if this one is situated lower than
@code{helm-ff-candidate-number-limit} num candidate.

@item @code{helm-ff-fuzzy-matching}
@vindex helm-ff-fuzzy-matching

@strong{Standard Value}: t

Enable fuzzy matching for @code{helm-find-files} when non--nil.
See @code{helm-ff--transform-pattern-for-completion} for more info.

@item @code{helm-ff-goto-first-real-dired-exceptions}
@vindex helm-ff-goto-first-real-dired-exceptions

@strong{Standard Value}:

@lisp
(dired-goto-file)
@end lisp

Dired commands that are allowed moving to first real candidate.

@item @code{helm-ff-kill-or-find-buffer-fname-fn}
@vindex helm-ff-kill-or-find-buffer-fname-fn

@strong{Standard Value}: helm-ff-kill-or-find-buffer-fname

Default function used to expand non-directory filenames in @code{helm-find-files}.

This variable will take effect only in @code{helm-find-files}.  It
affects the behavior of persistent-action on filenames and
non-existing filenames.

The default is to expand filename on first hit on
C-j, pop buffer in
other window on second hit and finally kill this buffer on third
hit.  This is very handy to create several new buffers, or when
navigating, show quickly the buffer of file to see its contents
briefly before killing it and continue navigating.

However some users may not want this, so to disable this behaviour
just set this to @code{ignore} function.

Of course you can also write your own function to do something
else.

@item @code{helm-ff-lynx-style-map}
@vindex helm-ff-lynx-style-map

@strong{Standard Value}: t

Use arrow keys to navigate with @code{helm-find-files}.
Note that if you define this variable with @code{setq} your change
will have no effect, use customize instead.

@item @code{helm-ff-newfile-prompt-p}
@vindex helm-ff-newfile-prompt-p

@strong{Standard Value}: t

Whether Prompt or not when creating new file.
This set @code{ffap-newfile-prompt}.

@item @code{helm-ff-search-library-in-sexp}
@vindex helm-ff-search-library-in-sexp

@strong{Standard Value}: nil

Search for library in @code{require} and @code{declare-function} sexp.

@item @code{helm-ff-transformer-show-only-basename}
@vindex helm-ff-transformer-show-only-basename

@strong{Standard Value}: t

Show only basename of candidates in @code{helm-find-files}.
This can be toggled at anytime from @code{helm-find-files} with C-].
@end table

@anchor{minor-mode-p (11)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-ff--delete-async-modeline-mode}
@vindex helm-ff--delete-async-modeline-mode

@strong{Standard Value}: nil

(helm-ff--delete-async-modeline-mode &optional ARG)

Notify mode-line that an async process run.

If called interactively, toggle `Helm-Ff--Delete-Async-Modeline
mode'.  If the prefix argument is positive, enable the mode, and
if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.
@end table

@anchor{uncategorized (38)}
@subsubheading uncategorized

@table @asis
@item @code{helm-dwim-target}
@vindex helm-dwim-target

@strong{Standard Value}: nil

Default target directory for file actions.

Define the directory where you want to start navigating for the
target directory when copying, renaming, etc..  You can use the
@code{default-directory} of @code{next-window}, the current
@code{default-directory} or have completion on all the directories
belonging to each window.

@item @code{helm-modes-using-escaped-strings}
@vindex helm-modes-using-escaped-strings

@strong{Standard Value}:

@lisp
(eshell-mode shell-mode term-mode)
@end lisp

Modes that requires string’s insertion to be escaped.

@item @code{helm-mounted-network-directories}
@vindex helm-mounted-network-directories

@strong{Standard Value}: nil

A list of directories used for mounting remotes filesystem.

When nil @code{helm-file-on-mounted-network-p} always return nil
otherwise check if a file is in one of these directories.

Remote filesystem are generally mounted with sshfs.

@item @code{helm-tooltip-hide-delay}
@vindex helm-tooltip-hide-delay

@strong{Standard Value}: 25

Hide tooltips automatically after this many seconds.

@item @code{helm-tramp-verbose}
@vindex helm-tramp-verbose

@strong{Standard Value}: 0

Just like @code{tramp-verbose} but specific to Helm.
When set to 0 don’t show tramp messages in Helm.
If you want to have the default tramp messages set it to 3.
@end table

@node Hooks in library @samp{helm-files}
@subsection Hooks in library @samp{helm-files}

@anchor{After}
@subsubheading After

@table @asis
@item @code{helm-find-files-after-init-hook}
@vindex helm-find-files-after-init-hook

@strong{Standard Value}: nil

Hook that run after initialization of @code{helm-find-files}.
@end table

@anchor{Before (1)}
@subsubheading Before

@table @asis
@item @code{helm-find-files-before-init-hook}
@vindex helm-find-files-before-init-hook

@strong{Standard Value}: nil

Hook that run before initialization of @code{helm-find-files}.
@end table

@anchor{Ff (1)}
@subsubheading Ff

@table @asis
@item @code{helm-ff--delete-async-modeline-mode-hook}
@vindex helm-ff--delete-async-modeline-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm-ff--delete-async-modeline-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)

@item @code{helm-ff--update-resume-after-hook}
@vindex helm-ff--update-resume-after-hook

@strong{Standard Value}:

@item @code{helm-ff-before-action-hook-fn}
@vindex helm-ff-before-action-hook-fn

@strong{Standard Value}:

@item @code{helm-ff-setup-update-hook}
@vindex helm-ff-setup-update-hook

@strong{Standard Value}:
@end table

@node Library helm-find
@section Library: helm-find

@menu
* Commands in keymap @code{helm-find-map}::
* Commands in library @code{helm-find} (excludes keymaps)::
* Options in library @samp{helm-find}::
@end menu

@node Commands in keymap @code{helm-find-map}
@subsection Commands in keymap @code{helm-find-map}

@anchor{uncategorized (39)}
@subsubheading uncategorized

@table @asis
@item @kbd{DEL} (@code{helm-delete-backward-no-update})
@findex helm-delete-backward-no-update @r{(helm-find-map)}

@kindex DEL @r{(helm-find-map)}

(helm-delete-backward-no-update ARG)

Disable update and delete ARG chars backward.
Update is reenabled when idle 1s.
@end table

@node Commands in library @code{helm-find} (excludes keymaps)
@subsection Commands in library @code{helm-find} (excludes keymaps)

@anchor{uncategorized (40)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x c /} (@code{helm-find})
@findex helm-find

@kindex C-x c /

(helm-find ARG)

Preconfigured @code{helm} for the find shell command.

Recursively find files whose names are matched by all specified
globbing PATTERNs under the current directory using the external
program specified in @code{find-program} (usually ``find'').  Every
input PATTERN is silently wrapped into two stars: @strong{PATTERN}.

With prefix argument, prompt for a directory to search.

When user option @code{helm-findutils-search-full-path} is non-nil,
match against complete paths, otherwise, against file names
without directory part.

The (possibly empty) list of globbing PATTERNs can be followed by
the separator ``*'' plus any number of additional arguments that
are passed to ``find'' literally.
@end table

@node Options in library @samp{helm-find}
@subsection Options in library @samp{helm-find}

@anchor{Findutils}
@subsubheading Findutils

@table @asis
@item @code{helm-findutils-search-full-path}
@vindex helm-findutils-search-full-path

@strong{Standard Value}: nil

Search in full path with shell command find when non-nil.
I.e. use the -path/ipath arguments of find instead of
-name/iname.

@item @code{helm-findutils-skip-boring-files}
@vindex helm-findutils-skip-boring-files

@strong{Standard Value}: t

Ignore boring files in find command results.
@end table

@anchor{uncategorized (41)}
@subsubheading uncategorized

@table @asis
@item @code{helm-find-noerrors}
@vindex helm-find-noerrors

@strong{Standard Value}: nil

Prevent showing error messages in helm buffer when non nil.
@end table

@node Library helm-font
@section Library: helm-font

@menu
* Commands in keymap @code{helm-ucs-map}::
* Commands in library @code{helm-font} (excludes keymaps)::
* Options in library @samp{helm-font}::
@end menu

@node Commands in keymap @code{helm-ucs-map}
@subsection Commands in keymap @code{helm-ucs-map}

@anchor{uncategorized (42)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-<left>} (@code{helm-ucs-persistent-backward})
@findex helm-ucs-persistent-backward @r{(helm-ucs-map)}

@kindex C-<left> @r{(helm-ucs-map)}

@item @kbd{C-<backspace>} (@code{helm-ucs-persistent-delete})
@findex helm-ucs-persistent-delete @r{(helm-ucs-map)}

@kindex C-<backspace> @r{(helm-ucs-map)}

@item @kbd{C-<right>} (@code{helm-ucs-persistent-forward})
@findex helm-ucs-persistent-forward @r{(helm-ucs-map)}

@kindex C-<right> @r{(helm-ucs-map)}

@item @kbd{C-c @key{SPC}} (@code{helm-ucs-persistent-insert-space})
@findex helm-ucs-persistent-insert-space @r{(helm-ucs-map)}

@kindex C-c SPC @r{(helm-ucs-map)}
@end table

@node Commands in library @code{helm-font} (excludes keymaps)
@subsection Commands in library @code{helm-font} (excludes keymaps)

@anchor{uncategorized (43)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x c F} (@code{helm-select-xfont})
@findex helm-select-xfont

@kindex C-x c F

Preconfigured @code{helm} to select Xfont.

@item @kbd{C-x c 8} (@code{helm-ucs})
@findex helm-ucs

@kindex C-x c 8

(helm-ucs ARG)

Preconfigured @code{helm} for @code{ucs-names}.

Called with a prefix arg force reloading cache.
@end table

@node Options in library @samp{helm-font}
@subsection Options in library @samp{helm-font}

@anchor{uncategorized (44)}
@subsubheading uncategorized

@table @asis
@item @code{helm-ucs-actions}
@vindex helm-ucs-actions

@strong{Standard Value}:

@lisp
(("Insert character" . helm-ucs-insert-char)
 ("Insert character name" . helm-ucs-insert-name)
 ("Insert character code in hex" . helm-ucs-insert-code)
 ("Kill marked characters" . helm-ucs-kill-char)
 ("Kill name" . helm-ucs-kill-name)
 ("Kill code" . helm-ucs-kill-code))
@end lisp

Actions for @code{helm-source-ucs}.

@item @code{helm-ucs-recent-size}
@vindex helm-ucs-recent-size

@strong{Standard Value}: 10

Number of recent chars to keep.
@end table

@node Library helm-for-files
@section Library: helm-for-files

@menu
* Commands in library @code{helm-for-files} (excludes keymaps)::
* Options in library @samp{helm-for-files}::
@end menu

@node Commands in library @code{helm-for-files} (excludes keymaps)
@subsection Commands in library @code{helm-for-files} (excludes keymaps)

@anchor{Files}
@subsubheading Files

@table @asis
@item @code{helm-for-files}
@findex helm-for-files

Preconfigured @code{helm} for opening files.
Run all sources defined in @code{helm-for-files-preferred-list}.

@item @kbd{C-x c f} (@code{helm-multi-files})
@findex helm-multi-files

@kindex C-x c f

Preconfigured helm like @code{helm-for-files} but running locate only on demand.

Allow toggling back and forth from locate to others sources with
@code{helm-multi-files-toggle-locate-binding} key.
This avoids launching locate needlessly when what you are
searching for is already found.

@item @code{helm-multi-files-toggle-to-locate}
@findex helm-multi-files-toggle-to-locate
@end table

@anchor{uncategorized (45)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x c C-c f} (@code{helm-recentf})
@findex helm-recentf

@kindex C-x c C-c f

Preconfigured @code{helm} for @code{recentf}.
@end table

@node Options in library @samp{helm-for-files}
@subsection Options in library @samp{helm-for-files}

@anchor{Fuzzy (2)}
@subsubheading Fuzzy

@table @asis
@item @code{helm-file-cache-fuzzy-match}
@vindex helm-file-cache-fuzzy-match

@strong{Standard Value}: nil

Enable fuzzy matching in @code{helm-source-file-cache} when non--nil.
@end table

@anchor{Recentf}
@subsubheading Recentf

@table @asis
@item @code{helm-recentf-fuzzy-match}
@vindex helm-recentf-fuzzy-match

@strong{Standard Value}: nil

Enable fuzzy matching in @code{helm-source-recentf} when non-nil.

@item @code{helm-turn-on-recentf}
@vindex helm-turn-on-recentf

@strong{Standard Value}: t

Automatically turn on @code{recentf-mode} when non-nil.
@end table

@anchor{Files (1)}
@subsubheading Files

@table @asis
@item @code{helm-for-files-preferred-list}
@vindex helm-for-files-preferred-list

@strong{Standard Value}:

@lisp
(helm-source-buffers-list helm-source-recentf helm-source-bookmarks helm-source-file-cache helm-source-files-in-current-dir helm-source-locate)
@end lisp

Your preferred sources for @code{helm-for-files} and @code{helm-multi-files}.

When adding a source here it is up to you to ensure the library
of this source is accessible and properly loaded.

@item @code{helm-for-files-tramp-not-fancy}
@vindex helm-for-files-tramp-not-fancy

@strong{Standard Value}: t

Colorize remote files when non nil.

Be aware that a nil value will make tramp display very slow.

@item @code{helm-multi-files-toggle-locate-binding}
@vindex helm-multi-files-toggle-locate-binding

@strong{Standard Value}: C-c p

Default binding to switch back and forth locate in @code{helm-multi-files}.
@end table

@node Library helm-global-bindings
@section Library: helm-global-bindings

@menu
* Commands in keymap @code{helm-command-map}::
* Options in library @samp{helm-global-bindings}::
@end menu

@node Commands in keymap @code{helm-command-map}
@subsection Commands in keymap @code{helm-command-map}

@anchor{View Helm Documentation}
@subsubheading View Helm Documentation

@table @asis
@item @kbd{h h}

@item @kbd{C-x c h h} (@code{helm-documentation})
@findex helm-documentation @r{(helm-command-map)}

@kindex h h @r{(helm-command-map)}
@kindex C-x c h h @r{(helm-command-map)}

Preconfigured @code{helm} for Helm documentation.
With a prefix arg refresh the documentation.

Find here the documentation of all documented sources.
@end table

@anchor{Execute Extended Command}
@subsubheading Execute Extended Command

@table @asis
@item @kbd{M-x}

@item @kbd{C-x c M-x}

@item @kbd{<execute>}

@item @kbd{<menu>} (@code{helm-M-x})
@findex helm-M-x @r{(helm-command-map)}

@kindex M-x @r{(helm-command-map)}
@kindex C-x c M-x @r{(helm-command-map)}
@kindex <execute> @r{(helm-command-map)}
@kindex <menu> @r{(helm-command-map)}

(helm-M-x ARG)

Preconfigured @code{helm} for Emacs commands.
It is @code{helm} replacement of regular @code{M-x}
@code{execute-extended-command}.

Unlike regular @code{M-x} Emacs vanilla @code{execute-extended-command}
command, the prefix args if needed, can be passed AFTER starting
@code{helm-M-x}.  When a prefix arg is passed BEFORE starting
@code{helm-M-x}, the first @code{C-u} while in @code{helm-M-x} session will
disable it.

You can get help on each command by persistent action.
@end table

@anchor{Find Files}
@subsubheading Find Files

@table @asis
@item @kbd{C-x C-f}

@item @kbd{C-x c C-x C-f}

@item @kbd{<open>} (@code{helm-find-files})
@findex helm-find-files @r{(helm-command-map)}

@kindex C-x C-f @r{(helm-command-map)}
@kindex C-x c C-x C-f @r{(helm-command-map)}
@kindex <open> @r{(helm-command-map)}

(helm-find-files ARG)

Preconfigured @code{helm} for helm implementation of @code{find-file}.
Called with a prefix arg show history if some.
Don't call it from programs, use @code{helm-find-files-1} instead.
This is the starting point for nearly all actions you can do on
files.

@item @kbd{f}

@item @kbd{C-x c f} (@code{helm-multi-files})
@findex helm-multi-files @r{(helm-command-map)}

@kindex f @r{(helm-command-map)}
@kindex C-x c f @r{(helm-command-map)}

Preconfigured helm like @code{helm-for-files} but running locate only on demand.

Allow toggling back and forth from locate to others sources with
@code{helm-multi-files-toggle-locate-binding} key.
This avoids launching locate needlessly when what you are
searching for is already found.
@end table

@anchor{Visit recent Files}
@subsubheading Visit recent Files

@table @asis
@item @kbd{C-c f}

@item @kbd{C-x c C-c f} (@code{helm-recentf})
@findex helm-recentf @r{(helm-command-map)}

@kindex C-c f @r{(helm-command-map)}
@kindex C-x c C-c f @r{(helm-command-map)}

Preconfigured @code{helm} for @code{recentf}.
@end table

@anchor{Run Find}
@subsubheading Run Find

@table @asis
@item @kbd{/}

@item @kbd{C-x c /} (@code{helm-find})
@findex helm-find @r{(helm-command-map)}

@kindex / @r{(helm-command-map)}
@kindex C-x c / @r{(helm-command-map)}

(helm-find ARG)

Preconfigured @code{helm} for the find shell command.

Recursively find files whose names are matched by all specified
globbing PATTERNs under the current directory using the external
program specified in @code{find-program} (usually ``find'').  Every
input PATTERN is silently wrapped into two stars: @strong{PATTERN}.

With prefix argument, prompt for a directory to search.

When user option @code{helm-findutils-search-full-path} is non-nil,
match against complete paths, otherwise, against file names
without directory part.

The (possibly empty) list of globbing PATTERNs can be followed by
the separator ``*'' plus any number of additional arguments that
are passed to ``find'' literally.
@end table

@anchor{Run locate}
@subsubheading Run locate

@table @asis
@item @kbd{l}

@item @kbd{C-x c l} (@code{helm-locate})
@findex helm-locate @r{(helm-command-map)}

@kindex l @r{(helm-command-map)}
@kindex C-x c l @r{(helm-command-map)}

(helm-locate ARG)

Preconfigured @code{helm} for Locate.
Note: you can add locate options after entering pattern.
See 'man locate' for valid options and also @code{helm-locate-command}.

You can specify a local database with prefix argument ARG@.
With two prefix arg, refresh the current local db or create it if
it doesn't exists.

To create a user specific db, use
``updatedb -l 0 -o db_path -U directory''.
Where db_path is a filename matched by
@code{helm-locate-db-file-regexp}.
@end table

@anchor{List Buffers}
@subsubheading List Buffers

@table @asis
@item @kbd{C-x C-b}

@item @kbd{C-x c C-x C-b} (@code{helm-buffers-list})
@findex helm-buffers-list @r{(helm-command-map)}

@kindex C-x C-b @r{(helm-command-map)}
@kindex C-x c C-x C-b @r{(helm-command-map)}

Preconfigured @code{helm} to list buffers.
@end table

@anchor{Browse kill-ring}
@subsubheading Browse kill-ring

@table @asis
@item @kbd{M-y}

@item @kbd{C-x c M-y} (@code{helm-show-kill-ring})
@findex helm-show-kill-ring @r{(helm-command-map)}

@kindex M-y @r{(helm-command-map)}
@kindex C-x c M-y @r{(helm-command-map)}

Preconfigured @code{helm} for @code{kill-ring}.
It is drop-in replacement of @code{yank-pop}.

First call open the kill-ring browser, next calls move to next line.
@end table

@anchor{List Bookmarks}
@subsubheading List Bookmarks

@table @asis
@item @kbd{C-x r b}

@item @kbd{C-x c C-x r b} (@code{helm-filtered-bookmarks})
@findex helm-filtered-bookmarks @r{(helm-command-map)}

@kindex C-x r b @r{(helm-command-map)}
@kindex C-x c C-x r b @r{(helm-command-map)}

Preconfigured @code{helm} for bookmarks (filtered by category).
Optional source @code{helm-source-bookmark-addressbook} is loaded only
if external addressbook-bookmark package is installed.
@end table

@anchor{List Registers}
@subsubheading List Registers

@table @asis
@item @kbd{C-x r i}

@item @kbd{C-x c C-x r i} (@code{helm-register})
@findex helm-register @r{(helm-command-map)}

@kindex C-x r i @r{(helm-command-map)}
@kindex C-x c C-x r i @r{(helm-command-map)}

Preconfigured @code{helm} for Emacs registers.
@end table

@anchor{Mark Ring}
@subsubheading Mark Ring

@table @asis
@item @kbd{C-c @key{SPC}}

@item @kbd{C-x c C-c @key{SPC}} (@code{helm-all-mark-rings})
@findex helm-all-mark-rings @r{(helm-command-map)}

@kindex C-c SPC @r{(helm-command-map)}
@kindex C-x c C-c SPC @r{(helm-command-map)}

Preconfigured @code{helm} for @code{helm-source-global-mark-ring} and @code{helm-source-mark-ring}.
@end table

@anchor{Run Occur (1)}
@subsubheading Run Occur

@table @asis
@item @kbd{M-s o}

@item @kbd{C-x c M-s o} (@code{helm-occur})
@findex helm-occur @r{(helm-command-map)}

@kindex M-s o @r{(helm-command-map)}
@kindex C-x c M-s o @r{(helm-command-map)}

Preconfigured helm for searching lines matching pattern in @code{current-buffer}.

When @code{helm-source-occur} is member of
@code{helm-sources-using-default-as-input} which is the default,
symbol at point is searched at startup.

When a region is marked search only in this region by narrowing.

To search in multiples buffers start from one of the commands listing
buffers (i.e. a helm command using @code{helm-source-buffers-list} like
@code{helm-mini}) and use the multi occur buffers action.

This is the helm implementation that collect lines matching pattern
like vanilla Emacs @code{occur} but have nothing to do with it, the search
engine beeing completely different and also much faster.
@end table

@anchor{Run Grep and friends (1)}
@subsubheading Run Grep and friends

@table @asis
@item @kbd{M-g a}

@item @kbd{C-x c M-g a} (@code{helm-do-grep-ag})
@findex helm-do-grep-ag @r{(helm-command-map)}

@kindex M-g a @r{(helm-command-map)}
@kindex C-x c M-g a @r{(helm-command-map)}

(helm-do-grep-ag ARG)

Preconfigured @code{helm} for grepping with AG in @code{default-directory}.
With prefix arg prompt for type if available with your AG
version.

@item @kbd{M-g i}

@item @kbd{C-x c M-g i} (@code{helm-gid})
@findex helm-gid @r{(helm-command-map)}

@kindex M-g i @r{(helm-command-map)}
@kindex C-x c M-g i @r{(helm-command-map)}

Preconfigured @code{helm} for @code{gid} command line of @code{ID-Utils}.
Need A database created with the command @code{mkid} above
@code{default-directory}.
Need id-utils as dependency which provide @code{mkid}, @code{gid} etc..
See @uref{https://www.gnu.org/software/idutils/}.
@end table

@anchor{Imenu}
@subsubheading Imenu

@table @asis
@item @kbd{e}

@item @kbd{C-x c e} (@code{helm-etags-select})
@findex helm-etags-select @r{(helm-command-map)}

@kindex e @r{(helm-command-map)}
@kindex C-x c e @r{(helm-command-map)}

(helm-etags-select REINIT)

Preconfigured helm for etags.
If called with a prefix argument REINIT
or if any of the tag files have been modified, reinitialize cache.

This function aggregates three sources of tag files:

@enumerate
@item
An automatically located file in the parent directories,
by @code{helm-etags-get-tag-file}.
@item
@code{tags-file-name}, which is commonly set by @code{find-tag} command.
@item
@code{tags-table-list} which is commonly set by @code{visit-tags-table} command.
@end enumerate

@item @kbd{i}

@item @kbd{C-x c i} (@code{helm-imenu})
@findex helm-imenu @r{(helm-command-map)}

@kindex i @r{(helm-command-map)}
@kindex C-x c i @r{(helm-command-map)}

Preconfigured @code{helm} for @code{imenu}.

@item @kbd{I}

@item @kbd{C-x c I} (@code{helm-imenu-in-all-buffers})
@findex helm-imenu-in-all-buffers @r{(helm-command-map)}

@kindex I @r{(helm-command-map)}
@kindex C-x c I @r{(helm-command-map)}

Preconfigured @code{helm} for fetching imenu entries in all buffers with similar mode as current.
A mode is similar as current if it is the same, it is derived
i.e. @code{derived-mode-p} or it have an association in
@code{helm-imenu-all-buffer-assoc}.
@end table

@anchor{Lisp Completion at Point}
@subsubheading Lisp Completion at Point

@table @asis
@item @kbd{<tab>}

@item @kbd{C-x c <tab>} (@code{helm-lisp-completion-at-point})
@findex helm-lisp-completion-at-point @r{(helm-command-map)}

@kindex <tab> @r{(helm-command-map)}
@kindex C-x c <tab> @r{(helm-command-map)}

Preconfigured Helm for Lisp symbol completion at point.
@end table

@anchor{Calculate Expression}
@subsubheading Calculate Expression

@table @asis
@item @kbd{C-}

@item @kbd{C-x c C-} (@code{helm-calcul-expression})
@findex helm-calcul-expression @r{(helm-command-map)}

@kindex C-, @r{(helm-command-map)}
@kindex C-x c C-, @r{(helm-command-map)}

Preconfigured @code{helm} for @code{helm-source-calculation-result}.

@item @kbd{C-:}

@item @kbd{C-x c C-:} (@code{helm-eval-expression-with-eldoc})
@findex helm-eval-expression-with-eldoc @r{(helm-command-map)}

@kindex C-: @r{(helm-command-map)}
@kindex C-x c C-: @r{(helm-command-map)}

Preconfigured @code{helm} for @code{helm-source-evaluation-result} with @code{eldoc} support.

@item @kbd{r}

@item @kbd{C-x c r} (@code{helm-regexp})
@findex helm-regexp @r{(helm-command-map)}

@kindex r @r{(helm-command-map)}
@kindex C-x c r @r{(helm-command-map)}

Preconfigured helm to build regexps.
@code{query-replace-regexp} can be run from there against found regexp.
@end table

@anchor{Get help for thing at point}
@subsubheading Get help for thing at point

@table @asis
@item @kbd{h i}

@item @kbd{C-x c h i} (@code{helm-info-at-point})
@findex helm-info-at-point @r{(helm-command-map)}

@kindex h i @r{(helm-command-map)}
@kindex C-x c h i @r{(helm-command-map)}

Preconfigured @code{helm} for searching info at point.
@end table

@anchor{View Emacs manauals}
@subsubheading View Emacs manauals

@table @asis
@item @kbd{h r}

@item @kbd{C-x c h r} (@code{helm-info-emacs})
@findex helm-info-emacs @r{(helm-command-map)}

@kindex h r @r{(helm-command-map)}
@kindex C-x c h r @r{(helm-command-map)}

Predefined helm for emacs info.

@item @kbd{h g}

@item @kbd{C-x c h g} (@code{helm-info-gnus})
@findex helm-info-gnus @r{(helm-command-map)}

@kindex h g @r{(helm-command-map)}
@kindex C-x c h g @r{(helm-command-map)}

Predefined helm for gnus info.
@end table

@anchor{Get Elisp Help}
@subsubheading Get Elisp Help

@table @asis
@item @kbd{a}

@item @kbd{C-x c a}

@item @kbd{C-h a}

@item @kbd{<f1> a}

@item @kbd{<help> a} (@code{helm-apropos})
@findex helm-apropos @r{(helm-command-map)}

@kindex a @r{(helm-command-map)}
@kindex C-x c a @r{(helm-command-map)}
@kindex C-h a @r{(helm-command-map)}
@kindex <f1> a @r{(helm-command-map)}
@kindex <help> a @r{(helm-command-map)}

(helm-apropos DEFAULT)

Preconfigured Helm to describe commands, functions, variables and faces.
In non interactives calls DEFAULT argument should be provided as
a string, i.e. the @code{symbol-name} of any existing symbol.
@end table

@anchor{List Manpages}
@subsubheading List Manpages

@table @asis
@item @kbd{m}

@item @kbd{C-x c m} (@code{helm-man-woman})
@findex helm-man-woman @r{(helm-command-map)}

@kindex m @r{(helm-command-map)}
@kindex C-x c m @r{(helm-command-map)}

(helm-man-woman ARG)

Preconfigured @code{helm} for Man and Woman pages.
With a prefix arg reinitialize the cache.
@end table

@anchor{List Emacs Processes}
@subsubheading List Emacs Processes

@table @asis
@item @kbd{p}

@item @kbd{C-x c p} (@code{helm-list-emacs-process})
@findex helm-list-emacs-process @r{(helm-command-map)}

@kindex p @r{(helm-command-map)}
@kindex C-x c p @r{(helm-command-map)}

Preconfigured @code{helm} for Emacs process.
@end table

@anchor{List Emacs Lisp Packages}
@subsubheading List Emacs Lisp Packages

@table @asis
@item @kbd{@@}

@item @kbd{C-x c @@} (@code{helm-list-elisp-packages})
@findex helm-list-elisp-packages @r{(helm-command-map)}

@kindex @ @r{(helm-command-map)}
@kindex C-x c @ @r{(helm-command-map)}

(helm-list-elisp-packages ARG)

Preconfigured @code{helm} for listing and handling Emacs packages.
@end table

@anchor{Resume Helm Session}
@subsubheading Resume Helm Session

@table @asis
@item @kbd{b}

@item @kbd{C-x c b} (@code{helm-resume})
@findex helm-resume @r{(helm-command-map)}

@kindex b @r{(helm-command-map)}
@kindex C-x c b @r{(helm-command-map)}

(helm-resume ARG)

Resume a previous Helm session.
Call with a prefix arg to choose among existing Helm
buffers (sessions).  When calling from Lisp, specify a
@code{buffer-name} as a string with ARG@.
@end table

@anchor{Run Exernal Command}
@subsubheading Run Exernal Command

@table @asis
@item @kbd{C-c C-x}

@item @kbd{C-x c C-c C-x} (@code{helm-run-external-command})
@findex helm-run-external-command @r{(helm-command-map)}

@kindex C-c C-x @r{(helm-command-map)}
@kindex C-x c C-c C-x @r{(helm-command-map)}

(helm-run-external-command PROGRAM)

Preconfigured @code{helm} to run External PROGRAM asyncronously from Emacs.
If program is already running exit with error.
You can set your own list of commands with
@code{helm-external-commands-list}.
@end table

@anchor{Search the Web}
@subsubheading Search the Web

@table @asis
@item @kbd{C-c g}

@item @kbd{C-x c C-c g} (@code{helm-google-suggest})
@findex helm-google-suggest @r{(helm-command-map)}

@kindex C-c g @r{(helm-command-map)}
@kindex C-x c C-c g @r{(helm-command-map)}

Preconfigured @code{helm} for Google search with Google suggest.

@item @kbd{s}

@item @kbd{C-x c s} (@code{helm-surfraw})
@findex helm-surfraw @r{(helm-command-map)}

@kindex s @r{(helm-command-map)}
@kindex C-x c s @r{(helm-command-map)}

(helm-surfraw PATTERN ENGINE)

Preconfigured @code{helm} to search PATTERN with search ENGINE@.
@end table

@anchor{Run Top}
@subsubheading Run Top

@table @asis
@item @kbd{t}

@item @kbd{C-x c t} (@code{helm-top})
@findex helm-top @r{(helm-command-map)}

@kindex t @r{(helm-command-map)}
@kindex C-x c t @r{(helm-command-map)}

Preconfigured @code{helm} for top command.
@end table

@anchor{List Unicode names}
@subsubheading List Unicode names

@table @asis
@item @kbd{8}

@item @kbd{C-x c 8} (@code{helm-ucs})
@findex helm-ucs @r{(helm-command-map)}

@kindex 8 @r{(helm-command-map)}
@kindex C-x c 8 @r{(helm-command-map)}

(helm-ucs ARG)

Preconfigured @code{helm} for @code{ucs-names}.

Called with a prefix arg force reloading cache.
@end table

@anchor{Select XFont}
@subsubheading Select XFont

@table @asis
@item @kbd{F}

@item @kbd{C-x c F} (@code{helm-select-xfont})
@findex helm-select-xfont @r{(helm-command-map)}

@kindex F @r{(helm-command-map)}
@kindex C-x c F @r{(helm-command-map)}

Preconfigured @code{helm} to select Xfont.
@end table

@anchor{List Colors}
@subsubheading List Colors

@table @asis
@item @kbd{c}

@item @kbd{C-x c c} (@code{helm-colors})
@findex helm-colors @r{(helm-command-map)}

@kindex c @r{(helm-command-map)}
@kindex C-x c c @r{(helm-command-map)}

Preconfigured @code{helm} for color.
@end table

@node Options in library @samp{helm-global-bindings}
@subsection Options in library @samp{helm-global-bindings}

@anchor{uncategorized (46)}
@subsubheading uncategorized

@table @asis
@item @code{helm-command-prefix-key}
@vindex helm-command-prefix-key

@strong{Standard Value}: C-x c

The key @code{helm-command-prefix} is bound to in the global map.

@item @code{helm-minibuffer-history-key}
@vindex helm-minibuffer-history-key

@strong{Standard Value}: C-r

The key @code{helm-minibuffer-history} is bound to in minibuffer local maps.
@end table

@node Library helm-grep
@section Library: helm-grep

@menu
* Modes in library @code{helm-grep}::
* Commands in keymap @code{helm-grep-map}::
* Commands in keymap @code{helm-grep-mode-map}::
* Commands in keymap @code{helm-pdfgrep-map}::
* Commands in library @code{helm-grep} (excludes keymaps)::
* Options in library @samp{helm-grep}::
* Hooks in library @samp{helm-grep}::
@end menu

@node Modes in library @code{helm-grep}
@subsection Modes in library @code{helm-grep}

@anchor{other-mode-p (1)}
@subsubheading other-mode-p

@table @asis
@item @code{helm-grep-mode}
@findex helm-grep-mode

Major mode to provide actions in helm grep saved buffer.

Special commands:
\@{helm-grep-mode-map@}

In addition to any hooks its parent mode @code{special-mode} might have
run, this mode runs the hook @code{helm-grep-mode-hook}, as the final or
penultimate step during initialization.
@end table

@node Commands in keymap @code{helm-grep-map}
@subsection Commands in keymap @code{helm-grep-map}

@anchor{uncategorized Goto}
@subsubheading uncategorized Goto

@table @asis
@item @kbd{M-<down>} (@code{helm-goto-next-file})
@findex helm-goto-next-file @r{(helm-grep-map)}

@kindex M-<down> @r{(helm-grep-map)}

Go to previous file in Helm grep/etags buffers.

@item @kbd{M-<up>} (@code{helm-goto-precedent-file})
@findex helm-goto-precedent-file @r{(helm-grep-map)}

@kindex M-<up> @r{(helm-grep-map)}

Go to previous file in Helm grep/etags buffers.
@end table

@anchor{uncategorized Grep}
@subsubheading uncategorized Grep

@table @asis
@item @kbd{<left>} (@code{helm-grep-run-default-action})
@findex helm-grep-run-default-action @r{(helm-grep-map)}

@kindex <left> @r{(helm-grep-map)}

Run grep default action from @code{helm-do-grep-1}.

@item @kbd{C-c C-o} (@code{helm-grep-run-other-frame-action})
@findex helm-grep-run-other-frame-action @r{(helm-grep-map)}

@kindex C-c C-o @r{(helm-grep-map)}

Run grep goto other frame action from @code{helm-do-grep-1}.

@item @kbd{C-c o} (@code{helm-grep-run-other-window-action})
@findex helm-grep-run-other-window-action @r{(helm-grep-map)}

@kindex C-c o @r{(helm-grep-map)}

Run grep goto other window action from @code{helm-do-grep-1}.

@item @kbd{C-x C-s} (@code{helm-grep-run-save-buffer})
@findex helm-grep-run-save-buffer @r{(helm-grep-map)}

@kindex C-x C-s @r{(helm-grep-map)}

Run grep save results action from @code{helm-do-grep-1}.
@end table

@anchor{uncategorized uncategorized}
@subsubheading uncategorized uncategorized

@table @asis
@item @kbd{DEL} (@code{helm-delete-backward-no-update})
@findex helm-delete-backward-no-update @r{(helm-grep-map)}

@kindex DEL @r{(helm-grep-map)}

(helm-delete-backward-no-update ARG)

Disable update and delete ARG chars backward.
Update is reenabled when idle 1s.
@end table

@node Commands in keymap @code{helm-grep-mode-map}
@subsection Commands in keymap @code{helm-grep-mode-map}

@anchor{uncategorized (47)}
@subsubheading uncategorized

@table @asis
@item @kbd{M-<down>}

@item @kbd{M-N} (@code{helm-gm-next-file})
@findex helm-gm-next-file @r{(helm-grep-mode-map)}

@kindex M-<down> @r{(helm-grep-mode-map)}
@kindex M-N @r{(helm-grep-mode-map)}

@item @kbd{M-<up>}

@item @kbd{M-P} (@code{helm-gm-precedent-file})
@findex helm-gm-precedent-file @r{(helm-grep-mode-map)}

@kindex M-<up> @r{(helm-grep-mode-map)}
@kindex M-P @r{(helm-grep-mode-map)}

@item @kbd{@key{RET}} (@code{helm-grep-mode-jump})
@findex helm-grep-mode-jump @r{(helm-grep-mode-map)}

@kindex RET @r{(helm-grep-mode-map)}

@item @kbd{C-o} (@code{helm-grep-mode-jump-other-window})
@findex helm-grep-mode-jump-other-window @r{(helm-grep-mode-map)}

@kindex C-o @r{(helm-grep-mode-map)}

@item @kbd{C-<up>}

@item @kbd{M-p} (@code{helm-grep-mode-jump-other-window-backward})
@findex helm-grep-mode-jump-other-window-backward @r{(helm-grep-mode-map)}

@kindex C-<up> @r{(helm-grep-mode-map)}
@kindex M-p @r{(helm-grep-mode-map)}

(helm-grep-mode-jump-other-window-backward ARG)

@item @kbd{C-<down>}

@item @kbd{M-n} (@code{helm-grep-mode-jump-other-window-forward})
@findex helm-grep-mode-jump-other-window-forward @r{(helm-grep-mode-map)}

@kindex C-<down> @r{(helm-grep-mode-map)}
@kindex M-n @r{(helm-grep-mode-map)}

(helm-grep-mode-jump-other-window-forward ARG)
@end table

@node Commands in keymap @code{helm-pdfgrep-map}
@subsection Commands in keymap @code{helm-pdfgrep-map}

@anchor{uncategorized (48)}
@subsubheading uncategorized

@table @asis
@item @kbd{DEL} (@code{helm-delete-backward-no-update})
@findex helm-delete-backward-no-update @r{(helm-pdfgrep-map)}

@kindex DEL @r{(helm-pdfgrep-map)}

(helm-delete-backward-no-update ARG)

Disable update and delete ARG chars backward.
Update is reenabled when idle 1s.

@item @kbd{M-<down>} (@code{helm-goto-next-file})
@findex helm-goto-next-file @r{(helm-pdfgrep-map)}

@kindex M-<down> @r{(helm-pdfgrep-map)}

Go to previous file in Helm grep/etags buffers.

@item @kbd{M-<up>} (@code{helm-goto-precedent-file})
@findex helm-goto-precedent-file @r{(helm-pdfgrep-map)}

@kindex M-<up> @r{(helm-pdfgrep-map)}

Go to previous file in Helm grep/etags buffers.
@end table

@node Commands in library @code{helm-grep} (excludes keymaps)
@subsection Commands in library @code{helm-grep} (excludes keymaps)

@anchor{Do}
@subsubheading Do

@table @asis
@item @kbd{C-x c M-g a} (@code{helm-do-grep-ag})
@findex helm-do-grep-ag

@kindex C-x c M-g a

(helm-do-grep-ag ARG)

Preconfigured @code{helm} for grepping with AG in @code{default-directory}.
With prefix arg prompt for type if available with your AG
version.

@item @code{helm-grep-do-git-grep}
@findex helm-grep-do-git-grep

(helm-grep-do-git-grep ARG)

Preconfigured @code{helm} for git-grepping @code{default-directory}.
With a prefix arg ARG git-grep the whole repository.
@end table

@anchor{Mode (5)}
@subsubheading Mode

@table @asis
@item @code{helm-grep-mode-mouse-jump}
@findex helm-grep-mode-mouse-jump

(helm-grep-mode-mouse-jump EVENT)
@end table

@anchor{other-mode-p (2)}
@subsubheading other-mode-p

@table @asis
@item @code{helm-grep-mode}
@findex helm-grep-mode

Major mode to provide actions in helm grep saved buffer.

Special commands:
\@{helm-grep-mode-map@}

In addition to any hooks its parent mode @code{special-mode} might have
run, this mode runs the hook @code{helm-grep-mode-hook}, as the final or
penultimate step during initialization.
@end table

@node Options in library @samp{helm-grep}
@subsection Options in library @samp{helm-grep}

@anchor{Style}
@subsubheading Style

@table @asis
@item @code{helm-grep-file-path-style}
@vindex helm-grep-file-path-style

@strong{Standard Value}: basename

File path display style when grep results are displayed.
Possible value are:
    basename: displays only the filename, none of the directory path
    absolute: displays absolute path
    relative: displays relative path from root grep directory.

@item @code{helm-grep-use-ioccur-style-keys}
@vindex helm-grep-use-ioccur-style-keys

@strong{Standard Value}: t

Use Arrow keys to jump to occurences.
Note that if you define this variable with @code{setq} your change
will have no effect, use customize instead.
@end table

@anchor{Zgrep}
@subsubheading Zgrep

@table @asis
@item @code{helm-zgrep-file-extension-regexp}
@vindex helm-zgrep-file-extension-regexp

@strong{Standard Value}: .*$

Default file extensions zgrep will search in.
@end table

@anchor{Ignored}
@subsubheading Ignored

@table @asis
@item @code{helm-grep-ignored-directories}
@vindex helm-grep-ignored-directories

@strong{Standard Value}:

@lisp
("SCCS/" "RCS/" "CVS/" "MCVS/" ".svn/" ".git/" ".hg/" ".bzr/" "_MTN/" "_darcs/" "@{arch@}/" ".gvfs/")
@end lisp

List of names of sub-directories which @code{helm-grep} shall not recurse into.

@item @code{helm-grep-ignored-files}
@vindex helm-grep-ignored-files

@strong{Standard Value}:

@lisp
(".#*" "*.o" "*~" "*.bin" "*.lbin" "*.so" "*.a" "*.ln" "*.blg" "*.bbl" "*.elc" "*.lof" "*.glo" "*.idx" "*.lot" "*.fmt" "*.tfm" "*.class" "*.fas" "*.lib" "*.mem" "*.x86f" "*.sparcf" "*.dfsl" "*.pfsl" "*.d64fsl" "*.p64fsl" "*.lx64fsl" "*.lx32fsl" "*.dx64fsl" "*.dx32fsl" "*.fx64fsl" "*.fx32fsl" "*.sx64fsl" "*.sx32fsl" "*.wx64fsl" "*.wx32fsl" "*.fasl" "*.ufsl" "*.fsl" "*.dxl" "*.lo" "*.la" "*.gmo" "*.mo" "*.toc" "*.aux" "*.cp" "*.fn" "*.ky" "*.pg" "*.tp" "*.vr" "*.cps" "*.fns" "*.kys" "*.pgs" "*.tps" "*.vrs" "*.pyc" "*.pyo")
@end lisp

List of file names which @code{helm-grep} shall exclude.
@end table

@anchor{Switches}
@subsubheading Switches

@table @asis
@item @code{helm-grep-ag-pipe-cmd-switches}
@vindex helm-grep-ag-pipe-cmd-switches

@strong{Standard Value}: nil

A list of additional parameters to pass to grep-ag pipe command.
Use parameters compatibles with the backend you are using
(i.e. AG for AG, PT for PT or RG for RG)

You probably don’t need to use this unless you know what you are
doing.

@item @code{helm-grep-pipe-cmd-switches}
@vindex helm-grep-pipe-cmd-switches

@strong{Standard Value}: nil

A list of additional parameters to pass to grep pipe command.
This will be used to pipe command for multiple pattern matching
for grep, zgrep ack-grep and git-grep backends.
If you add extra args for ack-grep, use ack-grep options, for
others (grep, zgrep and git-grep) use grep options.
Here are the commands where you may want to add switches:

grep --color=always
ack-grep --smart-case --color

You probably don’t need to use this unless you know what you are
doing.
@end table

@anchor{Command Default}
@subsubheading Command Default

@table @asis
@item @code{helm-default-zgrep-command}
@vindex helm-default-zgrep-command

@strong{Standard Value}: zgrep --color=always -a -n%cH -e %p %f

Default command for Zgrep.
See @code{helm-grep-default-command} for infos on format specs.
Option --color=always is supported and can be used safely to
replace the Helm internal match highlighting.  See
@code{helm-grep-default-command} for more infos.

@item @code{helm-grep-default-command}
@vindex helm-grep-default-command

@strong{Standard Value}: grep --color=always -a -d skip %e -n%cH -e %p %f

Default grep format command for @code{helm-do-grep-1}.
Where:
’%e’ format spec is for --exclude or --include grep options or
     ack-grep --type option.               (Not mandatory)

’%c’ format spec is for case-fold-search,
     whether to use the -i option of grep. (Not mandatory)
     When you specify this spec, helm grep will use smartcase
     that is when a upcase character is found in pattern case will
     be respected and no ’-i’ option will be used, otherwise, when
     no upcase character is found in pattern always use ’-i’.
     If you don’t want this behavior, don’t use this spec and
     specify or not the ’-i’ option.
     Note that with ack-grep this is not needed, just specify
     the ’--smart-case’ option.

’%p’ format spec is for pattern.           (Mandatory)

’%f’ format spec is for filenames.         (Mandatory)

If your grep version doesn’t support the --exclude/include args
don’t specify the ’%e’ format spec.

Helm also support ack-grep and git-grep.  The following is a
default command example for ack-grep:

(setq helm-grep-default-command ``ack-grep -Hn --color --smart-case --no-group %e %p %f''
       helm-grep-default-recurse-command ``ack-grep -H --color --smart-case --no-group %e %p %f'')

You can ommit the %e spec if you don’t want to be prompted for
types.

NOTE: Helm for ack-grep support ANSI sequences, so you can remove
the ``--no-color'' option safely (recommended).
However you should specify --color to enable multi matches highlighting
because ack disable it when output is piped.

Same for grep you can use safely the option ``--color=always'' (default).
You can customize the color of matches using GREP_COLORS env var.
e.g: (setenv ``GREP_COLORS'' ``ms=30;43:mc=30;43:sl=01;37:cx=:fn=35:ln=32:bn=32:se=36'')

To enable ANSI color in git-grep just add ``--color=always''.
To customize the ANSI color in git-grep, GREP_COLORS have no effect,
you will have to setup this in your .gitconfig:

[color ``grep'']
    match = black yellow

Where ``black'' is the foreground and ``yellow'' the background.
See the git documentation for more infos.

@code{helm-grep-default-command} and
@code{helm-grep-default-recurse-command} are independent, so you can
enable @code{helm-grep-default-command} with ack-grep and
@code{helm-grep-default-recurse-command} with grep if you want to be
faster on recursive grep.

NOTE: Remote grepping is not available with ack-grep, and badly
      supported with grep because tramp handles badly repeated
      remote processes in a short delay (< to 5s).

@item @code{helm-grep-default-recurse-command}
@vindex helm-grep-default-recurse-command

@strong{Standard Value}: grep --color=always -a -d recurse %e -n%cH -e %p %f

Default recursive grep format command for @code{helm-do-grep-1}.
See @code{helm-grep-default-command} for format specs and infos about
ack-grep.

@item @code{helm-pdfgrep-default-command}
@vindex helm-pdfgrep-default-command

@strong{Standard Value}: pdfgrep --color always -niH %s %s

Default command for pdfgrep.
Option ``--color always'' is supported starting Helm version
1.7.8.  When used matches will be highlighted according to
GREP_COLORS env var.

@item @code{helm-pdfgrep-default-read-command}
@vindex helm-pdfgrep-default-read-command

@strong{Standard Value}: nil

Default command to read pdf files from pdfgrep.
Where ’%f’ format spec is filename and ’%p’ is page number.
E.g. In Ubuntu you can set it to:

``evince --page-label=%p ’%f’''

If set to nil either @code{doc-view-mode} or @code{pdf-view-mode} will be
used instead of an external command.

@item @code{helm-pdfgrep-default-recurse-command}
@vindex helm-pdfgrep-default-recurse-command

@strong{Standard Value}: pdfgrep --color always -rniH %s %s

Default recurse command for pdfgrep.
Option ``--color always'' is supported starting Helm version
1.7.8.  When used matches will be highlighted according to
GREP_COLORS env var.
@end table

@anchor{Command uncategorized}
@subsubheading Command uncategorized

@table @asis
@item @code{helm-grep-ag-command}
@vindex helm-grep-ag-command

@strong{Standard Value}: ag --line-numbers -S --color --nogroup %s %s %s

The default command for AG, PT or RG@.

Takes three format specs, the first for type(s), the second for
pattern and the third for directory.

You can use safely ``--color'' (used by default) with AG RG and
PT@.

NOTE: Usage of ``--color=never'' is discouraged as it uses Elisp
to colorize matched items which is slower than using the native
colorization of backend, however it is still supported.

For ripgrep here is the command line to use:

rg --color=always --smart-case --no-heading --line-number %s %s %s

And to customize colors (always for ripgrep) use something like this:

    rg --color=always --colors ’match:bg:yellow’ --colors ’match:fg:black’
--smart-case --no-heading --line-number %s %s %s

This will change color for matched items from foreground red (the
default) to a yellow background with a black foreground.  Note
that your color settings for RG will not work properly with
multiples pattern if you have configured colors in rg config file
instead of command line. For more enhanced settings of ansi
colors see @uref{https://github.com/emacs-helm/helm/issues/2313}

You must use an output format that fit with helm grep, that is:

``filename:line-number:string''

The option ``--nogroup'' allow this.
The option ``--line-numbers'' is also mandatory except with
PT (not supported).
For RG the options ``--no-heading'' and ``--line-number'' are the
ones to use.

When modifying the default colors of matches with e.g.
``--color-match'' option of AG or ``--colors'' option of ripgrep
you may want to modify as well @code{helm-grep-ag-pipe-cmd-switches}
to have all matches colorized with the same color in multi
match.

Of course you can use several other options, see the man page of the
backend you are using.

@item @code{helm-grep-git-grep-command}
@vindex helm-grep-git-grep-command

@strong{Standard Value}: git --no-pager grep -n%cH --color=always --full-name -e %p -- %f

The git grep default command line.
The option ``--color=always'' can be used safely.
The color of matched items can be customized in your .gitconfig
See @code{helm-grep-default-command} for more infos.

The ``--exclude-standard'' and ``--no-index'' switches allow
skipping unwanted files specified in ~/.gitignore_global and
searching files not already staged (not enabled by default).

You have also to enable this in global ``.gitconfig'' with
    ``git config --global core.excludesfile ~/.gitignore_global''.
@end table

@anchor{uncategorized (49)}
@subsubheading uncategorized

@table @asis
@item @code{helm-grep-actions}
@vindex helm-grep-actions

@strong{Standard Value}:

@lisp
(("Find File" . helm-grep-action)
 ("Find file other frame" . helm-grep-other-frame)
 ("Save results in grep buffer" . helm-grep-save-results)
 ("Find file other window (C-u vertically)" . helm-grep-other-window))
@end lisp

Actions for helm grep.

@item @code{helm-grep-input-idle-delay}
@vindex helm-grep-input-idle-delay

@strong{Standard Value}: 0.1

Idle time before updating, specified in seconds.
A lower value (default) means Helm will display the results
faster. Increasing it to a higher value (e.g. 0.6) prevents the
buffer from flickering when updating.

@item @code{helm-grep-max-length-history}
@vindex helm-grep-max-length-history

@strong{Standard Value}: 100

Max number of elements to save in @code{helm-grep-history}.

@item @code{helm-grep-preferred-ext}
@vindex helm-grep-preferred-ext

@strong{Standard Value}: nil

This file extension will be preselected for grep.

@item @code{helm-grep-save-buffer-name-no-confirm}
@vindex helm-grep-save-buffer-name-no-confirm

@strong{Standard Value}: nil

When @strong{hgrep} already exists, auto append suffix.

@item @code{helm-grep-truncate-lines}
@vindex helm-grep-truncate-lines

@strong{Standard Value}: t

When nil the grep line that appears will not be truncated.
@end table

@node Hooks in library @samp{helm-grep}
@subsection Hooks in library @samp{helm-grep}

@anchor{Init}
@subsubheading Init

@table @asis
@item @code{helm-grep-after-init-hook}
@vindex helm-grep-after-init-hook

@strong{Standard Value}: nil

Hook that runs after initialization of the Helm buffer.

@item @code{helm-grep-before-init-hook}
@vindex helm-grep-before-init-hook

@strong{Standard Value}: nil

Hook that runs before initialization of the Helm buffer.
@end table

@anchor{uncategorized (50)}
@subsubheading uncategorized

@table @asis
@item @code{helm-grep-mode-hook}
@vindex helm-grep-mode-hook

@strong{Standard Value}: nil

Hook run after entering helm-grep mode.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)
@end table

@node Library helm-help
@section Library: helm-help

@menu
* Commands in library @code{helm-help} (excludes keymaps)::
@end menu

@node Commands in library @code{helm-help} (excludes keymaps)
@subsection Commands in library @code{helm-help} (excludes keymaps)

@anchor{uncategorized (51)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x c h h} (@code{helm-documentation})
@findex helm-documentation

@kindex C-x c h h

Preconfigured @code{helm} for Helm documentation.
With a prefix arg refresh the documentation.

Find here the documentation of all documented sources.
@end table

@node Library helm-id-utils
@section Library: helm-id-utils

@menu
* Commands in library @code{helm-id-utils} (excludes keymaps)::
* Options in library @samp{helm-id-utils}::
@end menu

@node Commands in library @code{helm-id-utils} (excludes keymaps)
@subsection Commands in library @code{helm-id-utils} (excludes keymaps)

@anchor{uncategorized (52)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x c M-g i} (@code{helm-gid})
@findex helm-gid

@kindex C-x c M-g i

Preconfigured @code{helm} for @code{gid} command line of @code{ID-Utils}.
Need A database created with the command @code{mkid} above
@code{default-directory}.
Need id-utils as dependency which provide @code{mkid}, @code{gid} etc..
See @uref{https://www.gnu.org/software/idutils/}.
@end table

@node Options in library @samp{helm-id-utils}
@subsection Options in library @samp{helm-id-utils}

@anchor{uncategorized (53)}
@subsubheading uncategorized

@table @asis
@item @code{helm-gid-db-file-name}
@vindex helm-gid-db-file-name

@strong{Standard Value}: ID

Name of a database file created by @code{mkid} command from @code{ID-utils}.

@item @code{helm-gid-program}
@vindex helm-gid-program

@strong{Standard Value}: gid

Name of gid command (usually @code{gid}).
For Mac OS X users, if you install GNU coreutils, the name @code{gid}
might be occupied by @code{id} from GNU coreutils, and you should set
it to correct name (or absolute path).  For example, if using
MacPorts to install id-utils, it should be @code{gid32}.
@end table

@node Library helm-imenu
@section Library: helm-imenu

@menu
* Commands in keymap @code{helm-imenu-map}::
* Commands in library @code{helm-imenu} (excludes keymaps)::
* Options in library @samp{helm-imenu}::
@end menu

@node Commands in keymap @code{helm-imenu-map}
@subsection Commands in keymap @code{helm-imenu-map}

@anchor{uncategorized (54)}
@subsubheading uncategorized

@table @asis
@item @kbd{M-<down>} (@code{helm-imenu-next-section})
@findex helm-imenu-next-section @r{(helm-imenu-map)}

@kindex M-<down> @r{(helm-imenu-map)}

@item @kbd{M-<up>} (@code{helm-imenu-previous-section})
@findex helm-imenu-previous-section @r{(helm-imenu-map)}

@kindex M-<up> @r{(helm-imenu-map)}
@end table

@node Commands in library @code{helm-imenu} (excludes keymaps)
@subsection Commands in library @code{helm-imenu} (excludes keymaps)

@anchor{uncategorized (55)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x c i} (@code{helm-imenu})
@findex helm-imenu

@kindex C-x c i

Preconfigured @code{helm} for @code{imenu}.

@item @kbd{C-x c I} (@code{helm-imenu-in-all-buffers})
@findex helm-imenu-in-all-buffers

@kindex C-x c I

Preconfigured @code{helm} for fetching imenu entries in all buffers with similar mode as current.
A mode is similar as current if it is the same, it is derived
i.e. @code{derived-mode-p} or it have an association in
@code{helm-imenu-all-buffer-assoc}.
@end table

@node Options in library @samp{helm-imenu}
@subsection Options in library @samp{helm-imenu}

@anchor{All}
@subsubheading All

@table @asis
@item @code{helm-imenu-all-buffer-assoc}
@vindex helm-imenu-all-buffer-assoc

@strong{Standard Value}: nil

Major mode association alist for @code{helm-imenu-in-all-buffers}.
Allow @code{helm-imenu-in-all-buffers} searching in these associated
buffers even if they are not derived from each other.  The alist
is bidirectional, i.e. no need to add ’((foo . bar) (bar . foo)),
only ’((foo . bar)) is needed.

@item @code{helm-imenu-in-all-buffers-separate-sources}
@vindex helm-imenu-in-all-buffers-separate-sources

@strong{Standard Value}: t

Display imenu index of each buffer in its own source when non-nil.

When nil all candidates are displayed in a single source.

NOTE: Each source will have as name ``Imenu <buffer-name>''.
@code{helm-source-imenu-all} will not be set, however it will continue
to be used as a flag for using default as input.  If you do not
want this behavior, remove it from
@code{helm-sources-using-default-as-input} even if not using a single
source to display imenu in all buffers.
@end table

@anchor{uncategorized (56)}
@subsubheading uncategorized

@table @asis
@item @code{helm-imenu-delimiter}
@vindex helm-imenu-delimiter

@strong{Standard Value}:  /

Delimit types of candidates and their value in @code{helm-buffer}.

@item @code{helm-imenu-execute-action-at-once-if-one}
@vindex helm-imenu-execute-action-at-once-if-one

@strong{Standard Value}: helm-imenu--execute-action-at-once-p

Goto the candidate when only one is remaining.

@item @code{helm-imenu-extra-modes}
@vindex helm-imenu-extra-modes

@strong{Standard Value}: nil

Extra modes where @code{helm-imenu-in-all-buffers} should look into.

@item @code{helm-imenu-fuzzy-match}
@vindex helm-imenu-fuzzy-match

@strong{Standard Value}: nil

Enable fuzzy matching in @code{helm-source-imenu}.

@item @code{helm-imenu-lynx-style-map}
@vindex helm-imenu-lynx-style-map

@strong{Standard Value}: nil

Use Arrow keys to jump to occurences.

@item @code{helm-imenu-type-faces}
@vindex helm-imenu-type-faces

@strong{Standard Value}:

@lisp
(("^Variables$" . font-lock-variable-name-face)
 ("^\\(Function\\|Functions\\|Defuns\\)$" . font-lock-function-name-face)
 ("^\\(Types\\|Provides\\|Requires\\|Classes\\|Class\\|Includes\\|Imports\\|Misc\\|Code\\)$" . font-lock-type-face))
@end lisp

Faces for showing type in helm-imenu.
This is a list of cons cells.  The cdr of each cell is a face to
be used, and it can also just be like '(:foreground
``yellow'').  Each car is a regexp match pattern of the imenu type
string.
@end table

@node Library helm-info
@section Library: helm-info

@menu
* Modes in library @code{helm-info}::
* Commands in library @code{helm-info} (excludes keymaps)::
* Options in library @samp{helm-info}::
@end menu

@node Modes in library @code{helm-info}
@subsection Modes in library @code{helm-info}

@anchor{minor-mode-p (12)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-info-nxml-mode}
@findex helm-info-nxml-mode

Predefined helm for nxml-mode info.

@item @code{helm-info-octave-mode}
@findex helm-info-octave-mode

Predefined helm for octave-mode info.

@item @code{helm-info-todo-mode}
@findex helm-info-todo-mode

Predefined helm for todo-mode info.

@item @code{helm-info-vhdl-mode}
@findex helm-info-vhdl-mode

Predefined helm for vhdl-mode info.
@end table

@node Commands in library @code{helm-info} (excludes keymaps)
@subsection Commands in library @code{helm-info} (excludes keymaps)

@anchor{Cvs}
@subsubheading Cvs

@table @asis
@item @code{helm-info-cvs}
@findex helm-info-cvs

Predefined helm for cvs info.

@item @code{helm-info-pcl-cvs}
@findex helm-info-pcl-cvs

Predefined helm for pcl-cvs info.
@end table

@anchor{Grub}
@subsubheading Grub

@table @asis
@item @code{helm-info-grub}
@findex helm-info-grub

Predefined helm for grub info.

@item @code{helm-info-grub-dev}
@findex helm-info-grub-dev

Predefined helm for grub-dev info.
@end table

@anchor{Find}
@subsubheading Find

@table @asis
@item @code{helm-info-find}
@findex helm-info-find

Predefined helm for find info.

@item @code{helm-info-find-maint}
@findex helm-info-find-maint

Predefined helm for find-maint info.
@end table

@anchor{Manual}
@subsubheading Manual

@table @asis
@item @code{helm-info-helm-manual}
@findex helm-info-helm-manual

Predefined helm for helm-manual info.

@item @code{helm-info-helm-manual-1}
@findex helm-info-helm-manual-1

Predefined helm for helm-manual-1 info.
@end table

@anchor{Automake}
@subsubheading Automake

@table @asis
@item @code{helm-info-automake-1}
@findex helm-info-automake-1

Predefined helm for automake-1 info.

@item @code{helm-info-automake-history}
@findex helm-info-automake-history

Predefined helm for automake-history info.
@end table

@anchor{Lzip}
@subsubheading Lzip

@table @asis
@item @code{helm-info-lzip}
@findex helm-info-lzip

Predefined helm for lzip info.

@item @code{helm-info-lzip-compressor}
@findex helm-info-lzip-compressor

Predefined helm for lzip-compressor info.

@item @code{helm-info-lzip-decompressor}
@findex helm-info-lzip-decompressor

Predefined helm for lzip-decompressor info.
@end table

@anchor{Emacs}
@subsubheading Emacs

@table @asis
@item @kbd{C-x c h r} (@code{helm-info-emacs})
@findex helm-info-emacs

@kindex C-x c h r

Predefined helm for emacs info.

@item @code{helm-info-emacs-gnutls}
@findex helm-info-emacs-gnutls

Predefined helm for emacs-gnutls info.

@item @code{helm-info-emacs-mime}
@findex helm-info-emacs-mime

Predefined helm for emacs-mime info.
@end table

@anchor{R uncategorized uncategorized uncategorized}
@subsubheading R uncategorized uncategorized uncategorized

@table @asis
@item @code{helm-info-R-FAQ}
@findex helm-info-R-FAQ

Predefined helm for R-FAQ info.

@item @code{helm-info-R-admin}
@findex helm-info-R-admin

Predefined helm for R-admin info.

@item @code{helm-info-R-data}
@findex helm-info-R-data

Predefined helm for R-data info.

@item @code{helm-info-R-exts}
@findex helm-info-R-exts

Predefined helm for R-exts info.

@item @code{helm-info-R-intro}
@findex helm-info-R-intro

Predefined helm for R-intro info.

@item @code{helm-info-R-ints}
@findex helm-info-R-ints

Predefined helm for R-ints info.

@item @code{helm-info-R-lang}
@findex helm-info-R-lang

Predefined helm for R-lang info.
@end table

@anchor{minor-mode-p (13)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-info-nxml-mode}
@findex helm-info-nxml-mode

Predefined helm for nxml-mode info.

@item @code{helm-info-octave-mode}
@findex helm-info-octave-mode

Predefined helm for octave-mode info.

@item @code{helm-info-todo-mode}
@findex helm-info-todo-mode

Predefined helm for todo-mode info.

@item @code{helm-info-vhdl-mode}
@findex helm-info-vhdl-mode

Predefined helm for vhdl-mode info.
@end table

@anchor{uncategorized uncategorized uncategorized uncategorized}
@subsubheading uncategorized uncategorized uncategorized uncategorized

@table @asis
@item @code{helm-info}
@findex helm-info

(helm-info &optional REFRESH)

Preconfigured @code{helm} for searching Info files' indices.

With a prefix argument \[universal-argument], set REFRESH to
non-nil.

Optional parameter REFRESH, when non-nil, re-evaluates
@code{helm-default-info-index-list}.  If the variable has been
customized, set it to its saved value.  If not, set it to its
standard value. See @code{custom-reevaluate-setting} for more.

REFRESH is useful when new Info files are installed.  If
@code{helm-default-info-index-list} has not been customized, the new
Info files are made available.

@item @kbd{C-x c h i} (@code{helm-info-at-point})
@findex helm-info-at-point

@kindex C-x c h i

Preconfigured @code{helm} for searching info at point.

@item @code{helm-info-auth}
@findex helm-info-auth

Predefined helm for auth info.

@item @code{helm-info-autosprintf}
@findex helm-info-autosprintf

Predefined helm for autosprintf info.

@item @code{helm-info-autotype}
@findex helm-info-autotype

Predefined helm for autotype info.

@item @code{helm-info-bc}
@findex helm-info-bc

Predefined helm for bc info.

@item @code{helm-info-bovine}
@findex helm-info-bovine

Predefined helm for bovine info.

@item @code{helm-info-bzip2}
@findex helm-info-bzip2

Predefined helm for bzip2 info.

@item @code{helm-info-calc}
@findex helm-info-calc

Predefined helm for calc info.

@item @code{helm-info-ccmode}
@findex helm-info-ccmode

Predefined helm for ccmode info.

@item @code{helm-info-cl}
@findex helm-info-cl

Predefined helm for cl info.

@item @code{helm-info-com_err}
@findex helm-info-com_err

Predefined helm for com_err info.

@item @code{helm-info-coreutils}
@findex helm-info-coreutils

Predefined helm for coreutils info.

@item @code{helm-info-cvsclient}
@findex helm-info-cvsclient

Predefined helm for cvsclient info.

@item @code{helm-info-dbus}
@findex helm-info-dbus

Predefined helm for dbus info.

@item @code{helm-info-dc}
@findex helm-info-dc

Predefined helm for dc info.

@item @code{helm-info-diffutils}
@findex helm-info-diffutils

Predefined helm for diffutils info.

@item @code{helm-info-dired-x}
@findex helm-info-dired-x

Predefined helm for dired-x info.

@item @code{helm-info-dvipng}
@findex helm-info-dvipng

Predefined helm for dvipng info.

@item @code{helm-info-dvips}
@findex helm-info-dvips

Predefined helm for dvips info.

@item @code{helm-info-ebrowse}
@findex helm-info-ebrowse

Predefined helm for ebrowse info.

@item @code{helm-info-ed}
@findex helm-info-ed

Predefined helm for ed info.

@item @code{helm-info-ede}
@findex helm-info-ede

Predefined helm for ede info.

@item @code{helm-info-ediff}
@findex helm-info-ediff

Predefined helm for ediff info.

@item @code{helm-info-edt}
@findex helm-info-edt

Predefined helm for edt info.

@item @code{helm-info-eieio}
@findex helm-info-eieio

Predefined helm for eieio info.

@item @code{helm-info-eintr}
@findex helm-info-eintr

Predefined helm for eintr info.

@item @code{helm-info-elisp}
@findex helm-info-elisp

Predefined helm for elisp info.

@item @code{helm-info-emms}
@findex helm-info-emms

Predefined helm for emms info.

@item @code{helm-info-epa}
@findex helm-info-epa

Predefined helm for epa info.

@item @code{helm-info-erc}
@findex helm-info-erc

Predefined helm for erc info.

@item @code{helm-info-ert}
@findex helm-info-ert

Predefined helm for ert info.

@item @code{helm-info-eshell}
@findex helm-info-eshell

Predefined helm for eshell info.

@item @code{helm-info-eudc}
@findex helm-info-eudc

Predefined helm for eudc info.

@item @code{helm-info-eww}
@findex helm-info-eww

Predefined helm for eww info.

@item @code{helm-info-fastjar}
@findex helm-info-fastjar

Predefined helm for fastjar info.

@item @code{helm-info-flex}
@findex helm-info-flex

Predefined helm for flex info.

@item @code{helm-info-flymake}
@findex helm-info-flymake

Predefined helm for flymake info.

@item @code{helm-info-fontname}
@findex helm-info-fontname

Predefined helm for fontname info.

@item @code{helm-info-forms}
@findex helm-info-forms

Predefined helm for forms info.

@item @code{helm-info-gettext}
@findex helm-info-gettext

Predefined helm for gettext info.

@item @code{helm-info-global}
@findex helm-info-global

Predefined helm for global info.

@item @code{helm-info-gnupg}
@findex helm-info-gnupg

Predefined helm for gnupg info.

@item @kbd{C-x c h g} (@code{helm-info-gnus})
@findex helm-info-gnus

@kindex C-x c h g

Predefined helm for gnus info.

@item @code{helm-info-gpm}
@findex helm-info-gpm

Predefined helm for gpm info.

@item @code{helm-info-grep}
@findex helm-info-grep

Predefined helm for grep info.

@item @code{helm-info-gzip}
@findex helm-info-gzip

Predefined helm for gzip info.

@item @code{helm-info-helm}
@findex helm-info-helm

Predefined helm for helm info.

@item @code{helm-info-helm-bugs}
@findex helm-info-helm-bugs

Predefined helm for helm-bugs info.

@item @code{helm-info-helm-devel}
@findex helm-info-helm-devel

Predefined helm for helm-devel info.

@item @code{helm-info-htmlfontify}
@findex helm-info-htmlfontify

Predefined helm for htmlfontify info.

@item @code{helm-info-idlwave}
@findex helm-info-idlwave

Predefined helm for idlwave info.

@item @code{helm-info-ido}
@findex helm-info-ido

Predefined helm for ido info.

@item @code{helm-info-idutils}
@findex helm-info-idutils

Predefined helm for idutils info.

@item @code{helm-info-info}
@findex helm-info-info

Predefined helm for info info.

@item @code{helm-info-info-stnd}
@findex helm-info-info-stnd

Predefined helm for info-stnd info.

@item @code{helm-info-kpathsea}
@findex helm-info-kpathsea

Predefined helm for kpathsea info.

@item @code{helm-info-latex2man}
@findex helm-info-latex2man

Predefined helm for latex2man info.

@item @code{helm-info-libffi}
@findex helm-info-libffi

Predefined helm for libffi info.

@item @code{helm-info-m4}
@findex helm-info-m4

Predefined helm for m4 info.

@item @code{helm-info-mairix-el}
@findex helm-info-mairix-el

Predefined helm for mairix-el info.

@item @code{helm-info-message}
@findex helm-info-message

Predefined helm for message info.

@item @code{helm-info-mh-e}
@findex helm-info-mh-e

Predefined helm for mh-e info.

@item @code{helm-info-nano}
@findex helm-info-nano

Predefined helm for nano info.

@item @code{helm-info-nettle}
@findex helm-info-nettle

Predefined helm for nettle info.

@item @code{helm-info-newsticker}
@findex helm-info-newsticker

Predefined helm for newsticker info.

@item @code{helm-info-org}
@findex helm-info-org

Predefined helm for org info.

@item @code{helm-info-pgg}
@findex helm-info-pgg

Predefined helm for pgg info.

@item @code{helm-info-rcirc}
@findex helm-info-rcirc

Predefined helm for rcirc info.

@item @code{helm-info-rcs}
@findex helm-info-rcs

Predefined helm for rcs info.

@item @code{helm-info-reftex}
@findex helm-info-reftex

Predefined helm for reftex info.

@item @code{helm-info-remember}
@findex helm-info-remember

Predefined helm for remember info.

@item @code{helm-info-rluserman}
@findex helm-info-rluserman

Predefined helm for rluserman info.

@item @code{helm-info-sasl}
@findex helm-info-sasl

Predefined helm for sasl info.

@item @code{helm-info-sc}
@findex helm-info-sc

Predefined helm for sc info.

@item @code{helm-info-sed}
@findex helm-info-sed

Predefined helm for sed info.

@item @code{helm-info-semantic}
@findex helm-info-semantic

Predefined helm for semantic info.

@item @code{helm-info-ses}
@findex helm-info-ses

Predefined helm for ses info.

@item @code{helm-info-sharutils}
@findex helm-info-sharutils

Predefined helm for sharutils info.

@item @code{helm-info-sieve}
@findex helm-info-sieve

Predefined helm for sieve info.

@item @code{helm-info-smtpmail}
@findex helm-info-smtpmail

Predefined helm for smtpmail info.

@item @code{helm-info-spd-say}
@findex helm-info-spd-say

Predefined helm for spd-say info.

@item @code{helm-info-speech-dispatcher}
@findex helm-info-speech-dispatcher

Predefined helm for speech-dispatcher info.

@item @code{helm-info-speedbar}
@findex helm-info-speedbar

Predefined helm for speedbar info.

@item @code{helm-info-srecode}
@findex helm-info-srecode

Predefined helm for srecode info.

@item @code{helm-info-ssip}
@findex helm-info-ssip

Predefined helm for ssip info.

@item @code{helm-info-tds}
@findex helm-info-tds

Predefined helm for tds info.

@item @code{helm-info-texi2html}
@findex helm-info-texi2html

Predefined helm for texi2html info.

@item @code{helm-info-texinfo}
@findex helm-info-texinfo

Predefined helm for texinfo info.

@item @code{helm-info-time}
@findex helm-info-time

Predefined helm for time info.

@item @code{helm-info-tlbuild}
@findex helm-info-tlbuild

Predefined helm for tlbuild info.

@item @code{helm-info-tramp}
@findex helm-info-tramp

Predefined helm for tramp info.

@item @code{helm-info-url}
@findex helm-info-url

Predefined helm for url info.

@item @code{helm-info-vip}
@findex helm-info-vip

Predefined helm for vip info.

@item @code{helm-info-viper}
@findex helm-info-viper

Predefined helm for viper info.

@item @code{helm-info-wdiff}
@findex helm-info-wdiff

Predefined helm for wdiff info.

@item @code{helm-info-web2c}
@findex helm-info-web2c

Predefined helm for web2c info.

@item @code{helm-info-wget}
@findex helm-info-wget

Predefined helm for wget info.

@item @code{helm-info-widget}
@findex helm-info-widget

Predefined helm for widget info.

@item @code{helm-info-wisent}
@findex helm-info-wisent

Predefined helm for wisent info.

@item @code{helm-info-woman}
@findex helm-info-woman

Predefined helm for woman info.

@item @code{helm-info-xboard}
@findex helm-info-xboard

Predefined helm for xboard info.
@end table

@node Options in library @samp{helm-info}
@subsection Options in library @samp{helm-info}

@anchor{uncategorized (57)}
@subsubheading uncategorized

@table @asis
@item @code{helm-default-info-index-list}
@vindex helm-default-info-index-list

@strong{Standard Value}:

@lisp
("helm-bugs" "helm-devel" "helm-manual-1" "helm-manual" "helm" "emms" "R-FAQ" "R-admin" "R-data" "R-exts" "R-intro" "R-ints" "R-lang" "auth" "automake-1" "automake-history" "autosprintf" "autotype" "bc" "bovine" "bzip2" "calc" "ccmode" "cl" "com_err" "coreutils" "cvs" "cvsclient" "dbus" "dc" "diffutils" "dired-x" "dvipng" "dvips" "ebrowse" "ed" "ede" "ediff" "edt" "eieio" "eintr" "elisp" "emacs-gnutls" "emacs-mime" "emacs" "epa" "erc" "ert" "eshell" "eudc" "eww" "fastjar" "find-maint" "find" "flex" "flymake" "fontname" "forms" "gettext" "global" "gnupg" "gnus" "gpm" "grep" "grub-dev" "grub" "gzip" "htmlfontify" "idlwave" "ido" "idutils" "info-stnd" "info" "kpathsea" "latex2man" "libffi" "lzip-compressor" "lzip-decompressor" "lzip" "m4" "mairix-el" "message" "mh-e" "nano" "nettle" "newsticker" "nxml-mode" "octave-mode" "org" "pcl-cvs" "pgg" "rcirc" "rcs" "reftex" "remember" "rluserman" "sasl" "sc" "sed" "semantic" "ses" "sharutils" "sieve" "smtpmail" "spd-say" "speech-dispatcher" "speedbar" "srecode" "ssip" "tds" "texi2html" "texinfo" "time" "tlbuild" "todo-mode" "tramp" "url" "vhdl-mode" "vip" "viper" "wdiff" "web2c" "wget" "widget" "wisent" "woman" "xboard")
@end lisp

Info files to search in with @code{helm-info}.

@item @code{helm-info-default-sources}
@vindex helm-info-default-sources

@strong{Standard Value}:

@lisp
(helm-source-info-elisp helm-source-info-cl helm-source-info-eieio helm-source-info-pages)
@end lisp

Default sources to use for looking up symbols at point in Info
files with @code{helm-info-at-point}.
@end table

@node Library helm-lib
@section Library: helm-lib

@menu
* Commands in library @code{helm-lib} (excludes keymaps)::
* Options in library @samp{helm-lib}::
* Hooks in library @samp{helm-lib}::
@end menu

@node Commands in library @code{helm-lib} (excludes keymaps)
@subsection Commands in library @code{helm-lib} (excludes keymaps)

@anchor{Point (1)}
@subsubheading Point

@table @asis
@item @code{helm-undo-yank-text-at-point}
@findex helm-undo-yank-text-at-point

Undo last entry added by @code{helm-yank-text-at-point}.

@item @code{helm-yank-text-at-point}
@findex helm-yank-text-at-point

(helm-yank-text-at-point ARG)

Yank text at point in @code{helm-current-buffer} into minibuffer.
@end table

@anchor{uncategorized (58)}
@subsubheading uncategorized

@table @asis
@item @code{helm--advice-wdired-finish-edit}
@findex helm--advice-wdired-finish-edit
@end table

@node Options in library @samp{helm-lib}
@subsection Options in library @samp{helm-lib}

@anchor{File}
@subsubheading File

@table @asis
@item @code{helm-boring-file-regexp-list}
@vindex helm-boring-file-regexp-list

@strong{Standard Value}:

@lisp
("\\.o$" "~$" "\\.bin$" "\\.lbin$" "\\.so$" "\\.a$" "\\.ln$" "\\.blg$" "\\.bbl$" "\\.elc$" "\\.lof$" "\\.glo$" "\\.idx$" "\\.lot$" "\\.svn\\(/\\|$\\)" "\\.hg\\(/\\|$\\)" "\\.git\\(/\\|$\\)" "\\.bzr\\(/\\|$\\)" "CVS\\(/\\|$\\)" "_darcs\\(/\\|$\\)" "_MTN\\(/\\|$\\)" "\\.fmt$" "\\.tfm$" "\\.class$" "\\.fas$" "\\.lib$" "\\.mem$" "\\.x86f$" "\\.sparcf$" "\\.dfsl$" "\\.pfsl$" "\\.d64fsl$" "\\.p64fsl$" "\\.lx64fsl$" "\\.lx32fsl$" "\\.dx64fsl$" "\\.dx32fsl$" "\\.fx64fsl$" "\\.fx32fsl$" "\\.sx64fsl$" "\\.sx32fsl$" "\\.wx64fsl$" "\\.wx32fsl$" "\\.fasl$" "\\.ufsl$" "\\.fsl$" "\\.dxl$" "\\.lo$" "\\.la$" "\\.gmo$" "\\.mo$" "\\.toc$" "\\.aux$" "\\.cp$" "\\.fn$" "\\.ky$" "\\.pg$" "\\.tp$" "\\.vr$" "\\.cps$" "\\.fns$" "\\.kys$" "\\.pgs$" "\\.tps$" "\\.vrs$" "\\.pyc$" "\\.pyo$")
@end lisp

A list of regexps matching boring files.

This list is build by default on @code{completion-ignored-extensions}.
The directory names should end with ``@emph{?`` e.g. ''\.git}?'' and
the file names should end with ``''.

These regexps may be used to match the entire path, not just the
file name, so for example to ignore files with a prefix
``.bak.'', use ``\.bak\..*$'' as the regexp.

NOTE: When modifying this, be sure to use customize interface or
the customize functions e.g. @code{customize-set-variable} and NOT
@code{setq}.

@item @code{helm-file-globstar}
@vindex helm-file-globstar

@strong{Standard Value}: t

Same as globstar bash shopt option.
When non-nil a pattern beginning with two stars will expand
recursively.
Directories expansion is not supported yet.
@end table

@anchor{Help}
@subsubheading Help

@table @asis
@item @code{helm-help-default-prompt}
@vindex helm-help-default-prompt

@strong{Standard Value}: [SPC,C-v,next:ScrollUp  b,M-v,prior:ScrollDown TAB:Cycle M-TAB:All C-s/r:Isearch q:Quit]

The prompt used in @code{helm-help}.

@item @code{helm-help-full-frame}
@vindex helm-help-full-frame

@strong{Standard Value}: t

Display help window in full frame when non nil.

Even when nil probably the same result (full frame) can be
reached by tweaking @code{display-buffer-alist}, but it is much more
convenient to use a simple boolean value here.

@item @code{helm-help-hkmap}
@vindex helm-help-hkmap

@strong{Standard Value}:

@lisp
(("C-v" . helm-help-scroll-up)
 ("SPC" . helm-help-scroll-up)
 ("<next>" . helm-help-scroll-up)
 ("M-v" . helm-help-scroll-down)
 ("b" . helm-help-scroll-down)
 ("<prior>" . helm-help-scroll-down)
 ("C-s" . isearch-forward)
 ("C-r" . isearch-backward)
 ("C-a" . move-beginning-of-line)
 ("C-e" . move-end-of-line)
 ("C-f" . forward-char)
 ("<right>" . forward-char)
 ("C-b" . backward-char)
 ("<left>" . backward-char)
 ("C-n" . helm-help-next-line)
 ("C-p" . helm-help-previous-line)
 ("<down>" . helm-help-next-line)
 ("<up>" . helm-help-previous-line)
 ("M-a" . backward-sentence)
 ("M-e" . forward-sentence)
 ("M-f" . forward-word)
 ("M-b" . backward-word)
 ("M->" . end-of-buffer)
 ("M-<" . beginning-of-buffer)
 ("C-SPC" . helm-help-toggle-mark)
 ("C-M-SPC" . mark-sexp)
 ("TAB" . org-cycle)
 ("C-m" . helm-help-org-open-at-point)
 ("C-&" . helm-help-org-mark-ring-goto)
 ("C-%" . org-mark-ring-push)
 ("M-TAB" . helm-help-org-cycle)
 ("M-w" . helm-help-copy-region-as-kill)
 ("q" . helm-help-quit))
@end lisp

Alist of (KEY . FUNCTION) for @code{helm-help}.

This is not a standard keymap, just an alist where it is possible to
define a simple KEY (a string with no spaces) associated with a
FUNCTION@. More complex key like ``C-x C-x'' are not supported.
Interactive functions will be called interactively whereas other
functions will be called with funcall except commands that are in
@code{helm-help-not-interactive-command}.
For convenience you can add bindings here with @code{helm-help-define-key}.
@end table

@anchor{Function (1)}
@subsubheading Function

@table @asis
@item @code{helm-describe-function-function}
@vindex helm-describe-function-function

@strong{Standard Value}: describe-function

Function used to describe functions in Helm.

@item @code{helm-describe-variable-function}
@vindex helm-describe-variable-function

@strong{Standard Value}: describe-variable

Function used to describe variables in Helm.

@item @code{helm-yank-text-at-point-function}
@vindex helm-yank-text-at-point-function

@strong{Standard Value}: nil

The function used to forward point with @code{helm-yank-text-at-point}.
With a nil value, fallback to default @code{forward-word}.
The function should take one arg, an integer like @code{forward-word}.
NOTE: Using @code{forward-symbol} here is not very useful as it is
already provided by M-n.
@end table

@anchor{uncategorized (59)}
@subsubheading uncategorized

@table @asis
@item @code{helm-advice-push-mark}
@vindex helm-advice-push-mark

@strong{Standard Value}: t

Override @code{push-mark} with a version avoiding duplicates when non-nil.

@item @code{helm-scroll-amount}
@vindex helm-scroll-amount

@strong{Standard Value}: nil

Scroll amount when scrolling other window in a helm session.
It is used by @code{helm-scroll-other-window}
and @code{helm-scroll-other-window-down}.

If you prefer scrolling line by line, set this value to 1.
@end table

@node Hooks in library @samp{helm-lib}
@subsection Hooks in library @samp{helm-lib}

@anchor{uncategorized (60)}
@subsubheading uncategorized

@table @asis
@item @code{helm-help-mode-after-hook}
@vindex helm-help-mode-after-hook

@strong{Standard Value}: nil

A hook that runs when helm-help exits.

@item @code{helm-help-mode-before-hook}
@vindex helm-help-mode-before-hook

@strong{Standard Value}: nil

A hook that runs before helm-help starts.
@end table

@node Library helm-locate
@section Library: helm-locate

@menu
* Commands in keymap @code{helm-locate-map}::
* Commands in library @code{helm-locate} (excludes keymaps)::
* Options in library @samp{helm-locate}::
@end menu

@node Commands in keymap @code{helm-locate-map}
@subsection Commands in keymap @code{helm-locate-map}

@anchor{uncategorized (61)}
@subsubheading uncategorized

@table @asis
@item @kbd{DEL} (@code{helm-delete-backward-no-update})
@findex helm-delete-backward-no-update @r{(helm-locate-map)}

@kindex DEL @r{(helm-locate-map)}

(helm-delete-backward-no-update ARG)

Disable update and delete ARG chars backward.
Update is reenabled when idle 1s.
@end table

@node Commands in library @code{helm-locate} (excludes keymaps)
@subsection Commands in library @code{helm-locate} (excludes keymaps)

@anchor{uncategorized (62)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x c l} (@code{helm-locate})
@findex helm-locate

@kindex C-x c l

(helm-locate ARG)

Preconfigured @code{helm} for Locate.
Note: you can add locate options after entering pattern.
See 'man locate' for valid options and also @code{helm-locate-command}.

You can specify a local database with prefix argument ARG@.
With two prefix arg, refresh the current local db or create it if
it doesn't exists.

To create a user specific db, use
``updatedb -l 0 -o db_path -U directory''.
Where db_path is a filename matched by
@code{helm-locate-db-file-regexp}.

@item @code{helm-projects-find-files}
@findex helm-projects-find-files

(helm-projects-find-files UPDATE)

Find files with locate in @code{helm-locate-project-list}.
With a prefix arg refresh the database in each project.
@end table

@node Options in library @samp{helm-locate}
@subsection Options in library @samp{helm-locate}

@anchor{Fuzzy (3)}
@subsubheading Fuzzy

@table @asis
@item @code{helm-locate-fuzzy-match}
@vindex helm-locate-fuzzy-match

@strong{Standard Value}: nil

Enable fuzzy matching in @code{helm-locate}.
Note that when this is enabled searching is done on basename.

@item @code{helm-locate-fuzzy-sort-fn}
@vindex helm-locate-fuzzy-sort-fn

@strong{Standard Value}: helm-locate-default-fuzzy-sort-fn

Default fuzzy matching sort function for locate.
@end table

@anchor{Db}
@subsubheading Db

@table @asis
@item @code{helm-ff-locate-db-filename}
@vindex helm-ff-locate-db-filename

@strong{Standard Value}: locate.db

The basename of the locatedb file you use locally in your directories.
When this is set and Helm finds such a file in the directory from
where you launch locate, it will use this file and will not
prompt you for a db file.
Note that this happen only when locate is launched with a prefix
arg.

@item @code{helm-locate-db-file-regexp}
@vindex helm-locate-db-file-regexp

@strong{Standard Value}: m?locate.db$

Default regexp to match locate database.
If nil Search in all files.
@end table

@anchor{Command}
@subsubheading Command

@table @asis
@item @code{helm-locate-command}
@vindex helm-locate-command

@strong{Standard Value}: nil

A list of arguments for locate program.

Helm will calculate a default value for your system on startup
unless @code{helm-locate-command} is non-nil.

Here are the default values it will use according to your system:

Gnu/linux:     ``locate %s -e -A --regex %s''
berkeley-unix: ``locate %s %s''
windows-nt:    ``es %s %s''
Others:        ``locate %s %s''

This string will be passed to format so it should end with @code{%s}.
The first format spec is used for the ``-i'' value of locate/es,
so don’t set it directly but use @code{helm-locate-case-fold-search}
for this.

The last option must be the one preceding pattern i.e ``-r'' or
``--regex''.

You will be able to pass other options such as ``-b'' or ``l''
during Helm invocation after entering pattern only when multi
matching, not when fuzzy matching.

Note that the ``-b'' option is added automatically by Helm when
var @code{helm-locate-fuzzy-match} is non-nil and switching back from
multimatch to fuzzy matching (this is done automatically when a
space is detected in pattern).

@item @code{helm-locate-create-db-command}
@vindex helm-locate-create-db-command

@strong{Standard Value}: updatedb -l 0 -o '%s' -U '%s'

Command used to create a locale locate db file.

@item @code{helm-locate-recursive-dirs-command}
@vindex helm-locate-recursive-dirs-command

@strong{Standard Value}: locate -i -e -A --regex '^%s' '%s.*$'

Command used for recursive directories completion in @code{helm-find-files}.

For Windows and @code{es} use something like ``es -r ^%s.*%s.*$''

The two format specs are mandatory.

If for some reasons you can’t use locate because your filesystem
doesn’t have a database, you can use find command from findutils
but be aware that it will be much slower.  See @code{helm-find-files}
embedded help for more infos.
@end table

@anchor{uncategorized (63)}
@subsubheading uncategorized

@table @asis
@item @code{helm-locate-case-fold-search}
@vindex helm-locate-case-fold-search

@strong{Standard Value}: smart

It have the same meaning as @code{helm-case-fold-search}.
The -i option of locate will be used depending of value of
@code{helm-pattern} when this is set to ’smart.
When nil ``-i'' will not be used at all and when non-nil it will
always be used.
NOTE: the -i option of the ``es'' command used on windows does
the opposite of ``locate'' command.

@item @code{helm-locate-project-list}
@vindex helm-locate-project-list

@strong{Standard Value}: nil

A list of directories, your projects.
When set, allow browsing recursively files in all directories of
this list with @code{helm-projects-find-files}.
@end table

@node Library helm-man
@section Library: helm-man

@menu
* Commands in library @code{helm-man} (excludes keymaps)::
* Options in library @samp{helm-man}::
@end menu

@node Commands in library @code{helm-man} (excludes keymaps)
@subsection Commands in library @code{helm-man} (excludes keymaps)

@anchor{uncategorized (64)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x c m} (@code{helm-man-woman})
@findex helm-man-woman

@kindex C-x c m

(helm-man-woman ARG)

Preconfigured @code{helm} for Man and Woman pages.
With a prefix arg reinitialize the cache.
@end table

@node Options in library @samp{helm-man}
@subsection Options in library @samp{helm-man}

@anchor{uncategorized (65)}
@subsubheading uncategorized

@table @asis
@item @code{helm-man-format-switches}
@vindex helm-man-format-switches

@strong{Standard Value}: -l %s

Arguments to pass to the @code{manual-entry} function.
Arguments are passed to @code{manual-entry} with @code{format.}

@item @code{helm-man-or-woman-function}
@vindex helm-man-or-woman-function

@strong{Standard Value}: Man-getpage-in-background

Default command to display a man page.
@end table

@node Library helm-misc
@section Library: helm-misc

@menu
* Commands in library @code{helm-misc} (excludes keymaps)::
* Options in library @samp{helm-misc}::
@end menu

@node Commands in library @code{helm-misc} (excludes keymaps)
@subsection Commands in library @code{helm-misc} (excludes keymaps)

@anchor{Commands}
@subsubheading Commands

@table @asis
@item @code{helm-ratpoison-commands}
@findex helm-ratpoison-commands

Preconfigured @code{helm} to execute ratpoison commands.

@item @code{helm-stumpwm-commands}
@findex helm-stumpwm-commands

Preconfigured helm for stumpwm commands.
@end table

@anchor{uncategorized (66)}
@subsubheading uncategorized

@table @asis
@item @code{helm-insert-latex-math}
@findex helm-insert-latex-math

Preconfigured helm for latex math symbols completion.

@item @code{helm-world-time}
@findex helm-world-time

Preconfigured @code{helm} to show world time.
Default action change TZ environment variable locally to emacs.
@end table

@node Options in library @samp{helm-misc}
@subsection Options in library @samp{helm-misc}

@anchor{uncategorized (67)}
@subsubheading uncategorized

@table @asis
@item @code{helm-minibuffer-history-must-match}
@vindex helm-minibuffer-history-must-match

@strong{Standard Value}: t

Allow inserting non matching elements when nil or ’confirm.

@item @code{helm-time-zone-home-location}
@vindex helm-time-zone-home-location

@strong{Standard Value}: Paris

The time zone of your home.

@item @code{helm-timezone-actions}
@vindex helm-timezone-actions

@strong{Standard Value}:

@lisp
(("Set timezone env (TZ)" lambda
  (candidate)
  (setenv "TZ" candidate)))
@end lisp

Actions for helm-timezone.
@end table

@node Library helm-mode
@section Library: helm-mode

@menu
* Modes in library @code{helm-mode}::
* Commands in keymap @code{helm-comp-read-map}::
* Commands in library @code{helm-mode} (excludes keymaps)::
* Options in library @samp{helm-mode}::
* Hooks in library @samp{helm-mode}::
@end menu

@node Modes in library @code{helm-mode}
@subsection Modes in library @code{helm-mode}

@anchor{minor-mode-p (14)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-mode}
@findex helm-mode

(helm-mode &optional ARG)

Toggle generic helm completion.

If called interactively, toggle @code{Helm mode}.  If the prefix
argument is positive, enable the mode, and if it is zero or
negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.

All functions in Emacs that use @code{completing-read},
@code{read-file-name}, @code{completion-in-region} and friends will use helm
interface when this mode is turned on.

However you can modify this behavior for functions of your choice
with @code{helm-completing-read-handlers-alist}.

Called with a positive arg, turn on unconditionally, with a
negative arg turn off.
You can toggle it with M-x @code{helm-mode}.

About @code{ido-mode}:
DO NOT enable @code{ido-everywhere} when using @code{helm-mode}.  Instead of
using @code{ido-mode}, add the commands where you want to use ido to
@code{helm-completing-read-handlers-alist} with @code{ido} as value.

Note: This mode is incompatible with Emacs23.
@end table

@node Commands in keymap @code{helm-comp-read-map}
@subsection Commands in keymap @code{helm-comp-read-map}

@anchor{uncategorized (68)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-<return>}

@item @kbd{M-@key{RET}} (@code{helm-cr-empty-string})
@findex helm-cr-empty-string @r{(helm-comp-read-map)}

@kindex C-<return> @r{(helm-comp-read-map)}
@kindex M-RET @r{(helm-comp-read-map)}

Return empty string.

@item @kbd{DEL} (@code{helm-mode-delete-char-backward-maybe})
@findex helm-mode-delete-char-backward-maybe @r{(helm-comp-read-map)}

@kindex DEL @r{(helm-comp-read-map)}

Delete char backward when text is not the prefix helm is completing against.
First call warns user about deleting prefix completion.
Second call deletes backward char in current-buffer and quits helm completion,
letting the user start a new completion with a new prefix.
@end table

@node Commands in library @code{helm-mode} (excludes keymaps)
@subsection Commands in library @code{helm-mode} (excludes keymaps)

@anchor{Backward}
@subsubheading Backward

@table @asis
@item @code{helm-mode-delete-char-backward-1}
@findex helm-mode-delete-char-backward-1

@item @code{helm-mode-delete-char-backward-2}
@findex helm-mode-delete-char-backward-2
@end table

@anchor{minor-mode-p (15)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-mode}
@findex helm-mode

(helm-mode &optional ARG)

Toggle generic helm completion.

If called interactively, toggle @code{Helm mode}.  If the prefix
argument is positive, enable the mode, and if it is zero or
negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.

All functions in Emacs that use @code{completing-read},
@code{read-file-name}, @code{completion-in-region} and friends will use helm
interface when this mode is turned on.

However you can modify this behavior for functions of your choice
with @code{helm-completing-read-handlers-alist}.

Called with a positive arg, turn on unconditionally, with a
negative arg turn off.
You can toggle it with M-x @code{helm-mode}.

About @code{ido-mode}:
DO NOT enable @code{ido-everywhere} when using @code{helm-mode}.  Instead of
using @code{ido-mode}, add the commands where you want to use ido to
@code{helm-completing-read-handlers-alist} with @code{ido} as value.

Note: This mode is incompatible with Emacs23.
@end table

@node Options in library @samp{helm-mode}
@subsection Options in library @samp{helm-mode}

@anchor{Read}
@subsubheading Read

@table @asis
@item @code{helm-comp-read-case-fold-search}
@vindex helm-comp-read-case-fold-search

@strong{Standard Value}: smart

Default Local setting of @code{helm-case-fold-search} for @code{helm-comp-read}.
See @code{helm-case-fold-search} for more info.
@end table

@anchor{Alist}
@subsubheading Alist

@table @asis
@item @code{helm-completing-read-handlers-alist}
@vindex helm-completing-read-handlers-alist

@strong{Standard Value}:

@lisp
((find-tag . helm-completing-read-default-find-tag)
 (xref-find-definitions . helm-completing-read-default-find-tag)
 (xref-find-references . helm-completing-read-default-find-tag)
 (ggtags-find-tag-dwim . helm-completing-read-default-find-tag)
 (tmm-menubar)
 (find-file)
 (execute-extended-command)
 (dired-do-rename . helm-read-file-name-handler-1)
 (dired-do-copy . helm-read-file-name-handler-1)
 (dired-do-symlink . helm-read-file-name-handler-1)
 (dired-do-relsymlink . helm-read-file-name-handler-1)
 (dired-do-hardlink . helm-read-file-name-handler-1)
 (basic-save-buffer . helm-read-file-name-handler-1)
 (write-file . helm-read-file-name-handler-1)
 (write-region . helm-read-file-name-handler-1))
@end lisp

Completing read functions for specific Emacs commands.

By default @code{helm-mode} use @code{helm-completing-read-default-handler} to
provide helm completion in each @code{completing-read} or @code{read-file-name}
found, but other functions can be specified here for specific
commands. This also allows disabling helm completion for some commands
when needed.

Each entry is a cons cell like (EMACS_COMMAND . COMPLETING-READ_HANDLER)
where key and value are symbols.

Each key is an Emacs command that use originaly @code{completing-read}.

Each value maybe a helm function that takes same arguments as
@code{completing-read} plus NAME and BUFFER, where NAME is the name of the new
helm source and BUFFER the name of the buffer we will use, but it can
be also a function not using helm, in this case the function should
take the same args as @code{completing-read} and not be prefixed by ``helm-''.

@code{helm} will use the name of the command calling @code{completing-read} as
NAME and BUFFER will be computed as well with NAME but prefixed with
``*helm-mode-''.

This function prefix name must start by ``helm-'' when it uses helm,
otherwise @code{helm} assumes the function is not a helm function and
expects the same args as @code{completing-read}, this allows you to define a
handler not using helm completion.

Example:

(defun foo/test ()
  (interactive)
  (message ``%S'' (completing-read ``test: '' ’(a b c d e))))

(defun helm-foo/test-completing-read-handler (prompt collection
                                              predicate require-match
                                              initial-input hist def
                                              inherit-input-method
                                              name buffer)
  (helm-comp-read prompt collection :marked-candidates t
                                    :name name
                                    :buffer buffer))

(add-to-list ’helm-completing-read-handlers-alist
             ’(foo/test . helm-foo/test-completing-read-handler))

We want here to make the regular @code{completing-read} in @code{foo/test}
return a list of candidate(s) instead of a single candidate.

Note that this function will be reused for ALL the @code{completing-read}
of this command, so it should handle all cases. E.g.,
if first @code{completing-read} completes against symbols and
second @code{completing-read} should handle only buffer,
your specialized function should handle both.

If the value of an entry is nil completion will fall back to
Emacs vanilla behaviour.
Example:

If you want to disable helm completion for @code{describe-function}, use:

(describe-function . nil)

Ido is also supported, you can use @code{ido-completing-read} and
@code{ido-read-file-name} as value of an entry or just ’ido.
Example:
Enable ido completion for @code{find-file}:

(find-file . ido)

same as

(find-file . ido-read-file-name)

Note that you don’t need to enable @code{ido-mode} for this to work, see
@code{helm-mode} documentation.
@end table

@anchor{Mode (6)}
@subsubheading Mode

@table @asis
@item @code{helm-mode-fuzzy-match}
@vindex helm-mode-fuzzy-match

@strong{Standard Value}: nil

Enable fuzzy matching in @code{helm-mode} globally.

This is deprecated, use instead helm-fuzzy as @code{helm-completion-style} or
even better ’emacs as @code{helm-completion-style} and add ’flex to
@code{completion-styles} (emacs-27) or ’helm-flex if ’flex is not available
in @code{completion-styles-alist} (emacs-26).

@item @code{helm-mode-hook}
@vindex helm-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)

@item @code{helm-mode-reverse-history}
@vindex helm-mode-reverse-history

@strong{Standard Value}: t

Display history source after current source when non nil.

Apply only in @code{helm-mode} handled commands.
@end table

@anchor{Completion (1)}
@subsubheading Completion

@table @asis
@item @code{helm-completion-in-region-default-sort-fn}
@vindex helm-completion-in-region-default-sort-fn

@strong{Standard Value}: helm-completion-in-region-sort-fn

The default sort function to sort candidates in completion-in-region.

When nil no sorting is done.
The function is a @code{filtered-candidate-transformer} function which takes
two args CANDIDATES and SOURCE@.
The function must use the flag @code{helm-completion--sorting-done} and
return CANDIDATES unchanged when the flag is nil.
See default function @code{helm-completion-in-region-sort-fn} as example.
It will be used only when @code{helm-completion-style} is either Emacs or
helm, otherwise when helm-fuzzy style is used, the fuzzy sort function
will be used.

@item @code{helm-completion-mark-suffix}
@vindex helm-completion-mark-suffix

@strong{Standard Value}: t

Push mark at end of suffix when non nil.

@item @code{helm-completion-style}
@vindex helm-completion-style

@strong{Standard Value}: helm

Style of completion to use in @code{completion-in-region}.

This affects only @code{completion-at-point} and friends, and
the @code{completing-read} using the default handler
i.e. @code{helm-completing-read-default-handler}.

NB: This has nothing to do with @code{completion-styles}, it is independent from
helm, but when using ’emacs as helm-completion-style helm
will use the @code{completion-styles} for its completions.
Up to the user to configure @code{completion-styles}.

There are three possible values to use:

@itemize
@item
helm, use multi match regular helm completion.

@item
helm-fuzzy, use fuzzy matching.  Note that as usual when
entering a space helm switch to multi matching mode.

@item
emacs, use regular Emacs completion according to
@code{completion-styles}.  Note that even in this style, helm allows using
multi match.  Emacs-27 provides a style called @code{flex} that can be used
aside @code{helm} style (see @code{completion-styles-alist}).  When @code{flex} style
is not available (Emacs<27) helm provides @code{helm-flex} style which is similar to
@code{flex} and helm fuzzy matching.
@end itemize

For a better experience, if you don’t know what to use, set
@code{completion-styles} to ’(flex) if you are using emacs-27 or to
’(helm-flex) if you are using emacs-26 and keep ’emacs as default
value for @code{helm-completion-style}.  Advanced users can also have a
look to @code{completion-category-overrides} to set styles according to category.

Please use custom interface or @code{customize-set-variable} to set this,
NOT @code{setq}.

@item @code{helm-completion-styles-alist}
@vindex helm-completion-styles-alist

@strong{Standard Value}:

@lisp
((gud-mode . helm))
@end lisp

Allow configuring @code{helm-completion-style} per mode.

Each entry is a cons cell like (mode . style) where style must be a
suitable value for @code{helm-completion-style}.
When specifying emacs as style for a mode, @code{completion-styles} can be
specified by using a cons cell specifying completion-styles to use
with helm emacs style, e.g. (foo-mode . (emacs helm flex)) will set
@code{completion-styles} to ’(helm flex) for foo-mode.  This affects only
completions happening in buffers and not minibuffer completions,
i.e. completing-read’s.

@item @code{helm-mode-handle-completion-in-region}
@vindex helm-mode-handle-completion-in-region

@strong{Standard Value}: t

Whether to replace or not @code{completion-in-region-function}.
This enables support for @code{completing-read-multiple} and @code{completion-at-point}
when non--nil.

@item @code{helm-mode-no-completion-in-region-in-modes}
@vindex helm-mode-no-completion-in-region-in-modes

@strong{Standard Value}: nil

A list of modes that do not want helm for @code{completion-in-region}.
@end table

@anchor{minor-mode-p (16)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-mode}
@vindex helm-mode

@strong{Standard Value}: t

(helm-mode &optional ARG)

Toggle generic helm completion.

If called interactively, toggle @code{Helm mode}.  If the prefix
argument is positive, enable the mode, and if it is zero or
negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.

All functions in Emacs that use @code{completing-read},
@code{read-file-name}, @code{completion-in-region} and friends will use helm
interface when this mode is turned on.

However you can modify this behavior for functions of your choice
with @code{helm-completing-read-handlers-alist}.

Called with a positive arg, turn on unconditionally, with a
negative arg turn off.
You can toggle it with M-x @code{helm-mode}.

About @code{ido-mode}:
DO NOT enable @code{ido-everywhere} when using @code{helm-mode}.  Instead of
using @code{ido-mode}, add the commands where you want to use ido to
@code{helm-completing-read-handlers-alist} with @code{ido} as value.

Note: This mode is incompatible with Emacs23.
@end table

@node Hooks in library @samp{helm-mode}
@subsection Hooks in library @samp{helm-mode}

@anchor{uncategorized (69)}
@subsubheading uncategorized

@table @asis
@item @code{helm-mode--ido-everywhere-hook}
@vindex helm-mode--ido-everywhere-hook

@strong{Standard Value}:

@item @code{helm-mode-hook}
@vindex helm-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)

@item @code{helm-mode-minibuffer-setup-hook-black-list}
@vindex helm-mode-minibuffer-setup-hook-black-list

@strong{Standard Value}:

@lisp
(minibuffer-completion-help)
@end lisp

Incompatible @code{minibuffer-setup-hook} functions go here.
A list of symbols.  @code{helm-mode} is rejecting all lambda’s, byte-code fns
and all functions belonging in this list from @code{minibuffer-setup-hook}.
This is mainly needed to prevent ``@strong{Completions}'' buffers to popup.
@end table

@node Library helm-multi-match
@section Library: helm-multi-match

@menu
* Modes in library @code{helm-multi-match}::
* Commands in library @code{helm-multi-match} (excludes keymaps)::
* Options in library @samp{helm-multi-match}::
* Hooks in library @samp{helm-multi-match}::
@end menu

@node Modes in library @code{helm-multi-match}
@subsection Modes in library @code{helm-multi-match}

@anchor{minor-mode-p (17)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-migemo-mode}
@findex helm-migemo-mode

(helm-migemo-mode &optional ARG)

Enable migemo in helm.
It will be available in the sources handling it,
i.e. the sources which have the slot :migemo with non--nil value.

If called interactively, toggle @code{Helm-Migemo mode}.  If the
prefix argument is positive, enable the mode, and if it is zero
or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.
@end table

@node Commands in library @code{helm-multi-match} (excludes keymaps)
@subsection Commands in library @code{helm-multi-match} (excludes keymaps)

@anchor{minor-mode-p (18)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-migemo-mode}
@findex helm-migemo-mode

(helm-migemo-mode &optional ARG)

Enable migemo in helm.
It will be available in the sources handling it,
i.e. the sources which have the slot :migemo with non--nil value.

If called interactively, toggle @code{Helm-Migemo mode}.  If the
prefix argument is positive, enable the mode, and if it is zero
or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.
@end table

@node Options in library @samp{helm-multi-match}
@subsection Options in library @samp{helm-multi-match}

@anchor{Migemo}
@subsubheading Migemo

@table @asis
@item @code{helm-migemo-mode-hook}
@vindex helm-migemo-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm-migemo-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)
@end table

@anchor{minor-mode-p (19)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-migemo-mode}
@vindex helm-migemo-mode

@strong{Standard Value}: nil

(helm-migemo-mode &optional ARG)

Enable migemo in helm.
It will be available in the sources handling it,
i.e. the sources which have the slot :migemo with non--nil value.

If called interactively, toggle @code{Helm-Migemo mode}.  If the
prefix argument is positive, enable the mode, and if it is zero
or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.
@end table

@anchor{uncategorized (70)}
@subsubheading uncategorized

@table @asis
@item @code{helm-mm-matching-method}
@vindex helm-mm-matching-method

@strong{Standard Value}: multi3

Matching method for helm match plugin.
You can set here different methods to match candidates in helm.
Here are the possible value of this symbol and their meaning:
@itemize
@item
multi1: Respect order, prefix of pattern must match.
@item
multi2: Same but with partial match.
@item
multi3: The best, multiple regexp match, allow negation.
@item
multi3p: Same but prefix must match.
@end itemize

Default is multi3, you should keep this for a better experience.

Note that multi1 and multi3p are incompatible with fuzzy matching
in file completion and by the way fuzzy matching will be disabled there
when these options are used.
@end table

@node Hooks in library @samp{helm-multi-match}
@subsection Hooks in library @samp{helm-multi-match}

@anchor{uncategorized (71)}
@subsubheading uncategorized

@table @asis
@item @code{helm-migemo-mode-hook}
@vindex helm-migemo-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm-migemo-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)
@end table

@node Library helm-net
@section Library: helm-net

@menu
* Commands in library @code{helm-net} (excludes keymaps)::
* Options in library @samp{helm-net}::
@end menu

@node Commands in library @code{helm-net} (excludes keymaps)
@subsection Commands in library @code{helm-net} (excludes keymaps)

@anchor{Browse}
@subsubheading Browse

@table @asis
@item @code{helm-browse-url-chromium}
@findex helm-browse-url-chromium

(helm-browse-url-chromium URL &optional IGNORE)

Browse URL with Google Chrome browser.

@item @code{helm-browse-url-conkeror}
@findex helm-browse-url-conkeror

(helm-browse-url-conkeror URL &optional IGNORE)

Browse URL with conkeror browser.

@item @code{helm-browse-url-firefox}
@findex helm-browse-url-firefox

(helm-browse-url-firefox URL &optional IGNORE)

Same as @code{browse-url-firefox} but detach from Emacs.

So when you quit Emacs you can keep your Firefox session open and
not be prompted to kill the Firefox process.

NOTE: Probably not supported on some systems (e.g., Windows).

@item @code{helm-browse-url-next}
@findex helm-browse-url-next

(helm-browse-url-next URL &optional IGNORE)

Browse URL with next browser.

@item @code{helm-browse-url-opera}
@findex helm-browse-url-opera

(helm-browse-url-opera URL &optional IGNORE)

Browse URL with Opera browser and detach from Emacs.

So when you quit Emacs you can keep your Opera session open and
not be prompted to kill the Opera process.

NOTE: Probably not supported on some systems (e.g., Windows).

@item @code{helm-browse-url-uzbl}
@findex helm-browse-url-uzbl

(helm-browse-url-uzbl URL &optional IGNORE)

Browse URL with uzbl browser.
@end table

@anchor{uncategorized (72)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x c C-c g} (@code{helm-google-suggest})
@findex helm-google-suggest

@kindex C-x c C-c g

Preconfigured @code{helm} for Google search with Google suggest.

@item @kbd{C-x c s} (@code{helm-surfraw})
@findex helm-surfraw

@kindex C-x c s

(helm-surfraw PATTERN ENGINE)

Preconfigured @code{helm} to search PATTERN with search ENGINE@.
@end table

@node Options in library @samp{helm-net}
@subsection Options in library @samp{helm-net}

@anchor{Function (2)}
@subsubheading Function

@table @asis
@item @code{helm-surfraw-default-browser-function}
@vindex helm-surfraw-default-browser-function

@strong{Standard Value}: nil

The browse url function you prefer to use with surfraw.
When nil, fallback to @code{browse-url-browser-function}.
@end table

@anchor{Curl}
@subsubheading Curl

@table @asis
@item @code{helm-net-curl-switches}
@vindex helm-net-curl-switches

@strong{Standard Value}:

@lisp
("-s" "-L")
@end lisp

Arguments list passed to curl when using @code{helm-net-prefer-curl}.

@item @code{helm-net-prefer-curl}
@vindex helm-net-prefer-curl

@strong{Standard Value}: nil

When non--nil use CURL external program to fetch data.
Otherwise @code{url-retrieve-synchronously} is used.
@end table

@anchor{Url}
@subsubheading Url

@table @asis
@item @code{helm-browse-url-firefox-new-window}
@vindex helm-browse-url-firefox-new-window

@strong{Standard Value}: -new-tab

Allow choosing to browse url in new window or new tab.
Can be ``-new-tab'' (default) or ``-new-window''.

@item @code{helm-home-url}
@vindex helm-home-url

@strong{Standard Value}: @uref{https://www.google.com}

Default url to use as home url.

@item @code{helm-surfraw-duckduckgo-url}
@vindex helm-surfraw-duckduckgo-url

@strong{Standard Value}: @uref{https://duckduckgo.com/lite/?q=%s&kp=1}

The Duckduckgo url.
This is a format string, don’t forget the @code{%s}.
If you have personal settings saved on duckduckgo you should have
a personal url, see your settings on duckduckgo.
@end table

@anchor{Suggest Url}
@subsubheading Suggest Url

@table @asis
@item @code{helm-search-suggest-action-imdb-url}
@vindex helm-search-suggest-action-imdb-url

@strong{Standard Value}: @uref{http://www.imdb.com/find?s=all&q=%s}

The IMDb search url.
This is a format string, don’t forget the @code{%s}.

@item @code{helm-search-suggest-action-wikipedia-url}
@vindex helm-search-suggest-action-wikipedia-url

@strong{Standard Value}: @uref{https://en.wikipedia.org/wiki/Special:Search?search=%s}

The Wikipedia search url.
This is a format string, don’t forget the @code{%s}.

@item @code{helm-search-suggest-action-youtube-url}
@vindex helm-search-suggest-action-youtube-url

@strong{Standard Value}: @uref{https://www.youtube.com/results?aq=f&search_query=%s}

The Youtube search url.
This is a format string, don’t forget the @code{%s}.
@end table

@anchor{Suggest Google Url}
@subsubheading Suggest Google Url

@table @asis
@item @code{helm-google-suggest-search-url}
@vindex helm-google-suggest-search-url

@strong{Standard Value}: @uref{https://encrypted.google.com/search?ie=utf-8&oe=utf-8&q=%s}

URL used for Google searching.
This is a format string, don’t forget the @code{%s}.

@item @code{helm-google-suggest-url}
@vindex helm-google-suggest-url

@strong{Standard Value}: @uref{https://encrypted.google.com/complete/search?output=toolbar&q=%s}

URL used for looking up Google suggestions.
This is a format string, don’t forget the @code{%s}.

@item @code{helm-search-suggest-action-google-maps-url}
@vindex helm-search-suggest-action-google-maps-url

@strong{Standard Value}: @uref{https://maps.google.com/maps?f=q&source=s_q&q=%s}

The Google Maps search url.
This is a format string, don’t forget the @code{%s}.

@item @code{helm-search-suggest-action-google-news-url}
@vindex helm-search-suggest-action-google-news-url

@strong{Standard Value}: @uref{https://www.google.com/search?safe=off&prmd=nvlifd&source=lnms&tbs=nws:1&q=%s}

The Google News search url.
This is a format string, don’t forget the @code{%s}.
@end table

@anchor{Suggest Google uncategorized}
@subsubheading Suggest Google uncategorized

@table @asis
@item @code{helm-google-suggest-actions}
@vindex helm-google-suggest-actions

@strong{Standard Value}:

@lisp
(("Google Search" . helm-google-suggest-action)
 ("Wikipedia" lambda
  (candidate)
  (helm-search-suggest-perform-additional-action helm-search-suggest-action-wikipedia-url candidate))
 ("Youtube" lambda
  (candidate)
  (helm-search-suggest-perform-additional-action helm-search-suggest-action-youtube-url candidate))
 ("IMDb" lambda
  (candidate)
  (helm-search-suggest-perform-additional-action helm-search-suggest-action-imdb-url candidate))
 ("Google Maps" lambda
  (candidate)
  (helm-search-suggest-perform-additional-action helm-search-suggest-action-google-maps-url candidate))
 ("Google News" lambda
  (candidate)
  (helm-search-suggest-perform-additional-action helm-search-suggest-action-google-news-url candidate)))
@end lisp

List of actions for google suggest sources.

@item @code{helm-google-suggest-default-browser-function}
@vindex helm-google-suggest-default-browser-function

@strong{Standard Value}: nil

The browse url function you prefer to use with Google suggest.
When nil, use the first browser function available
See @code{helm-browse-url-default-browser-alist}.

@item @code{helm-google-suggest-use-curl-p}
@vindex helm-google-suggest-use-curl-p

@strong{Standard Value}: nil

When non--nil use CURL external program to fetch data.
Otherwise @code{url-retrieve-synchronously} is used.
@end table

@node Library helm-occur
@section Library: helm-occur

@menu
* Modes in library @code{helm-occur}::
* Commands in keymap @code{helm-occur-map}::
* Commands in keymap @code{helm-occur-mode-map}::
* Commands in library @code{helm-occur} (excludes keymaps)::
* Options in library @samp{helm-occur}::
* Hooks in library @samp{helm-occur}::
@end menu

@node Modes in library @code{helm-occur}
@subsection Modes in library @code{helm-occur}

@anchor{other-mode-p (3)}
@subsubheading other-mode-p

@table @asis
@item @code{helm-occur-mode}
@findex helm-occur-mode

Major mode to provide actions in helm moccur saved buffer.

Special commands:
\@{helm-occur-mode-map@}

In addition to any hooks its parent mode @code{special-mode} might have
run, this mode runs the hook @code{helm-occur-mode-hook}, as the final or
penultimate step during initialization.
@end table

@node Commands in keymap @code{helm-occur-map}
@subsection Commands in keymap @code{helm-occur-map}

@anchor{uncategorized (73)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-c C-o} (@code{helm-occur-run-goto-line-of})
@findex helm-occur-run-goto-line-of @r{(helm-occur-map)}

@kindex C-c C-o @r{(helm-occur-map)}

Run goto line new frame action from @code{helm-occur}.

@item @kbd{C-c o} (@code{helm-occur-run-goto-line-ow})
@findex helm-occur-run-goto-line-ow @r{(helm-occur-map)}

@kindex C-c o @r{(helm-occur-map)}

Run goto line other window action from @code{helm-occur}.

@item @kbd{C-x C-s} (@code{helm-occur-run-save-buffer})
@findex helm-occur-run-save-buffer @r{(helm-occur-map)}

@kindex C-x C-s @r{(helm-occur-map)}

Run moccur save results action from @code{helm-moccur}.
@end table

@node Commands in keymap @code{helm-occur-mode-map}
@subsection Commands in keymap @code{helm-occur-mode-map}

@anchor{uncategorized File}
@subsubheading uncategorized File

@table @asis
@item @kbd{M-<down>}

@item @kbd{M-N} (@code{helm-gm-next-file})
@findex helm-gm-next-file @r{(helm-occur-mode-map)}

@kindex M-<down> @r{(helm-occur-mode-map)}
@kindex M-N @r{(helm-occur-mode-map)}

@item @kbd{M-<up>}

@item @kbd{M-P} (@code{helm-gm-precedent-file})
@findex helm-gm-precedent-file @r{(helm-occur-mode-map)}

@kindex M-<up> @r{(helm-occur-mode-map)}
@kindex M-P @r{(helm-occur-mode-map)}
@end table

@anchor{uncategorized Occur}
@subsubheading uncategorized Occur

@table @asis
@item @kbd{@key{RET}} (@code{helm-occur-mode-goto-line})
@findex helm-occur-mode-goto-line @r{(helm-occur-mode-map)}

@kindex RET @r{(helm-occur-mode-map)}

@item @kbd{C-o} (@code{helm-occur-mode-goto-line-ow})
@findex helm-occur-mode-goto-line-ow @r{(helm-occur-mode-map)}

@kindex C-o @r{(helm-occur-mode-map)}

@item @kbd{C-<up>}

@item @kbd{M-p} (@code{helm-occur-mode-goto-line-ow-backward})
@findex helm-occur-mode-goto-line-ow-backward @r{(helm-occur-mode-map)}

@kindex C-<up> @r{(helm-occur-mode-map)}
@kindex M-p @r{(helm-occur-mode-map)}

(helm-occur-mode-goto-line-ow-backward ARG)

@item @kbd{C-<down>}

@item @kbd{M-n} (@code{helm-occur-mode-goto-line-ow-forward})
@findex helm-occur-mode-goto-line-ow-forward @r{(helm-occur-mode-map)}

@kindex C-<down> @r{(helm-occur-mode-map)}
@kindex M-n @r{(helm-occur-mode-map)}

(helm-occur-mode-goto-line-ow-forward ARG)

@item @kbd{C-c b} (@code{helm-occur-mode-resume-session})
@findex helm-occur-mode-resume-session @r{(helm-occur-mode-map)}

@kindex C-c b @r{(helm-occur-mode-map)}
@end table

@node Commands in library @code{helm-occur} (excludes keymaps)
@subsection Commands in library @code{helm-occur} (excludes keymaps)

@anchor{Mode (7)}
@subsubheading Mode

@table @asis
@item @code{helm-occur-mode-mouse-goto-line}
@findex helm-occur-mode-mouse-goto-line

(helm-occur-mode-mouse-goto-line EVENT)
@end table

@anchor{Isearch}
@subsubheading Isearch

@table @asis
@item @code{helm-multi-occur-from-isearch}
@findex helm-multi-occur-from-isearch

Invoke @code{helm-multi-occur} from isearch.

With a prefix arg, reverse the behavior of
@code{helm-moccur-always-search-in-current}.
The prefix arg can be set before calling
@code{helm-multi-occur-from-isearch} or during the buffer selection.

To use this bind it to a key in @code{isearch-mode-map}.

@item @code{helm-occur-from-isearch}
@findex helm-occur-from-isearch

Invoke @code{helm-occur} from isearch.

To use this bind it to a key in @code{isearch-mode-map}.
@end table

@anchor{other-mode-p (4)}
@subsubheading other-mode-p

@table @asis
@item @code{helm-occur-mode}
@findex helm-occur-mode

Major mode to provide actions in helm moccur saved buffer.

Special commands:
\@{helm-occur-mode-map@}

In addition to any hooks its parent mode @code{special-mode} might have
run, this mode runs the hook @code{helm-occur-mode-hook}, as the final or
penultimate step during initialization.
@end table

@anchor{uncategorized (74)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x c M-s o}

@item @kbd{M-s o} (@code{helm-occur})
@findex helm-occur

@kindex C-x c M-s o
@kindex M-s o

Preconfigured helm for searching lines matching pattern in @code{current-buffer}.

When @code{helm-source-occur} is member of
@code{helm-sources-using-default-as-input} which is the default,
symbol at point is searched at startup.

When a region is marked search only in this region by narrowing.

To search in multiples buffers start from one of the commands listing
buffers (i.e. a helm command using @code{helm-source-buffers-list} like
@code{helm-mini}) and use the multi occur buffers action.

This is the helm implementation that collect lines matching pattern
like vanilla Emacs @code{occur} but have nothing to do with it, the search
engine beeing completely different and also much faster.

@item @code{helm-occur-right}
@findex helm-occur-right

@code{helm-occur} action for right arrow.
This is used when @code{helm-occur-use-ioccur-style-keys} is enabled.
If follow is enabled (default) go to next source, otherwise execute
persistent action.

@item @code{helm-occur-run-default-action}
@findex helm-occur-run-default-action

@item @code{helm-occur-visible-buffers}
@findex helm-occur-visible-buffers

Run helm-occur on all visible buffers in frame.
@end table

@node Options in library @samp{helm-occur}
@subsection Options in library @samp{helm-occur}

@anchor{uncategorized uncategorized uncategorized uncategorized (1)}
@subsubheading uncategorized uncategorized uncategorized uncategorized

@table @asis
@item @code{helm-occur-actions}
@vindex helm-occur-actions

@strong{Standard Value}:

@lisp
(("Go to Line" . helm-occur-goto-line)
 ("Goto line other window (C-u vertically)" . helm-occur-goto-line-ow)
 ("Goto line new frame" . helm-occur-goto-line-of)
 ("Save buffer" . helm-occur-save-results))
@end lisp

Actions for helm-occur.

@item @code{helm-occur-always-search-in-current}
@vindex helm-occur-always-search-in-current

@strong{Standard Value}: nil

Helm multi occur always search in current buffer when non--nil.

@item @code{helm-occur-auto-update-on-resume}
@vindex helm-occur-auto-update-on-resume

@strong{Standard Value}: nil

Allow auto updating helm-occur buffer when outdated.
noask => Always update without asking
nil   => Don’t update but signal buffer needs update
never => Never update and do not signal buffer needs update
Any other non--nil value update after confirmation.

@item @code{helm-occur-buffer-substring-fn-for-modes}
@vindex helm-occur-buffer-substring-fn-for-modes

@strong{Standard Value}:

@lisp
((mu4e-headers-mode . buffer-substring))
@end lisp

Function to use to display buffer contents for major-mode.

Can be one of @code{buffer-substring} or @code{buffer-substring-no-properties}.

Note that when using @code{buffer-substring} initialization will be slower.

@item @code{helm-occur-candidate-number-limit}
@vindex helm-occur-candidate-number-limit

@strong{Standard Value}: 99999

Value of @code{helm-candidate-number-limit} for helm-occur.

@item @code{helm-occur-keep-closest-position}
@vindex helm-occur-keep-closest-position

@strong{Standard Value}: t

When non nil select closest candidate from point after update.
This happen only in @code{helm-source-occur} which is always related to @code{current-buffer}.

@item @code{helm-occur-truncate-lines}
@vindex helm-occur-truncate-lines

@strong{Standard Value}: t

Truncate lines in occur buffer when non nil.

@item @code{helm-occur-use-ioccur-style-keys}
@vindex helm-occur-use-ioccur-style-keys

@strong{Standard Value}: nil

Similar to @code{helm-grep-use-ioccur-style-keys} but for multi occur.

Note that if you define this variable with @code{setq} your change will
have no effect, use customize instead.
@end table

@node Hooks in library @samp{helm-occur}
@subsection Hooks in library @samp{helm-occur}

@anchor{uncategorized (75)}
@subsubheading uncategorized

@table @asis
@item @code{helm-occur-mode-hook}
@vindex helm-occur-mode-hook

@strong{Standard Value}: nil

Hook run after entering helm-moccur mode.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)
@end table

@node Library helm-regexp
@section Library: helm-regexp

@menu
* Commands in library @code{helm-regexp} (excludes keymaps)::
@end menu

@node Commands in library @code{helm-regexp} (excludes keymaps)
@subsection Commands in library @code{helm-regexp} (excludes keymaps)

@anchor{uncategorized (76)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x c r} (@code{helm-regexp})
@findex helm-regexp

@kindex C-x c r

Preconfigured helm to build regexps.
@code{query-replace-regexp} can be run from there against found regexp.
@end table

@node Library helm-ring
@section Library: helm-ring

@menu
* Commands in keymap @code{helm-kill-ring-map}::
* Commands in library @code{helm-ring} (excludes keymaps)::
* Options in library @samp{helm-ring}::
@end menu

@node Commands in keymap @code{helm-kill-ring-map}
@subsection Commands in keymap @code{helm-kill-ring-map}

@anchor{uncategorized (77)}
@subsubheading uncategorized

@table @asis
@item @kbd{M-D} (@code{helm-kill-ring-delete})
@findex helm-kill-ring-delete @r{(helm-kill-ring-map)}

@kindex M-D @r{(helm-kill-ring-map)}

Delete marked candidates from @code{kill-ring}.

This is a command for @code{helm-kill-ring-map}.

@item @kbd{C-c C-k} (@code{helm-kill-ring-kill-selection})
@findex helm-kill-ring-kill-selection @r{(helm-kill-ring-map)}

@kindex C-c C-k @r{(helm-kill-ring-map)}

Store the real value of candidate in kill-ring.
Same as @code{helm-kill-selection-and-quit} called with a prefix arg.

@item @kbd{C-c d} (@code{helm-kill-ring-run-persistent-delete})
@findex helm-kill-ring-run-persistent-delete @r{(helm-kill-ring-map)}

@kindex C-c d @r{(helm-kill-ring-map)}

Delete current candidate without quitting.

@item @kbd{C-s} (@code{helm-kill-ring-run-search-from-string})
@findex helm-kill-ring-run-search-from-string @r{(helm-kill-ring-map)}

@kindex C-s @r{(helm-kill-ring-map)}

@item @kbd{C-]} (@code{helm-kill-ring-toggle-truncated})
@findex helm-kill-ring-toggle-truncated @r{(helm-kill-ring-map)}

@kindex C-] @r{(helm-kill-ring-map)}

Toggle truncated view of candidates in helm kill-ring browser.
@end table

@node Commands in library @code{helm-ring} (excludes keymaps)
@subsection Commands in library @code{helm-ring} (excludes keymaps)

@anchor{Ring}
@subsubheading Ring

@table @asis
@item @kbd{C-x c M-y} (@code{helm-show-kill-ring})
@findex helm-show-kill-ring

@kindex C-x c M-y

Preconfigured @code{helm} for @code{kill-ring}.
It is drop-in replacement of @code{yank-pop}.

First call open the kill-ring browser, next calls move to next line.
@end table

@anchor{Mark (1)}
@subsubheading Mark

@table @asis
@item @kbd{C-x c C-c @key{SPC}} (@code{helm-all-mark-rings})
@findex helm-all-mark-rings

@kindex C-x c C-c SPC

Preconfigured @code{helm} for @code{helm-source-global-mark-ring} and @code{helm-source-mark-ring}.

@item @code{helm-global-mark-ring}
@findex helm-global-mark-ring

Preconfigured @code{helm} for @code{helm-source-global-mark-ring}.

@item @code{helm-mark-ring}
@findex helm-mark-ring

Preconfigured @code{helm} for @code{helm-source-mark-ring}.
@end table

@anchor{uncategorized (78)}
@subsubheading uncategorized

@table @asis
@item @code{helm-execute-kmacro}
@findex helm-execute-kmacro

Preconfigured helm for keyboard macros.
Define your macros with @code{f3} and @code{f4}.
See (info ``(emacs) Keyboard Macros'') for detailed infos.
This command is useful when used with persistent action.

@item @kbd{C-x c C-x r i} (@code{helm-register})
@findex helm-register

@kindex C-x c C-x r i

Preconfigured @code{helm} for Emacs registers.
@end table

@node Options in library @samp{helm-ring}
@subsection Options in library @samp{helm-ring}

@anchor{Offset}
@subsubheading Offset

@table @asis
@item @code{helm-register-max-offset}
@vindex helm-register-max-offset

@strong{Standard Value}: 160

Max size of string register entries before truncating.
@end table

@anchor{Kill}
@subsubheading Kill

@table @asis
@item @code{helm-kill-ring-actions}
@vindex helm-kill-ring-actions

@strong{Standard Value}:

@lisp
(("Yank marked" . helm-kill-ring-action-yank)
 ("Delete marked" . helm-kill-ring-action-delete)
 ("Search from candidate" . helm-kill-ring-search-from-string))
@end lisp

List of actions for kill ring source.

@item @code{helm-kill-ring-max-offset}
@vindex helm-kill-ring-max-offset

@strong{Standard Value}: 400

Max number of chars displayed per candidate in kill-ring browser.
When @code{t}, don’t truncate candidate, show all.
By default it is approximatively the number of bits contained in five lines
of 80 chars each, i.e. 80*5.
Note that if you set this to nil multiline will be disabled, i.e. you
will not have separators between candidates any more.

@item @code{helm-kill-ring-separator}
@vindex helm-kill-ring-separator

@strong{Standard Value}:

The separator used to separate marked candidates when yanking.

@item @code{helm-kill-ring-threshold}
@vindex helm-kill-ring-threshold

@strong{Standard Value}: 3

Minimum length of a candidate to be listed by @code{helm-source-kill-ring}.
@end table

@node Library helm-semantic
@section Library: helm-semantic

@menu
* Commands in library @code{helm-semantic} (excludes keymaps)::
* Options in library @samp{helm-semantic}::
@end menu

@node Commands in library @code{helm-semantic} (excludes keymaps)
@subsection Commands in library @code{helm-semantic} (excludes keymaps)

@anchor{uncategorized (79)}
@subsubheading uncategorized

@table @asis
@item @code{helm-semantic}
@findex helm-semantic

(helm-semantic ARG)

Preconfigured @code{helm} for @code{semantic}.
If ARG is supplied, pre-select symbol at point instead of current.

@item @code{helm-semantic-or-imenu}
@findex helm-semantic-or-imenu

(helm-semantic-or-imenu ARG)

Preconfigured helm for @code{semantic} or @code{imenu}.
If ARG is supplied, pre-select symbol at point instead of current
semantic tag in scope.

If @code{semantic-mode} is active in the current buffer, then use
semantic for generating tags, otherwise fall back to @code{imenu}.
Fill in the symbol at point by default.
@end table

@node Options in library @samp{helm-semantic}
@subsection Options in library @samp{helm-semantic}

@anchor{Style (1)}
@subsubheading Style

@table @asis
@item @code{helm-semantic-display-style}
@vindex helm-semantic-display-style

@strong{Standard Value}:

@lisp
((python-mode . semantic-format-tag-summarize)
 (c-mode . semantic-format-tag-concise-prototype-c-mode)
 (emacs-lisp-mode . semantic-format-tag-abbreviate-emacs-lisp-mode))
@end lisp

Function to present a semantic tag according to @code{major-mode}.

It is an alist where the @code{car} of each element is a @code{major-mode} and
the @code{cdr} a @code{semantic-format-tag-*} function.

If no function is found for current @code{major-mode}, fall back to
@code{semantic-format-tag-summarize} default function.

You can have more or less informations depending of the @code{semantic-format-tag-*}
function you choose.

All the supported functions are prefixed with ``semantic-format-tag-'',
you have completion on these functions with @code{C-M i} in the customize interface.

@item @code{helm-semantic-lynx-style-map}
@vindex helm-semantic-lynx-style-map

@strong{Standard Value}: nil

Use Arrow keys to jump to occurences.
@end table

@anchor{uncategorized (80)}
@subsubheading uncategorized

@table @asis
@item @code{helm-semantic-fuzzy-match}
@vindex helm-semantic-fuzzy-match

@strong{Standard Value}: nil

Enable fuzzy matching in @code{helm-source-semantic}.
@end table

@node Library helm-shell
@section Library: helm-shell

@menu
* Commands in library @code{helm-shell} (excludes keymaps)::
@end menu

@node Commands in library @code{helm-shell} (excludes keymaps)
@subsection Commands in library @code{helm-shell} (excludes keymaps)

@anchor{uncategorized (81)}
@subsubheading uncategorized

@table @asis
@item @code{helm-shell-prompts}
@findex helm-shell-prompts

Pre-configured @code{helm} to browse the prompts of the current comint buffer.

@item @code{helm-shell-prompts-all}
@findex helm-shell-prompts-all

Pre-configured @code{helm} to browse the prompts of all comint sessions.
@end table

@node Library helm-source
@section Library: helm-source

@node Library helm-sys
@section Library: helm-sys

@menu
* Modes in library @code{helm-sys}::
* Commands in keymap @code{helm-top-map}::
* Commands in library @code{helm-sys} (excludes keymaps)::
* Options in library @samp{helm-sys}::
* Hooks in library @samp{helm-sys}::
@end menu

@node Modes in library @code{helm-sys}
@subsection Modes in library @code{helm-sys}

@anchor{minor-mode-p (20)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-top-poll-mode}
@findex helm-top-poll-mode

(helm-top-poll-mode &optional ARG)

Refresh automatically helm top buffer once enabled.

If called interactively, toggle @code{Helm-Top-Poll mode}.  If the
prefix argument is positive, enable the mode, and if it is zero
or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.
@end table

@node Commands in keymap @code{helm-top-map}
@subsection Commands in keymap @code{helm-top-map}

@anchor{uncategorized (82)}
@subsubheading uncategorized

@table @asis
@item @kbd{M-C} (@code{helm-top-run-sort-by-com})
@findex helm-top-run-sort-by-com @r{(helm-top-map)}

@kindex M-C @r{(helm-top-map)}

@item @kbd{M-P} (@code{helm-top-run-sort-by-cpu})
@findex helm-top-run-sort-by-cpu @r{(helm-top-map)}

@kindex M-P @r{(helm-top-map)}

@item @kbd{M-M} (@code{helm-top-run-sort-by-mem})
@findex helm-top-run-sort-by-mem @r{(helm-top-map)}

@kindex M-M @r{(helm-top-map)}

@item @kbd{M-U} (@code{helm-top-run-sort-by-user})
@findex helm-top-run-sort-by-user @r{(helm-top-map)}

@kindex M-U @r{(helm-top-map)}
@end table

@node Commands in library @code{helm-sys} (excludes keymaps)
@subsection Commands in library @code{helm-sys} (excludes keymaps)

@anchor{minor-mode-p (21)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-top-poll-mode}
@findex helm-top-poll-mode

(helm-top-poll-mode &optional ARG)

Refresh automatically helm top buffer once enabled.

If called interactively, toggle @code{Helm-Top-Poll mode}.  If the
prefix argument is positive, enable the mode, and if it is zero
or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.
@end table

@anchor{uncategorized (83)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x c p} (@code{helm-list-emacs-process})
@findex helm-list-emacs-process

@kindex C-x c p

Preconfigured @code{helm} for Emacs process.

@item @kbd{C-x c t} (@code{helm-top})
@findex helm-top

@kindex C-x c t

Preconfigured @code{helm} for top command.

@item @code{helm-xrandr-set}
@findex helm-xrandr-set

Preconfigured helm for xrandr.
@end table

@node Options in library @samp{helm-sys}
@subsection Options in library @samp{helm-sys}

@anchor{Command (1)}
@subsubheading Command

@table @asis
@item @code{helm-top-command}
@vindex helm-top-command

@strong{Standard Value}: env COLUMNS=%s top -b -n 1

Top command used to display output of top.
A format string where %s will be replaced with @code{frame-width}.

To use ’top’ command, a version supporting batch mode (-b option)
is needed. On Mac OSX ’top’ command doesn’t support this, so the
’ps’ command is used instead by default.

Normally ’top’ command output have 12 columns, but in some
versions you may have less than this, so you can either customize
top to use 12 columns with the interactives ’f’ and ’W’ commands
of top, or modify @code{helm-top-sort-columns-alist} to fit with the
number of columns your ’top’ command is using.

If you modify ’ps’ command be sure that ’pid’ comes in first and
``env COLUMNS=%s'' is specified at beginning of command. Ensure
also that no elements contain spaces (e.g., use start_time and
not start). Same as for ’top’: you can customize
@code{helm-top-sort-columns-alist} to make sort commands working
properly according to your settings.
@end table

@anchor{Poll}
@subsubheading Poll

@table @asis
@item @code{helm-top-poll-delay}
@vindex helm-top-poll-delay

@strong{Standard Value}: 1.5

Helm top poll after this delay when @code{helm-top-poll-mode} is enabled.
The minimal delay allowed is 1.5, if less than this helm-top will use 1.5.

@item @code{helm-top-poll-delay-post-command}
@vindex helm-top-poll-delay-post-command

@strong{Standard Value}: 1.0

Helm top stop polling during this delay.
This delay is added to @code{helm-top-poll-delay} after Emacs stops
being idle.

@item @code{helm-top-poll-mode-hook}
@vindex helm-top-poll-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm-top-poll-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)

@item @code{helm-top-poll-preselection}
@vindex helm-top-poll-preselection

@strong{Standard Value}: linum

Stay on same line or follow candidate when @code{helm-top-poll} updates display.
Possible values are ’candidate or ’linum.
This affects also sorting functions in the same way.
@end table

@anchor{minor-mode-p (22)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-top-poll-mode}
@vindex helm-top-poll-mode

@strong{Standard Value}: nil

(helm-top-poll-mode &optional ARG)

Refresh automatically helm top buffer once enabled.

If called interactively, toggle @code{Helm-Top-Poll mode}.  If the
prefix argument is positive, enable the mode, and if it is zero
or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.
@end table

@anchor{uncategorized (84)}
@subsubheading uncategorized

@table @asis
@item @code{helm-top-sort-columns-alist}
@vindex helm-top-sort-columns-alist

@strong{Standard Value}:

@lisp
((com . 11)
 (mem . 9)
 (cpu . 8)
 (user . 1))
@end lisp

Allow defining which column to use when sorting output of top/ps command.
Only com, mem, cpu and user are sorted, so no need to put something else there,
it will have no effect.
Note that column numbers are counted from zero, i.e. column 1 is the nth 0 column.
@end table

@node Hooks in library @samp{helm-sys}
@subsection Hooks in library @samp{helm-sys}

@anchor{Poll (1)}
@subsubheading Poll

@table @asis
@item @code{helm-top-initialize-poll-hooks}
@vindex helm-top-initialize-poll-hooks

@strong{Standard Value}:

@item @code{helm-top-poll-mode-hook}
@vindex helm-top-poll-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm-top-poll-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)
@end table

@anchor{uncategorized (85)}
@subsubheading uncategorized

@table @asis
@item @code{helm-top-after-init-hook}
@vindex helm-top-after-init-hook

@strong{Standard Value}: nil

Local hook for helm-top.
@end table

@node Library helm-tags
@section Library: helm-tags

@menu
* Commands in keymap @code{helm-etags-map}::
* Commands in library @code{helm-tags} (excludes keymaps)::
* Options in library @samp{helm-tags}::
@end menu

@node Commands in keymap @code{helm-etags-map}
@subsection Commands in keymap @code{helm-etags-map}

@anchor{uncategorized (86)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-c C-o} (@code{helm-etags-run-switch-other-frame})
@findex helm-etags-run-switch-other-frame @r{(helm-etags-map)}

@kindex C-c C-o @r{(helm-etags-map)}

Run switch to other frame action from @code{helm-source-etags-select}.

@item @kbd{C-c o} (@code{helm-etags-run-switch-other-window})
@findex helm-etags-run-switch-other-window @r{(helm-etags-map)}

@kindex C-c o @r{(helm-etags-map)}

Run switch to other window action from @code{helm-source-etags-select}.

@item @kbd{M-<down>} (@code{helm-goto-next-file})
@findex helm-goto-next-file @r{(helm-etags-map)}

@kindex M-<down> @r{(helm-etags-map)}

Go to previous file in Helm grep/etags buffers.

@item @kbd{M-<up>} (@code{helm-goto-precedent-file})
@findex helm-goto-precedent-file @r{(helm-etags-map)}

@kindex M-<up> @r{(helm-etags-map)}

Go to previous file in Helm grep/etags buffers.
@end table

@node Commands in library @code{helm-tags} (excludes keymaps)
@subsection Commands in library @code{helm-tags} (excludes keymaps)

@anchor{uncategorized (87)}
@subsubheading uncategorized

@table @asis
@item @kbd{C-x c e} (@code{helm-etags-select})
@findex helm-etags-select

@kindex C-x c e

(helm-etags-select REINIT)

Preconfigured helm for etags.
If called with a prefix argument REINIT
or if any of the tag files have been modified, reinitialize cache.

This function aggregates three sources of tag files:

@enumerate
@item
An automatically located file in the parent directories,
by @code{helm-etags-get-tag-file}.
@item
@code{tags-file-name}, which is commonly set by @code{find-tag} command.
@item
@code{tags-table-list} which is commonly set by @code{visit-tags-table} command.
@end enumerate
@end table

@node Options in library @samp{helm-tags}
@subsection Options in library @samp{helm-tags}

@anchor{File (1)}
@subsubheading File

@table @asis
@item @code{helm-etags-tag-file-name}
@vindex helm-etags-tag-file-name

@strong{Standard Value}: TAGS

Etags tag file name.

@item @code{helm-etags-tag-file-search-limit}
@vindex helm-etags-tag-file-search-limit

@strong{Standard Value}: 10

The limit level of directory to search tag file.
Don’t search tag file deeply if outside this value.
@end table

@anchor{Match}
@subsubheading Match

@table @asis
@item @code{helm-etags-fuzzy-match}
@vindex helm-etags-fuzzy-match

@strong{Standard Value}: nil

Use fuzzy matching in @code{helm-etags-select}.

@item @code{helm-etags-match-part-only}
@vindex helm-etags-match-part-only

@strong{Standard Value}: tag

Allow choosing the tag part of CANDIDATE in @code{helm-source-etags-select}.
A tag looks like this:
    filename: (defun foo
You can choose matching against the tag part (i.e ``(defun foo''),
or against the whole candidate (i.e ``(filename:5:(defun foo'').
@end table

@anchor{uncategorized (88)}
@subsubheading uncategorized

@table @asis
@item @code{helm-etags-execute-action-at-once-if-one}
@vindex helm-etags-execute-action-at-once-if-one

@strong{Standard Value}: t

Whether to jump straight to the selected tag if there’s only
one match.
@end table

@node Library helm-types
@section Library: helm-types

@menu
* Commands in keymap @code{helm-generic-files-map}::
* Options in library @samp{helm-types}::
@end menu

@node Commands in keymap @code{helm-generic-files-map}
@subsection Commands in keymap @code{helm-generic-files-map}

@anchor{uncategorized Run Files}
@subsubheading uncategorized Run Files

@table @asis
@item @kbd{C-c C-a} (@code{helm-ff-run-mail-attach-files})
@findex helm-ff-run-mail-attach-files @r{(helm-generic-files-map)}

@kindex C-c C-a @r{(helm-generic-files-map)}

Run mail attach files command action from @code{helm-source-find-files}.

@item @kbd{C-x C-q} (@code{helm-ff-run-marked-files-in-dired})
@findex helm-ff-run-marked-files-in-dired @r{(helm-generic-files-map)}

@kindex C-x C-q @r{(helm-generic-files-map)}

Execute @code{helm-marked-files-in-dired} interactively.
@end table

@anchor{uncategorized Run Switch}
@subsubheading uncategorized Run Switch

@table @asis
@item @kbd{C-c C-o} (@code{helm-ff-run-switch-other-frame})
@findex helm-ff-run-switch-other-frame @r{(helm-generic-files-map)}

@kindex C-c C-o @r{(helm-generic-files-map)}

Run switch to other frame action from @code{helm-source-find-files}.

@item @kbd{C-c o} (@code{helm-ff-run-switch-other-window})
@findex helm-ff-run-switch-other-window @r{(helm-generic-files-map)}

@kindex C-c o @r{(helm-generic-files-map)}

Run switch to other window action from @code{helm-source-find-files}.
When a prefix arg is provided, split is done vertically.
@end table

@anchor{uncategorized Run File Open}
@subsubheading uncategorized Run File Open

@table @asis
@item @kbd{C-c C-x} (@code{helm-ff-run-open-file-externally})
@findex helm-ff-run-open-file-externally @r{(helm-generic-files-map)}

@kindex C-c C-x @r{(helm-generic-files-map)}

Run open file externally command action from @code{helm-source-find-files}.

@item @kbd{C-c X} (@code{helm-ff-run-open-file-with-default-tool})
@findex helm-ff-run-open-file-with-default-tool @r{(helm-generic-files-map)}

@kindex C-c X @r{(helm-generic-files-map)}

Run open file externally command action from @code{helm-source-find-files}.
@end table

@anchor{uncategorized Run File Ediff}
@subsubheading uncategorized Run File Ediff

@table @asis
@item @kbd{C-=} (@code{helm-ff-run-ediff-file})
@findex helm-ff-run-ediff-file @r{(helm-generic-files-map)}

@kindex C-= @r{(helm-generic-files-map)}

Run Ediff file action from @code{helm-source-find-files}.

@item @kbd{C-c =} (@code{helm-ff-run-ediff-merge-file})
@findex helm-ff-run-ediff-merge-file @r{(helm-generic-files-map)}

@kindex C-c = @r{(helm-generic-files-map)}

Run Ediff merge file action from @code{helm-source-find-files}.
@end table

@anchor{uncategorized Run File uncategorized}
@subsubheading uncategorized Run File uncategorized

@table @asis
@item @kbd{M-B} (@code{helm-ff-run-byte-compile-file})
@findex helm-ff-run-byte-compile-file @r{(helm-generic-files-map)}

@kindex M-B @r{(helm-generic-files-map)}

Run Byte compile file action from @code{helm-source-find-files}.

@item @kbd{M-C} (@code{helm-ff-run-copy-file})
@findex helm-ff-run-copy-file @r{(helm-generic-files-map)}

@kindex M-C @r{(helm-generic-files-map)}

Run Copy file action from @code{helm-source-find-files}.

@item @kbd{M-D} (@code{helm-ff-run-delete-file})
@findex helm-ff-run-delete-file @r{(helm-generic-files-map)}

@kindex M-D @r{(helm-generic-files-map)}

Run Delete file action from @code{helm-source-find-files}.

@item @kbd{C-c r} (@code{helm-ff-run-find-file-as-root})
@findex helm-ff-run-find-file-as-root @r{(helm-generic-files-map)}

@kindex C-c r @r{(helm-generic-files-map)}

@item @kbd{M-H} (@code{helm-ff-run-hardlink-file})
@findex helm-ff-run-hardlink-file @r{(helm-generic-files-map)}

@kindex M-H @r{(helm-generic-files-map)}

Run Hardlink file action from @code{helm-source-find-files}.

@item @kbd{M-L} (@code{helm-ff-run-load-file})
@findex helm-ff-run-load-file @r{(helm-generic-files-map)}

@kindex M-L @r{(helm-generic-files-map)}

Run Load file action from @code{helm-source-find-files}.

@item @kbd{M-R} (@code{helm-ff-run-rename-file})
@findex helm-ff-run-rename-file @r{(helm-generic-files-map)}

@kindex M-R @r{(helm-generic-files-map)}

Run Rename file action from @code{helm-source-find-files}.

@item @kbd{M-S} (@code{helm-ff-run-symlink-file})
@findex helm-ff-run-symlink-file @r{(helm-generic-files-map)}

@kindex M-S @r{(helm-generic-files-map)}

Run Symlink file action from @code{helm-source-find-files}.
@end table

@anchor{uncategorized Run uncategorized}
@subsubheading uncategorized Run uncategorized

@table @asis
@item @kbd{C-s}

@item @kbd{M-g s} (@code{helm-ff-run-grep})
@findex helm-ff-run-grep @r{(helm-generic-files-map)}

@kindex C-s @r{(helm-generic-files-map)}
@kindex M-g s @r{(helm-generic-files-map)}

Run Grep action from @code{helm-source-find-files}.

@item @kbd{C-c @@} (@code{helm-ff-run-insert-org-link})
@findex helm-ff-run-insert-org-link @r{(helm-generic-files-map)}

@kindex C-c @ @r{(helm-generic-files-map)}

@item @kbd{M-g p} (@code{helm-ff-run-pdfgrep})
@findex helm-ff-run-pdfgrep @r{(helm-generic-files-map)}

@kindex M-g p @r{(helm-generic-files-map)}

Run Pdfgrep action from @code{helm-source-find-files}.

@item @kbd{C-]} (@code{helm-ff-run-toggle-basename})
@findex helm-ff-run-toggle-basename @r{(helm-generic-files-map)}

@kindex C-] @r{(helm-generic-files-map)}

@item @kbd{M-g z} (@code{helm-ff-run-zgrep})
@findex helm-ff-run-zgrep @r{(helm-generic-files-map)}

@kindex M-g z @r{(helm-generic-files-map)}

Run Grep action from @code{helm-source-find-files}.
@end table

@anchor{uncategorized uncategorized (1)}
@subsubheading uncategorized uncategorized

@table @asis
@item @kbd{M-i} (@code{helm-ff-properties-persistent})
@findex helm-ff-properties-persistent @r{(helm-generic-files-map)}

@kindex M-i @r{(helm-generic-files-map)}

Show properties without quitting helm.
@end table

@node Options in library @samp{helm-types}
@subsection Options in library @samp{helm-types}

@anchor{uncategorized (89)}
@subsubheading uncategorized

@table @asis
@item @code{helm-type-bookmark-actions}
@vindex helm-type-bookmark-actions

@strong{Standard Value}:

@lisp
(("Jump to bookmark" . helm-bookmark-jump)
 ("Jump to BM other window" . helm-bookmark-jump-other-window)
 ("Jump to BM other frame" . helm-bookmark-jump-other-frame)
 ("Bookmark edit annotation" . bookmark-edit-annotation)
 ("Bookmark show annotation" . bookmark-show-annotation)
 ("Delete bookmark(s)" . helm-delete-marked-bookmarks)
 ("Edit Bookmark" . helm-bookmark-edit-bookmark)
 ("Rename bookmark" . helm-bookmark-rename)
 ("Relocate bookmark" . bookmark-relocate))
@end lisp

Default actions for type bookmarks.

@item @code{helm-type-buffer-actions}
@vindex helm-type-buffer-actions

@strong{Standard Value}:

@lisp
(("Switch to buffer(s)" . helm-buffer-switch-buffers)
 ("Switch to buffer(s) other window ~C-c o~" . helm-buffer-switch-buffers-other-window)
 ("Switch to buffer other frame ~C-c C-o~" . switch-to-buffer-other-frame)
 ("Switch to buffer other tab ~C-c C-t~" . helm-buffers-switch-to-buffer-other-tab)
 ("Switch to buffer at line number" . helm-switch-to-buffer-at-linum)
 ("Browse project ~C-x C-d~" . helm-buffers-browse-project)
 ("Query replace regexp ~C-M-%~" . helm-buffer-query-replace-regexp)
 ("Query replace ~M-%~" . helm-buffer-query-replace)
 ("View buffer" . view-buffer)
 ("Display buffer" . display-buffer)
 ("Rename buffer ~M-R~" . helm-buffers-rename-buffer)
 ("Grep buffer(s) ~M-g s~ (C-u grep all buffers)" . helm-zgrep-buffers)
 ("Multi occur buffer(s) ~C-s (C-u search also in current)~" . helm-multi-occur-as-action)
 ("Revert buffer(s) ~M-G~" . helm-revert-marked-buffers)
 ("Insert buffer" . insert-buffer)
 ("Kill buffer(s) ~M-D~" . helm-kill-marked-buffers)
 ("Diff with file ~C-=~" . diff-buffer-with-file)
 ("Ediff Marked buffers ~C-c =~" . helm-ediff-marked-buffers)
 ("Ediff Merge marked buffers ~M-=~" .
  #[257 "\300\301\"\207"
        [helm-ediff-marked-buffers t]
        4 "\n\n(fn CANDIDATE)"]))
@end lisp

Default actions for type buffers.

@item @code{helm-type-command-actions}
@vindex helm-type-command-actions

@strong{Standard Value}:

@lisp
(("Execute command" . helm-M-x-execute-command)
 ("Describe function" . helm-describe-function)
 ("Find function" . xref-find-definitions)
 ("Info lookup" . helm-info-lookup-symbol)
 ("Debug on entry" . debug-on-entry)
 ("Cancel debug on entry" . cancel-debug-on-entry)
 ("Trace function" . trace-function)
 ("Trace function (background)" . trace-function-background)
 ("Untrace function" . untrace-function))
@end lisp

Default actions for type command.

@item @code{helm-type-file-actions}
@vindex helm-type-file-actions

@strong{Standard Value}:

@lisp
(("Find file" . helm-find-file-or-marked)
 ("Find file as root" . helm-find-file-as-root)
 ("Find file other window" . helm-find-files-other-window)
 ("Find file other frame" . find-file-other-frame)
 ("Open dired in file's directory" . helm-open-dired)
 ("Attach file(s) to mail buffer ~C-c C-a~" . helm-ff-mail-attach-files)
 ("Marked files in dired" . helm-marked-files-in-dired)
 ("Grep File(s) ~C-u recurse~" . helm-find-files-grep)
 ("Zgrep File(s) ~C-u Recurse~" . helm-ff-zgrep)
 ("Pdfgrep File(s)" . helm-ff-pdfgrep)
 ("Insert as org link" . helm-files-insert-as-org-link)
 ("Checksum File" . helm-ff-checksum)
 ("Ediff File" . helm-find-files-ediff-files)
 ("Ediff Merge File" . helm-find-files-ediff-merge-files)
 ("View file" . view-file)
 ("Insert file" . insert-file)
 ("Add marked files to file-cache" . helm-ff-cache-add-file)
 ("Delete file(s)" . helm-ff-delete-files)
 ("Copy file(s) ~M-C, C-u to follow~" . helm-find-files-copy)
 ("Rename file(s) ~M-R, C-u to follow~" . helm-find-files-rename)
 ("Symlink files(s) ~M-S, C-u to follow~" . helm-find-files-symlink)
 ("Relsymlink file(s) ~C-u to follow~" . helm-find-files-relsymlink)
 ("Hardlink file(s) ~M-H, C-u to follow~" . helm-find-files-hardlink)
 ("Open file externally (C-u to choose)" . helm-open-file-externally)
 ("Open file with default tool" . helm-open-file-with-default-tool)
 ("Find file in hex dump" . hexl-find-file))
@end lisp

Default actions for type files.

@item @code{helm-type-function-actions}
@vindex helm-type-function-actions

@strong{Standard Value}:

@lisp
(("Describe function" . helm-describe-function)
 ("Find function" . xref-find-definitions)
 ("Info lookup" . helm-info-lookup-symbol)
 ("Debug on entry" . debug-on-entry)
 ("Cancel debug on entry" . cancel-debug-on-entry)
 ("Trace function" . trace-function)
 ("Trace function (background)" . trace-function-background)
 ("Untrace function" . untrace-function))
@end lisp

Default actions for type functions.

@item @code{helm-type-timers-actions}
@vindex helm-type-timers-actions

@strong{Standard Value}:

@lisp
(("Cancel Timer" lambda
  (_timer)
  (let
      ((mkd
        (helm-marked-candidates)))
    (cl-loop for timer in mkd do
             (cancel-timer timer))))
 ("Describe Function" lambda
  (tm)
  (describe-function
   (timer--function tm)))
 ("Find Function" lambda
  (tm)
  (helm-aif
      (timer--function tm)
      (if
          (or
           (byte-code-function-p it)
           (helm-subr-native-elisp-p it))
          (message "Can't find anonymous function ~%s~" it)
        (find-function it)))))
@end lisp

Default actions for type timers.
@end table

@node Library helm-utils
@section Library: helm-utils

@menu
* Modes in library @code{helm-utils}::
* Commands in library @code{helm-utils} (excludes keymaps)::
* Options in library @samp{helm-utils}::
* Hooks in library @samp{helm-utils}::
@end menu

@node Modes in library @code{helm-utils}
@subsection Modes in library @code{helm-utils}

@anchor{minor-mode-p (23)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-popup-tip-mode}
@findex helm-popup-tip-mode

(helm-popup-tip-mode &optional ARG)

Show help-echo informations in a popup tip at end of line.

If called interactively, toggle @code{Helm-Popup-Tip mode}.  If the
prefix argument is positive, enable the mode, and if it is zero
or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.
@end table

@node Commands in library @code{helm-utils} (excludes keymaps)
@subsection Commands in library @code{helm-utils} (excludes keymaps)

@anchor{All (1)}
@subsubheading All

@table @asis
@item @code{helm-display-all-sources}
@findex helm-display-all-sources

Display all sources previously hidden by @code{helm-set-source-filter}.

@item @code{helm-show-all-candidates-in-source}
@findex helm-show-all-candidates-in-source

(helm-show-all-candidates-in-source ARG)

Toggle all or only candidate-number-limit cands in current source.
With a numeric prefix arg show only the ARG number of candidates.
The prefix arg has no effect when toggling to only
candidate-number-limit.
@end table

@anchor{minor-mode-p (24)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-popup-tip-mode}
@findex helm-popup-tip-mode

(helm-popup-tip-mode &optional ARG)

Show help-echo informations in a popup tip at end of line.

If called interactively, toggle @code{Helm-Popup-Tip mode}.  If the
prefix argument is positive, enable the mode, and if it is zero
or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.
@end table

@anchor{uncategorized (90)}
@subsubheading uncategorized

@table @asis
@item @code{helm-quit-and-find-file}
@findex helm-quit-and-find-file

Drop into @code{helm-find-files} from @code{helm}.
If current selection is a buffer or a file, @code{helm-find-files}
from its directory.
@end table

@node Options in library @samp{helm-utils}
@subsection Options in library @samp{helm-utils}

@anchor{Window}
@subsubheading Window

@table @asis
@item @code{helm-window-prefer-horizontal-split}
@vindex helm-window-prefer-horizontal-split

@strong{Standard Value}: nil

Maybe switch to other window vertically when non nil.

Possible values are t, nil and @code{decide}.

When t switch vertically.
When nil switch horizontally.
When @code{decide} try to guess if it is possible to switch vertically
according to the setting of @code{split-width-threshold} and the size of
the window from where splitting is done.

Note that when using @code{decide} and @code{split-width-threshold} is nil, the
behavior is the same as with a nil value.
@end table

@anchor{Resize}
@subsubheading Resize

@table @asis
@item @code{helm-resize-on-pa-text-height}
@vindex helm-resize-on-pa-text-height

@strong{Standard Value}: 12

The size of the helm-window when resizing on persistent action.
@end table

@anchor{Buffers}
@subsubheading Buffers

@table @asis
@item @code{helm-buffers-to-resize-on-pa}
@vindex helm-buffers-to-resize-on-pa

@strong{Standard Value}: nil

A list of helm buffers where the helm-window should be reduced on persistent actions.
@end table

@anchor{Function (3)}
@subsubheading Function

@table @asis
@item @code{helm-html-decode-entities-function}
@vindex helm-html-decode-entities-function

@strong{Standard Value}: helm-html-decode-entities-string

Function used to decode HTML entities in HTML bookmarks.
Helm comes by default with @code{helm-html-decode-entities-string}, if you need something
more sophisticated you can use @code{w3m-decode-entities-string} if available.

In Emacs itself org-entities seem broken and @code{xml-substitute-numeric-entities}
supports only numeric entities.

@item @code{helm-window-show-buffers-function}
@vindex helm-window-show-buffers-function

@strong{Standard Value}: helm-window-default-split-fn

The default function to use when opening several buffers at once.
It is typically used to rearrange windows.
@end table

@anchor{Highlight}
@subsubheading Highlight

@table @asis
@item @code{helm-highlight-matches-around-point-max-lines}
@vindex helm-highlight-matches-around-point-max-lines

@strong{Standard Value}:

@lisp
(15 . 15)
@end lisp

Number of lines around point where matched items are highlighted.

Possible value are:
@itemize
@item
A cons cell (x . y)
Match x lines before point and y lines after point.
@item
An integer
Positive means this number lines after point.
Negative means this number lines before point.
A zero value means highlight only inside matched lines.
@item
The symbol never
Means do not highlight matched items.
@end itemize

@item @code{helm-highlight-number-lines-around-point}
@vindex helm-highlight-number-lines-around-point

@strong{Standard Value}:

@lisp
(15 . 15)
@end lisp

Number of lines around point where matched items are highlighted.

Possible value are:
@itemize
@item
A cons cell (x . y)
Match x lines before point and y lines after point.
@item
An integer
Positive means this number lines after point.
Negative means this number lines before point.
A zero value means highlight only inside matched lines.
@item
The symbol never
Means do not highlight matched items.
@end itemize
@end table

@anchor{Popup}
@subsubheading Popup

@table @asis
@item @code{helm-popup-tip-mode-hook}
@vindex helm-popup-tip-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm-popup-tip-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)

@item @code{helm-sources-using-help-echo-popup}
@vindex helm-sources-using-help-echo-popup

@strong{Standard Value}:

@lisp
("Ack-Grep" "AG" "RG" "Gid" "Git-Grep")
@end lisp

Show the buffer name or the filename in a popup at selection.
@end table

@anchor{minor-mode-p (25)}
@subsubheading minor-mode-p

@table @asis
@item @code{helm-popup-tip-mode}
@vindex helm-popup-tip-mode

@strong{Standard Value}: nil

(helm-popup-tip-mode &optional ARG)

Show help-echo informations in a popup tip at end of line.

If called interactively, toggle @code{Helm-Popup-Tip mode}.  If the
prefix argument is positive, enable the mode, and if it is zero
or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is @code{toggle}.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

The mode's hook is called both when the mode is enabled and when
it is disabled.
@end table

@anchor{uncategorized (91)}
@subsubheading uncategorized

@table @asis
@item @code{helm-default-kbsize}
@vindex helm-default-kbsize

@strong{Standard Value}: 1024.0

Default Kbsize to use for showing files size.
It is a float, usually 1024.0 but could be 1000.0 on some systems.

@item @code{helm-su-or-sudo}
@vindex helm-su-or-sudo

@strong{Standard Value}: sudo

What command to use for root access.
@end table

@node Hooks in library @samp{helm-utils}
@subsection Hooks in library @samp{helm-utils}

@anchor{uncategorized (92)}
@subsubheading uncategorized

@table @asis
@item @code{helm-find-many-files-after-hook}
@vindex helm-find-many-files-after-hook

@strong{Standard Value}: nil

Hook that runs at end of @code{helm-find-many-files}.

@item @code{helm-goto-line-before-hook}
@vindex helm-goto-line-before-hook

@strong{Standard Value}:

@lisp
(helm-save-current-pos-to-mark-ring)
@end lisp

Run before jumping to line.
This hook runs when jumping from @code{helm-goto-line}, @code{helm-etags-default-action},
and @code{helm-imenu-default-action}.
This allows you to retrieve a previous position after using the different helm
tools for searching (etags, grep, gid, (m)occur etc@dots{}).
By default positions are added to @code{mark-ring}.
You can also add to register by using (or adding)
@code{helm-save-pos-to-register-before-jump} instead. In this case
last position is added to the register @code{helm-save-pos-before-jump-register}.

@item @code{helm-persistent-autoresize-hook}
@vindex helm-persistent-autoresize-hook

@strong{Standard Value}:

@item @code{helm-popup-tip-mode-hook}
@vindex helm-popup-tip-mode-hook

@strong{Standard Value}: nil

Hook run after entering or leaving @code{helm-popup-tip-mode}.
No problems result if this variable is not bound.
@code{add-hook} automatically binds it.  (This is true for all hook variables.)
@end table

@node Library helm-x-files
@section Library: helm-x-files

@menu
* Options in library @samp{helm-x-files}::
@end menu

@node Options in library @samp{helm-x-files}
@subsection Options in library @samp{helm-x-files}

@anchor{uncategorized (93)}
@subsubheading uncategorized

@table @asis
@item @code{helm-session-fuzzy-match}
@vindex helm-session-fuzzy-match

@strong{Standard Value}: nil

Enable fuzzy matching in @code{helm-source-session} when non--nil.
@end table

@node Main Index
@chapter Main Index

@printindex cp

@node Key Index
@chapter Key Index

@printindex ky

@node Command and Function Index
@chapter Command and Function Index

@printindex fn

@node Variable Index
@chapter Variable Index

This is not a complete index of variables and faces, only the ones
that are mentioned in the manual.  For a more complete list, use
@kbd{M-x org-customize} and then click yourself through the tree.

@printindex vr

@bye