This is helm-devel.info, produced by makeinfo version 6.7 from
helm-devel.texi.

INFO-DIR-SECTION Emacs Add-ons
START-INFO-DIR-ENTRY
* Helm Developer’s Guide: (helm-devel). Helm Developer’s Guide.
END-INFO-DIR-ENTRY


File: helm-devel.info,  Node: Top,  Next: Introduction,  Up: (dir)

The Helm Developer’s Guide
**************************

* Menu:

* Introduction::
* Creating a Helm buffer::
* Helm attributes::
* Customizing Action Lists::
* Creating a Source::
* Creating a Class::
* Writing actions::
* Writing persistent actions::

— The Detailed Node Listing —

Helm attributes

* Looking up Helm attributes::
* Mandatory attributes::
* Optional, but important attributes: Optional but important attributes.
* helm keywords::

‘helm’ keywords

* sources::
* buffer::
* input::

Creating a Source

* helm-source-sync::
* helm-source-in-buffer::
* helm-source-async::
* helm-source-dummy::
* helm-source-in-file::
* Help::
* Pre-filtering lines in a buffer::

Creating a Class

* Create your own class inheriting from one of the main classes::
* Create your own class and Inherit from one of helm-type classes::
* Create your source from your own class::
* Write your own helm-type class::

Create your own class and Inherit from one of helm-type classes

* Creating a new class using as parent a class inheriting itself from a helm-type-* class::



File: helm-devel.info,  Node: Introduction,  Next: Creating a Helm buffer,  Prev: Top,  Up: Top

1 Introduction
**************

The best way to learn how to create a custom Helm command is to read the
source code(1) and look at examples.

   A good place to start is the source file ‘helm-info.el’(2).  This
source file is fairly short and straightforward.

   That being said, we’ll try to go over some basic ideas in this
manual.

   ---------- Footnotes ----------

   (1) <http://blog.codinghorror.com/learn-to-read-the-source-luke/>

   (2) <https://github.com/emacs-helm/helm/blob/master/helm-info.el>


File: helm-devel.info,  Node: Creating a Helm buffer,  Next: Helm attributes,  Prev: Introduction,  Up: Top

2 Creating a Helm buffer
************************

The ‘helm’ function creates a Helm buffer with candidates to select
and/or take action on.  The list of candidates is provided by one or
more *sources*.

   An example usage of ‘helm’ is below:

     (defun my-first-helm-command ()
       (interactive)
       (helm :sources 'my-source
             :buffer "*helm my command*"))

   ‘helm’ must be called with several keywords arguments, called
*attributes*.


File: helm-devel.info,  Node: Helm attributes,  Next: Customizing Action Lists,  Prev: Creating a Helm buffer,  Up: Top

3 Helm attributes
*****************

An *attribute* determines Helm behavior.

   There are a large number of attributes in Helm; some are mandatory,
while others are optional.

   NOTE: When creating sources you are using slots which are keywords
describing how to build attributes, they have generally the same name as
attributes but not always e.g the slot ‘:data’ exists, but there is no
such attribute.

* Menu:

* Looking up Helm attributes::
* Mandatory attributes::
* Optional, but important attributes: Optional but important attributes.
* helm keywords::


File: helm-devel.info,  Node: Looking up Helm attributes,  Next: Mandatory attributes,  Up: Helm attributes

3.1 Looking up Helm attributes
==============================

To learn about _a single_ Helm attribute, use the documentation of the
class you are using where all slots are documented.


File: helm-devel.info,  Node: Mandatory attributes,  Next: Optional but important attributes,  Prev: Looking up Helm attributes,  Up: Helm attributes

3.2 Mandatory attributes
========================

You have to give at least a name to your source and a list of
candidates.  The list of candidates is given with a variable containing
candidates, a function returning candidates or a list, the attribute
depend on which class you are using, e.g candidates for sync sources,
for in-buffer sources you have to build a buffer using
‘helm-init-candidates-in-buffer’ or for conveniency you can use the
‘:data’ slot which will build the candidate buffer for you.  In async
sources the candidates-process attribute is used which is a function
with no arg that returns a process.


File: helm-devel.info,  Node: Optional but important attributes,  Next: helm keywords,  Prev: Mandatory attributes,  Up: Helm attributes

3.3 Optional, but important attributes
======================================


File: helm-devel.info,  Node: helm keywords,  Prev: Optional but important attributes,  Up: Helm attributes

3.4 ‘helm’ keywords
===================

* Menu:

* sources::
* buffer::
* input::


File: helm-devel.info,  Node: sources,  Next: buffer,  Up: helm keywords

3.4.1 ‘:sources’
----------------

Expects a source of the form:

   • Single source (alist)

   • Symbol naming the source

   • List of sources (alist or symbol)

   Where alists are the resulting value of functions building sources,
that is all the ‘helm-build-*’ function or the ‘helm-make-source’
function, don’t use directly alists when writing sources.  See examples
in next section.


File: helm-devel.info,  Node: buffer,  Next: input,  Prev: sources,  Up: helm keywords

3.4.2 ‘:buffer’
---------------

*Optional but important*.

   The value for the ‘:buffer’ keyword helps the ‘helm-resume’ command
retrieve the Helm session.

   The name of the buffer should be prefixed with ‘helm’ (e.g.  ‘*helm
Info*’).  This is not mandatory, but it is good practice.  It will,
among other things, allow Helm to automatically hide the buffer.


File: helm-devel.info,  Node: input,  Prev: buffer,  Up: helm keywords

3.4.3 ‘:input’
--------------

The value for the ‘:input’ keyword is used to pre-fill the input of the
helm window.

   E.g.  if the user is using helm to autocomplete and runs the
autocomplete command, you could get the word at point and set ‘:input’
to that word.  That word will then be pre-filled in the minibuffer.

     (defun my-autocomplete-command ()
       (interactive)
       (helm :sources 'my-source
             :input (word-at-point)
             :buffer "*helm my autocomplete command*"))


File: helm-devel.info,  Node: Customizing Action Lists,  Next: Creating a Source,  Prev: Helm attributes,  Up: Top

4 Customizing Action Lists
**************************

It’s possible to change the default list of actions for various existing
Helm commands.  The actions are typically held in variables called
‘helm-type-foo-actions’, for instance ‘helm-type-file-actions’, so
search apropos for those.  Each action in the list is the usual cons of
action label and action function.

   Another higher-level approach is to use a pre-defined function such
as ‘helm-add-action-to-source’ or ‘helm-add-action-to-source-if’.  These
functions accept an action label, action function, the source to modify
(as a class symbol name, such as ’helm-source-ffiles), and for the
latter, a predicate which determines if the action should be made
available for the candidate under point.

   Also see ‘helm-delete-action-from-source’, and
‘helm-source-add-action-to-source-if’.


File: helm-devel.info,  Node: Creating a Source,  Next: Creating a Class,  Prev: Customizing Action Lists,  Up: Top

5 Creating a Source
*******************

Even if you can still create source with alists, helm provides
convenient basic classes to build sources, and allow you to create your
own classes that inherit from these basics classes.

   Here are the basic classes for creating a Helm source:

‘helm-source-sync’
     Put candidates in a list

‘helm-source-in-buffer’
     Put candidates in a buffer

‘helm-source-async’
     Get candidates asynchronously using the output of a process.

‘helm-source-dummy’
     Use ‘helm-pattern’ as candidate.

‘helm-source-in-file’
     Get candidates from the lines of a named file using
     ‘helm-source-in-buffer’.

   For consistency, prefix your source names with ‘helm-source-’ (e.g.
‘helm-source-info-emacs’).

   For convenience, ‘helm’ provide macros prefixed by ‘helm-build-’ to
build your sources quickly, see examples below.

   All the different slots are documented in docstring of each classes.

* Menu:

* helm-source-sync::
* helm-source-in-buffer::
* helm-source-async::
* helm-source-dummy::
* helm-source-in-file::
* Help::
* Pre-filtering lines in a buffer::


File: helm-devel.info,  Node: helm-source-sync,  Next: helm-source-in-buffer,  Up: Creating a Source

5.1 ‘helm-source-sync’
======================

Put candidates in a list

     (helm-build-sync-source "test"
       :candidates '(a b c d e))

     (helm :sources (helm-build-sync-source "test"
                      :candidates '(a b c d e))
           :buffer "*helm sync source*")


File: helm-devel.info,  Node: helm-source-in-buffer,  Next: helm-source-async,  Prev: helm-source-sync,  Up: Creating a Source

5.2 ‘helm-source-in-buffer’
===========================

Put candidates in a buffer

     (helm-build-in-buffer-source "test1"
       :data '(a b c d e))

     (helm :sources (helm-build-in-buffer-source "test1"
                      :data '(a b c d e))
           :buffer "*helm buffer source*")


File: helm-devel.info,  Node: helm-source-async,  Next: helm-source-dummy,  Prev: helm-source-in-buffer,  Up: Creating a Source

5.3 ‘helm-source-async’
=======================

Get candidates asynchronously using the output of a process.

     (helm :sources (helm-build-async-source "test2"
                      :candidates-process
                      (lambda ()
                        (start-process "echo" nil "echo" "a\nb\nc\nd\ne")))
           :buffer "*helm async source*")


File: helm-devel.info,  Node: helm-source-dummy,  Next: helm-source-in-file,  Prev: helm-source-async,  Up: Creating a Source

5.4 ‘helm-source-dummy’
=======================

Use ‘helm-pattern’ as candidate

     (defun helm/test-default-action (candidate)
       (browse-url (format
                    "http://www.google.com/search?q=%s"
                    (url-hexify-string candidate))))

     (helm :sources (helm-build-dummy-source "test"
                      :action '(("Google" . helm/test-default-action)))
           :buffer "*helm test*")


File: helm-devel.info,  Node: helm-source-in-file,  Next: Help,  Prev: helm-source-dummy,  Up: Creating a Source

5.5 ‘helm-source-in-file’
=========================

Get candidates from the lines of a named file using
‘helm-source-in-buffer’.

     (helm :sources (helm-build-in-file-source
                        "test" "~/.emacs.d/init.el"
                      :action (lambda (candidate)
                                (let ((linum (with-helm-buffer
                                               (get-text-property
                                                1 'helm-linum
                                                (helm-get-selection nil 'withprop)))))
                                  (find-file (with-helm-buffer
                                               (helm-attr 'candidates-file)))
                                  (goto-line linum))))
           :buffer "*helm test*")



File: helm-devel.info,  Node: Help,  Next: Pre-filtering lines in a buffer,  Prev: helm-source-in-file,  Up: Creating a Source

5.6 Help
========

To give a specific help to your Helm source, create a variable
‘helm-<my-source>-help-string’ and bind it in your source with the
‘helm-message’ slot.  It will then appear when you use ‘C-h m’ or ‘C-c
?=’.


File: helm-devel.info,  Node: Pre-filtering lines in a buffer,  Prev: Help,  Up: Creating a Source

5.7 Pre-filtering lines in a buffer
===================================

Here’s an example of an in-buffer source that pre-filters lines to those
matching a certain regular expression.  Then the pre-filtered lines are
narrowed as the user types.  This uses hl-todo-mode
(https://github.com/tarsius/hl-todo) which provide ‘hl-todo-regexp’ but
you could use any regexp to do the same thing.  The ‘:init’ function
switches to the automatically created buffer, which is returned by
‘(helm-candidate-buffer 'global)’, then it deletes uninteresting lines,
after which Helm presents the remaining lines to the user.  The
‘:get-line’ function is changed to ‘buffer-substring’ so that the
properties are preserved in the ‘helm-buffer’.

     (defun helm-hl-todo-items ()
       "Show `hl-todo'-keyword items in buffer."
       (helm :sources (helm-build-in-buffer-source "hl-todo items"
                        :init (lambda ()
                                (with-current-buffer (helm-candidate-buffer 'global)
                                  (insert (with-helm-current-buffer (buffer-string)))
                                  (goto-char (point-min))
                                  (delete-non-matching-lines hl-todo-regexp)))
                        :get-line #'buffer-substring)
             :buffer "*helm hl-todo*"))

   And it could be also written using the ‘:data’ slot:

     (defun helm-hl-todo-items ()
       "Show `hl-todo'-keyword items in buffer."
       (helm :sources (helm-build-in-buffer-source "hl-todo items"
                        :data (current-buffer)
                        :candidate-transformer (lambda (candidates)
                                                 (cl-loop for c in candidates
                                                          when (string-match hl-todo-regexp c)
                                                          collect c))
                        :get-line #'buffer-substring)
             :buffer "*helm hl-todo*"))


File: helm-devel.info,  Node: Creating a Class,  Next: Writing actions,  Prev: Creating a Source,  Up: Top

6 Creating a Class
******************

* Menu:

* Create your own class inheriting from one of the main classes::
* Create your own class and Inherit from one of helm-type classes::
* Create your source from your own class::
* Write your own helm-type class::


File: helm-devel.info,  Node: Create your own class inheriting from one of the main classes,  Next: Create your own class and Inherit from one of helm-type classes,  Up: Creating a Class

6.1 Create your own class inheriting from one of the main classes
=================================================================

     (defclass my-helm-class (helm-source-sync)
       ((candidates :initform '("foo" "bar" "baz"))))

     (helm :sources (helm-make-source "test" 'my-helm-class)
           :buffer "*helm test*")


   This is same as creating your source with:

     (helm :sources (helm-build-sync-source "test"
                      :candidates '("foo" "bar" "baz"))
           :buffer "*helm test*")



File: helm-devel.info,  Node: Create your own class and Inherit from one of helm-type classes,  Next: Create your source from your own class,  Prev: Create your own class inheriting from one of the main classes,  Up: Creating a Class

6.2 Create your own class and Inherit from one of helm-type classes
===================================================================

Here an example from a helm user that store a list of favorite files in
a file ‘~/.fav’ to retrieve them quickly:

     (defclass helm-test-fav (helm-source-in-file helm-type-file)
       ((candidates-file :initform "~/.fav")))

     (helm :sources (helm-make-source "test" 'helm-test-fav)
           :buffer "*helm test*")


* Menu:

* Creating a new class using as parent a class inheriting itself from a helm-type-* class::


File: helm-devel.info,  Node: Creating a new class using as parent a class inheriting itself from a helm-type-* class,  Up: Create your own class and Inherit from one of helm-type classes

6.2.1 Creating a new class using as parent a class inheriting itself from a ‘helm-type-*’ class
-----------------------------------------------------------------------------------------------

Sometimes, you may want to inherit from a class using itself a
‘helm-type-*’ class but with one or more attributes of this class
slightly modified for your needs.  You may think that you only need to
create your new class inheriting from the class inheriting itself from
the ‘helm-type-*’ class, but this is not enough.

   Here how to do, reusing the example above we modify the actions
predefined by helm-type-file:

  1. Create a fake class:

          (defclass helm-override-test-fav (helm-source) ())

  2. Create a method for this class

     This method is used as a ‘:PRIMARY’ method, which mean that the
     similar parent method, if some will not be used, in particular the
     ‘helm-source-in-file’ method which calls itself the
     ‘helm-source-in-buffer’ method, so to be sure these important
     methods are used, use ‘call-next-method’, see below.

          (defmethod helm--setup-source ((source helm-override-test-fav))
            (call-next-method)
            (let ((actions (slot-value source 'action)))
              (setf (slot-value source 'action)
                    (helm-append-at-nth (symbol-value actions)
                                        '(("test" . ignore)) 1))))


  3. Create now your main class inheriting from your new overriding
     class

          (defclass helm-test-fav (helm-source-in-file helm-type-file helm-override-test-fav)
            ((candidates-file :initform "~/.fav")))

     Now when running helm with a source built from your new class you
     should see the new action you have added in second position to the
     other file action.


File: helm-devel.info,  Node: Create your source from your own class,  Next: Write your own helm-type class,  Prev: Create your own class and Inherit from one of helm-type classes,  Up: Creating a Class

6.3 Create your source from your own class
==========================================

Once your class is created, you have to use ‘helm-make-source’ to build
your source.

     (helm-make-source "test" 'my-class :action 'foo [...other slots])


File: helm-devel.info,  Node: Write your own helm-type class,  Prev: Create your source from your own class,  Up: Creating a Class

6.4 Write your own helm-type class
==================================

You will find several examples in the ‘helm-types.el’(1) file.

   The main thing to remember is to create an empty class and fill it
using two ‘defmethod’ s, one empty which should be a primary method and
one which is a before method, use for this the slots ‘:primary’ and
‘:before’ of ‘defmethod’.  This allows you to override different slots
of the inheriting type class in your new class.

   ---------- Footnotes ----------

   (1) <https://github.com/emacs-helm/helm/blob/master/helm-types.el>


File: helm-devel.info,  Node: Writing actions,  Next: Writing persistent actions,  Prev: Creating a Class,  Up: Top

7 Writing actions
*****************

Actions are specified in the ‘:action’ slot of your class, it is an
alist composed of (ACTION_NAME .  FUNCTION), it can be also a symbol
defining a customizable action alist.

     (defcustom helm-source-foo
       '(("Do this" . foo)
         ("Do that" . bar))
       "A customizable action list."
       :group 'helm
       :type '(alist :key-type string :value-type function))


   It is recommended however to use ‘helm-make-actions’ to define your
actions easily, it allow also to create actions with condition, e.g

     (helm-make-actions "Do this"
                        'foo
                        (lambda ()
                          (when (featurep 'something)
                            "Do that"))
                        'bar)


File: helm-devel.info,  Node: Writing persistent actions,  Prev: Writing actions,  Up: Top

8 Writing persistent actions
****************************

The way to specify persistent-action is to use the slot
‘:persistent-action’ to specify the function Helm will run when using
‘C-j’ or ‘C-z’.  If you don’t specify this helm will run the first
action of the action.

   You can also specify additional persistent actions, which must be
bound to keys other than ‘C-j’ or ‘C-z’.

     (defun helm-foo-persistent-action ()
       "Bind a new persistent action 'foo-action to foo function.
     foo function is an action function called with one arg candidate."
       (interactive)
       (with-helm-alive-p
         ;; never split means to not split the helm window when executing
         ;; this persistent action. If your source is using full frame you
         ;; will want your helm buffer to split to display a buffer for the
         ;; persistent action (if it needs one to display something).
         (helm-attrset 'foo-action '(foo . never-split))
         (helm-execute-persistent-action 'foo-action)))

   Then you bind your new persistent action to something else than ‘C-j’
or ‘C-z’.



Tag Table:
Node: Top221
Node: Introduction1370
Ref: Introduction-Footnote-11847
Ref: Introduction-Footnote-21917
Node: Creating a Helm buffer1987
Node: Helm attributes2571
Node: Looking up Helm attributes3264
Node: Mandatory attributes3562
Node: Optional but important attributes4346
Node: helm keywords4565
Node: sources4764
Node: buffer5252
Node: input5726
Node: Customizing Action Lists6319
Node: Creating a Source7315
Node: helm-source-sync8591
Node: helm-source-in-buffer8983
Node: helm-source-async9415
Node: helm-source-dummy9908
Node: helm-source-in-file10472
Node: Help11386
Node: Pre-filtering lines in a buffer11758
Node: Creating a Class13872
Node: Create your own class inheriting from one of the main classes14243
Node: Create your own class and Inherit from one of helm-type classes14956
Node: Creating a new class using as parent a class inheriting itself from a helm-type-* class15762
Node: Create your source from your own class17780
Node: Write your own helm-type class18235
Ref: Write your own helm-type class-Footnote-118890
Node: Writing actions18961
Node: Writing persistent actions19871

End Tag Table


Local Variables:
coding: utf-8
End:
